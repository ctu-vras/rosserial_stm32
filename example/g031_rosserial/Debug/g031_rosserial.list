
g031_rosserial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c34  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000330  08005cf0  08005cf0  00015cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006020  08006020  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08006020  08006020  00016020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006028  08006028  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08006028  08006028  00016028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006030  08006030  00016030  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08006034  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c88  20000068  0800609c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cf0  0800609c  00020cf0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   000129da  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002631  00000000  00000000  00032aad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b90  00000000  00000000  000350e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f5  00000000  00000000  00035c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00016752  00000000  00000000  00036565  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d6ff  00000000  00000000  0004ccb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00097783  00000000  00000000  0005a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002cd0  00000000  00000000  000f1b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000f480c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000068 	.word	0x20000068
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08005cd8 	.word	0x08005cd8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	2000006c 	.word	0x2000006c
 8000100:	08005cd8 	.word	0x08005cd8

08000104 <strlen>:
 8000104:	2300      	movs	r3, #0
 8000106:	5cc2      	ldrb	r2, [r0, r3]
 8000108:	3301      	adds	r3, #1
 800010a:	2a00      	cmp	r2, #0
 800010c:	d1fb      	bne.n	8000106 <strlen+0x2>
 800010e:	1e58      	subs	r0, r3, #1
 8000110:	4770      	bx	lr
	...

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	; 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f806 	bl	8000228 <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__aeabi_idiv0>:
 8000228:	4770      	bx	lr
 800022a:	46c0      	nop			; (mov r8, r8)

0800022c <__aeabi_uldivmod>:
 800022c:	2b00      	cmp	r3, #0
 800022e:	d111      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000230:	2a00      	cmp	r2, #0
 8000232:	d10f      	bne.n	8000254 <__aeabi_uldivmod+0x28>
 8000234:	2900      	cmp	r1, #0
 8000236:	d100      	bne.n	800023a <__aeabi_uldivmod+0xe>
 8000238:	2800      	cmp	r0, #0
 800023a:	d002      	beq.n	8000242 <__aeabi_uldivmod+0x16>
 800023c:	2100      	movs	r1, #0
 800023e:	43c9      	mvns	r1, r1
 8000240:	0008      	movs	r0, r1
 8000242:	b407      	push	{r0, r1, r2}
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <__aeabi_uldivmod+0x24>)
 8000246:	a102      	add	r1, pc, #8	; (adr r1, 8000250 <__aeabi_uldivmod+0x24>)
 8000248:	1840      	adds	r0, r0, r1
 800024a:	9002      	str	r0, [sp, #8]
 800024c:	bd03      	pop	{r0, r1, pc}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	ffffffd9 	.word	0xffffffd9
 8000254:	b403      	push	{r0, r1}
 8000256:	4668      	mov	r0, sp
 8000258:	b501      	push	{r0, lr}
 800025a:	9802      	ldr	r0, [sp, #8]
 800025c:	f000 f806 	bl	800026c <__udivmoddi4>
 8000260:	9b01      	ldr	r3, [sp, #4]
 8000262:	469e      	mov	lr, r3
 8000264:	b002      	add	sp, #8
 8000266:	bc0c      	pop	{r2, r3}
 8000268:	4770      	bx	lr
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__udivmoddi4>:
 800026c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800026e:	4657      	mov	r7, sl
 8000270:	464e      	mov	r6, r9
 8000272:	4645      	mov	r5, r8
 8000274:	46de      	mov	lr, fp
 8000276:	b5e0      	push	{r5, r6, r7, lr}
 8000278:	0004      	movs	r4, r0
 800027a:	000d      	movs	r5, r1
 800027c:	4692      	mov	sl, r2
 800027e:	4699      	mov	r9, r3
 8000280:	b083      	sub	sp, #12
 8000282:	428b      	cmp	r3, r1
 8000284:	d830      	bhi.n	80002e8 <__udivmoddi4+0x7c>
 8000286:	d02d      	beq.n	80002e4 <__udivmoddi4+0x78>
 8000288:	4649      	mov	r1, r9
 800028a:	4650      	mov	r0, sl
 800028c:	f000 f8d8 	bl	8000440 <__clzdi2>
 8000290:	0029      	movs	r1, r5
 8000292:	0006      	movs	r6, r0
 8000294:	0020      	movs	r0, r4
 8000296:	f000 f8d3 	bl	8000440 <__clzdi2>
 800029a:	1a33      	subs	r3, r6, r0
 800029c:	4698      	mov	r8, r3
 800029e:	3b20      	subs	r3, #32
 80002a0:	d434      	bmi.n	800030c <__udivmoddi4+0xa0>
 80002a2:	469b      	mov	fp, r3
 80002a4:	4653      	mov	r3, sl
 80002a6:	465a      	mov	r2, fp
 80002a8:	4093      	lsls	r3, r2
 80002aa:	4642      	mov	r2, r8
 80002ac:	001f      	movs	r7, r3
 80002ae:	4653      	mov	r3, sl
 80002b0:	4093      	lsls	r3, r2
 80002b2:	001e      	movs	r6, r3
 80002b4:	42af      	cmp	r7, r5
 80002b6:	d83b      	bhi.n	8000330 <__udivmoddi4+0xc4>
 80002b8:	42af      	cmp	r7, r5
 80002ba:	d100      	bne.n	80002be <__udivmoddi4+0x52>
 80002bc:	e079      	b.n	80003b2 <__udivmoddi4+0x146>
 80002be:	465b      	mov	r3, fp
 80002c0:	1ba4      	subs	r4, r4, r6
 80002c2:	41bd      	sbcs	r5, r7
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	da00      	bge.n	80002ca <__udivmoddi4+0x5e>
 80002c8:	e076      	b.n	80003b8 <__udivmoddi4+0x14c>
 80002ca:	2200      	movs	r2, #0
 80002cc:	2300      	movs	r3, #0
 80002ce:	9200      	str	r2, [sp, #0]
 80002d0:	9301      	str	r3, [sp, #4]
 80002d2:	2301      	movs	r3, #1
 80002d4:	465a      	mov	r2, fp
 80002d6:	4093      	lsls	r3, r2
 80002d8:	9301      	str	r3, [sp, #4]
 80002da:	2301      	movs	r3, #1
 80002dc:	4642      	mov	r2, r8
 80002de:	4093      	lsls	r3, r2
 80002e0:	9300      	str	r3, [sp, #0]
 80002e2:	e029      	b.n	8000338 <__udivmoddi4+0xcc>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	d9cf      	bls.n	8000288 <__udivmoddi4+0x1c>
 80002e8:	2200      	movs	r2, #0
 80002ea:	2300      	movs	r3, #0
 80002ec:	9200      	str	r2, [sp, #0]
 80002ee:	9301      	str	r3, [sp, #4]
 80002f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <__udivmoddi4+0x8e>
 80002f6:	601c      	str	r4, [r3, #0]
 80002f8:	605d      	str	r5, [r3, #4]
 80002fa:	9800      	ldr	r0, [sp, #0]
 80002fc:	9901      	ldr	r1, [sp, #4]
 80002fe:	b003      	add	sp, #12
 8000300:	bcf0      	pop	{r4, r5, r6, r7}
 8000302:	46bb      	mov	fp, r7
 8000304:	46b2      	mov	sl, r6
 8000306:	46a9      	mov	r9, r5
 8000308:	46a0      	mov	r8, r4
 800030a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800030c:	4642      	mov	r2, r8
 800030e:	469b      	mov	fp, r3
 8000310:	2320      	movs	r3, #32
 8000312:	1a9b      	subs	r3, r3, r2
 8000314:	4652      	mov	r2, sl
 8000316:	40da      	lsrs	r2, r3
 8000318:	4641      	mov	r1, r8
 800031a:	0013      	movs	r3, r2
 800031c:	464a      	mov	r2, r9
 800031e:	408a      	lsls	r2, r1
 8000320:	0017      	movs	r7, r2
 8000322:	4642      	mov	r2, r8
 8000324:	431f      	orrs	r7, r3
 8000326:	4653      	mov	r3, sl
 8000328:	4093      	lsls	r3, r2
 800032a:	001e      	movs	r6, r3
 800032c:	42af      	cmp	r7, r5
 800032e:	d9c3      	bls.n	80002b8 <__udivmoddi4+0x4c>
 8000330:	2200      	movs	r2, #0
 8000332:	2300      	movs	r3, #0
 8000334:	9200      	str	r2, [sp, #0]
 8000336:	9301      	str	r3, [sp, #4]
 8000338:	4643      	mov	r3, r8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d0d8      	beq.n	80002f0 <__udivmoddi4+0x84>
 800033e:	07fb      	lsls	r3, r7, #31
 8000340:	0872      	lsrs	r2, r6, #1
 8000342:	431a      	orrs	r2, r3
 8000344:	4646      	mov	r6, r8
 8000346:	087b      	lsrs	r3, r7, #1
 8000348:	e00e      	b.n	8000368 <__udivmoddi4+0xfc>
 800034a:	42ab      	cmp	r3, r5
 800034c:	d101      	bne.n	8000352 <__udivmoddi4+0xe6>
 800034e:	42a2      	cmp	r2, r4
 8000350:	d80c      	bhi.n	800036c <__udivmoddi4+0x100>
 8000352:	1aa4      	subs	r4, r4, r2
 8000354:	419d      	sbcs	r5, r3
 8000356:	2001      	movs	r0, #1
 8000358:	1924      	adds	r4, r4, r4
 800035a:	416d      	adcs	r5, r5
 800035c:	2100      	movs	r1, #0
 800035e:	3e01      	subs	r6, #1
 8000360:	1824      	adds	r4, r4, r0
 8000362:	414d      	adcs	r5, r1
 8000364:	2e00      	cmp	r6, #0
 8000366:	d006      	beq.n	8000376 <__udivmoddi4+0x10a>
 8000368:	42ab      	cmp	r3, r5
 800036a:	d9ee      	bls.n	800034a <__udivmoddi4+0xde>
 800036c:	3e01      	subs	r6, #1
 800036e:	1924      	adds	r4, r4, r4
 8000370:	416d      	adcs	r5, r5
 8000372:	2e00      	cmp	r6, #0
 8000374:	d1f8      	bne.n	8000368 <__udivmoddi4+0xfc>
 8000376:	9800      	ldr	r0, [sp, #0]
 8000378:	9901      	ldr	r1, [sp, #4]
 800037a:	465b      	mov	r3, fp
 800037c:	1900      	adds	r0, r0, r4
 800037e:	4169      	adcs	r1, r5
 8000380:	2b00      	cmp	r3, #0
 8000382:	db24      	blt.n	80003ce <__udivmoddi4+0x162>
 8000384:	002b      	movs	r3, r5
 8000386:	465a      	mov	r2, fp
 8000388:	4644      	mov	r4, r8
 800038a:	40d3      	lsrs	r3, r2
 800038c:	002a      	movs	r2, r5
 800038e:	40e2      	lsrs	r2, r4
 8000390:	001c      	movs	r4, r3
 8000392:	465b      	mov	r3, fp
 8000394:	0015      	movs	r5, r2
 8000396:	2b00      	cmp	r3, #0
 8000398:	db2a      	blt.n	80003f0 <__udivmoddi4+0x184>
 800039a:	0026      	movs	r6, r4
 800039c:	409e      	lsls	r6, r3
 800039e:	0033      	movs	r3, r6
 80003a0:	0026      	movs	r6, r4
 80003a2:	4647      	mov	r7, r8
 80003a4:	40be      	lsls	r6, r7
 80003a6:	0032      	movs	r2, r6
 80003a8:	1a80      	subs	r0, r0, r2
 80003aa:	4199      	sbcs	r1, r3
 80003ac:	9000      	str	r0, [sp, #0]
 80003ae:	9101      	str	r1, [sp, #4]
 80003b0:	e79e      	b.n	80002f0 <__udivmoddi4+0x84>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d8bc      	bhi.n	8000330 <__udivmoddi4+0xc4>
 80003b6:	e782      	b.n	80002be <__udivmoddi4+0x52>
 80003b8:	4642      	mov	r2, r8
 80003ba:	2320      	movs	r3, #32
 80003bc:	2100      	movs	r1, #0
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	9100      	str	r1, [sp, #0]
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	2201      	movs	r2, #1
 80003c8:	40da      	lsrs	r2, r3
 80003ca:	9201      	str	r2, [sp, #4]
 80003cc:	e785      	b.n	80002da <__udivmoddi4+0x6e>
 80003ce:	4642      	mov	r2, r8
 80003d0:	2320      	movs	r3, #32
 80003d2:	1a9b      	subs	r3, r3, r2
 80003d4:	002a      	movs	r2, r5
 80003d6:	4646      	mov	r6, r8
 80003d8:	409a      	lsls	r2, r3
 80003da:	0023      	movs	r3, r4
 80003dc:	40f3      	lsrs	r3, r6
 80003de:	4644      	mov	r4, r8
 80003e0:	4313      	orrs	r3, r2
 80003e2:	002a      	movs	r2, r5
 80003e4:	40e2      	lsrs	r2, r4
 80003e6:	001c      	movs	r4, r3
 80003e8:	465b      	mov	r3, fp
 80003ea:	0015      	movs	r5, r2
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	dad4      	bge.n	800039a <__udivmoddi4+0x12e>
 80003f0:	4642      	mov	r2, r8
 80003f2:	002f      	movs	r7, r5
 80003f4:	2320      	movs	r3, #32
 80003f6:	0026      	movs	r6, r4
 80003f8:	4097      	lsls	r7, r2
 80003fa:	1a9b      	subs	r3, r3, r2
 80003fc:	40de      	lsrs	r6, r3
 80003fe:	003b      	movs	r3, r7
 8000400:	4333      	orrs	r3, r6
 8000402:	e7cd      	b.n	80003a0 <__udivmoddi4+0x134>

08000404 <__clzsi2>:
 8000404:	211c      	movs	r1, #28
 8000406:	2301      	movs	r3, #1
 8000408:	041b      	lsls	r3, r3, #16
 800040a:	4298      	cmp	r0, r3
 800040c:	d301      	bcc.n	8000412 <__clzsi2+0xe>
 800040e:	0c00      	lsrs	r0, r0, #16
 8000410:	3910      	subs	r1, #16
 8000412:	0a1b      	lsrs	r3, r3, #8
 8000414:	4298      	cmp	r0, r3
 8000416:	d301      	bcc.n	800041c <__clzsi2+0x18>
 8000418:	0a00      	lsrs	r0, r0, #8
 800041a:	3908      	subs	r1, #8
 800041c:	091b      	lsrs	r3, r3, #4
 800041e:	4298      	cmp	r0, r3
 8000420:	d301      	bcc.n	8000426 <__clzsi2+0x22>
 8000422:	0900      	lsrs	r0, r0, #4
 8000424:	3904      	subs	r1, #4
 8000426:	a202      	add	r2, pc, #8	; (adr r2, 8000430 <__clzsi2+0x2c>)
 8000428:	5c10      	ldrb	r0, [r2, r0]
 800042a:	1840      	adds	r0, r0, r1
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	02020304 	.word	0x02020304
 8000434:	01010101 	.word	0x01010101
	...

08000440 <__clzdi2>:
 8000440:	b510      	push	{r4, lr}
 8000442:	2900      	cmp	r1, #0
 8000444:	d103      	bne.n	800044e <__clzdi2+0xe>
 8000446:	f7ff ffdd 	bl	8000404 <__clzsi2>
 800044a:	3020      	adds	r0, #32
 800044c:	e002      	b.n	8000454 <__clzdi2+0x14>
 800044e:	0008      	movs	r0, r1
 8000450:	f7ff ffd8 	bl	8000404 <__clzsi2>
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
 8000460:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000462:	683b      	ldr	r3, [r7, #0]
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	490d      	ldr	r1, [pc, #52]	; (800049c <_ZN3ros16normalizeSecNSecERmS0_+0x44>)
 8000468:	0018      	movs	r0, r3
 800046a:	f7ff fed9 	bl	8000220 <__aeabi_uidivmod>
 800046e:	000b      	movs	r3, r1
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4909      	ldr	r1, [pc, #36]	; (800049c <_ZN3ros16normalizeSecNSecERmS0_+0x44>)
 8000478:	0018      	movs	r0, r3
 800047a:	f7ff fe4b 	bl	8000114 <__udivsi3>
 800047e:	0003      	movs	r3, r0
 8000480:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681a      	ldr	r2, [r3, #0]
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	18d2      	adds	r2, r2, r3
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800048e:	683b      	ldr	r3, [r7, #0]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	601a      	str	r2, [r3, #0]
}
 8000494:	46c0      	nop			; (mov r8, r8)
 8000496:	46bd      	mov	sp, r7
 8000498:	b004      	add	sp, #16
 800049a:	bd80      	pop	{r7, pc}
 800049c:	3b9aca00 	.word	0x3b9aca00

080004a0 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b082      	sub	sp, #8
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	2200      	movs	r2, #0
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	0018      	movs	r0, r3
 80004b8:	46bd      	mov	sp, r7
 80004ba:	b002      	add	sp, #8
 80004bc:	bd80      	pop	{r7, pc}
	...

080004c0 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
 80004c8:	4a03      	ldr	r2, [pc, #12]	; (80004d8 <_ZN3ros3MsgC1Ev+0x18>)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	601a      	str	r2, [r3, #0]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	0018      	movs	r0, r3
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b002      	add	sp, #8
 80004d6:	bd80      	pop	{r7, pc}
 80004d8:	08005fd8 	.word	0x08005fd8

080004dc <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
      data()
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	0018      	movs	r0, r3
 80004e8:	f7ff ffea 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 80004ec:	4a06      	ldr	r2, [pc, #24]	; (8000508 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	3304      	adds	r3, #4
 80004f6:	0018      	movs	r0, r3
 80004f8:	f7ff ffd2 	bl	80004a0 <_ZN3ros4TimeC1Ev>
    {
    }
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	0018      	movs	r0, r3
 8000500:	46bd      	mov	sp, r7
 8000502:	b002      	add	sp, #8
 8000504:	bd80      	pop	{r7, pc}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	08005fc0 	.word	0x08005fc0

0800050c <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000516:	2300      	movs	r3, #0
 8000518:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	6859      	ldr	r1, [r3, #4]
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	18d3      	adds	r3, r2, r3
 8000524:	b2ca      	uxtb	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	0a19      	lsrs	r1, r3, #8
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	0c19      	lsrs	r1, r3, #16
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3302      	adds	r3, #2
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	18d3      	adds	r3, r2, r3
 8000548:	b2ca      	uxtb	r2, r1
 800054a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	0e19      	lsrs	r1, r3, #24
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3303      	adds	r3, #3
 8000556:	683a      	ldr	r2, [r7, #0]
 8000558:	18d3      	adds	r3, r2, r3
 800055a:	b2ca      	uxtb	r2, r1
 800055c:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	3304      	adds	r3, #4
 8000562:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	6899      	ldr	r1, [r3, #8]
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	683a      	ldr	r2, [r7, #0]
 800056c:	18d3      	adds	r3, r2, r3
 800056e:	b2ca      	uxtb	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	0a19      	lsrs	r1, r3, #8
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	3301      	adds	r3, #1
 800057c:	683a      	ldr	r2, [r7, #0]
 800057e:	18d3      	adds	r3, r2, r3
 8000580:	b2ca      	uxtb	r2, r1
 8000582:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	0c19      	lsrs	r1, r3, #16
 800058a:	68fb      	ldr	r3, [r7, #12]
 800058c:	3302      	adds	r3, #2
 800058e:	683a      	ldr	r2, [r7, #0]
 8000590:	18d3      	adds	r3, r2, r3
 8000592:	b2ca      	uxtb	r2, r1
 8000594:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689b      	ldr	r3, [r3, #8]
 800059a:	0e19      	lsrs	r1, r3, #24
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	3303      	adds	r3, #3
 80005a0:	683a      	ldr	r2, [r7, #0]
 80005a2:	18d3      	adds	r3, r2, r3
 80005a4:	b2ca      	uxtb	r2, r1
 80005a6:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	3304      	adds	r3, #4
 80005ac:	60fb      	str	r3, [r7, #12]
      return offset;
 80005ae:	68fb      	ldr	r3, [r7, #12]
    }
 80005b0:	0018      	movs	r0, r3
 80005b2:	46bd      	mov	sp, r7
 80005b4:	b004      	add	sp, #16
 80005b6:	bd80      	pop	{r7, pc}

080005b8 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 80005c6:	68fb      	ldr	r3, [r7, #12]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	18d3      	adds	r3, r2, r3
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	001a      	movs	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	685a      	ldr	r2, [r3, #4]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	3301      	adds	r3, #1
 80005dc:	6839      	ldr	r1, [r7, #0]
 80005de:	18cb      	adds	r3, r1, r3
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	021b      	lsls	r3, r3, #8
 80005e4:	431a      	orrs	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	685a      	ldr	r2, [r3, #4]
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	3302      	adds	r3, #2
 80005f2:	6839      	ldr	r1, [r7, #0]
 80005f4:	18cb      	adds	r3, r1, r3
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	431a      	orrs	r2, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	685a      	ldr	r2, [r3, #4]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	3303      	adds	r3, #3
 8000608:	6839      	ldr	r1, [r7, #0]
 800060a:	18cb      	adds	r3, r1, r3
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	061b      	lsls	r3, r3, #24
 8000610:	431a      	orrs	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	3304      	adds	r3, #4
 800061a:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	683a      	ldr	r2, [r7, #0]
 8000620:	18d3      	adds	r3, r2, r3
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	001a      	movs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	6839      	ldr	r1, [r7, #0]
 8000634:	18cb      	adds	r3, r1, r3
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	021b      	lsls	r3, r3, #8
 800063a:	431a      	orrs	r2, r3
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	3302      	adds	r3, #2
 8000648:	6839      	ldr	r1, [r7, #0]
 800064a:	18cb      	adds	r3, r1, r3
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	041b      	lsls	r3, r3, #16
 8000650:	431a      	orrs	r2, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	689a      	ldr	r2, [r3, #8]
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3303      	adds	r3, #3
 800065e:	6839      	ldr	r1, [r7, #0]
 8000660:	18cb      	adds	r3, r1, r3
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	061b      	lsls	r3, r3, #24
 8000666:	431a      	orrs	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	3304      	adds	r3, #4
 8000670:	60fb      	str	r3, [r7, #12]
     return offset;
 8000672:	68fb      	ldr	r3, [r7, #12]
    }
 8000674:	0018      	movs	r0, r3
 8000676:	46bd      	mov	sp, r7
 8000678:	b004      	add	sp, #16
 800067a:	bd80      	pop	{r7, pc}

0800067c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800067c:	b580      	push	{r7, lr}
 800067e:	b082      	sub	sp, #8
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	4b02      	ldr	r3, [pc, #8]	; (8000690 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 8000686:	0018      	movs	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	b002      	add	sp, #8
 800068c:	bd80      	pop	{r7, pc}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	08005cf0 	.word	0x08005cf0

08000694 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	4b02      	ldr	r3, [pc, #8]	; (80006a8 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 800069e:	0018      	movs	r0, r3
 80006a0:	46bd      	mov	sp, r7
 80006a2:	b002      	add	sp, #8
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	08005d00 	.word	0x08005d00

080006ac <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	0018      	movs	r0, r3
 80006b8:	f7ff ff02 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 80006bc:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
      topic_id(0),
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a09      	ldr	r2, [pc, #36]	; (80006f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006cc:	609a      	str	r2, [r3, #8]
      message_type(""),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	4a07      	ldr	r2, [pc, #28]	; (80006f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006d2:	60da      	str	r2, [r3, #12]
      md5sum(""),
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	4a06      	ldr	r2, [pc, #24]	; (80006f0 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80006d8:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	615a      	str	r2, [r3, #20]
    {
    }
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	0018      	movs	r0, r3
 80006e4:	46bd      	mov	sp, r7
 80006e6:	b002      	add	sp, #8
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	08005fa8 	.word	0x08005fa8
 80006f0:	08005d24 	.word	0x08005d24

080006f4 <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	8899      	ldrh	r1, [r3, #4]
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	683a      	ldr	r2, [r7, #0]
 800070a:	18d3      	adds	r3, r2, r3
 800070c:	b2ca      	uxtb	r2, r1
 800070e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	889b      	ldrh	r3, [r3, #4]
 8000714:	0a1b      	lsrs	r3, r3, #8
 8000716:	b299      	uxth	r1, r3
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	3301      	adds	r3, #1
 800071c:	683a      	ldr	r2, [r7, #0]
 800071e:	18d3      	adds	r3, r2, r3
 8000720:	b2ca      	uxtb	r2, r1
 8000722:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	3302      	adds	r3, #2
 8000728:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	689b      	ldr	r3, [r3, #8]
 800072e:	0018      	movs	r0, r3
 8000730:	f7ff fce8 	bl	8000104 <strlen>
 8000734:	0003      	movs	r3, r0
 8000736:	61bb      	str	r3, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	683a      	ldr	r2, [r7, #0]
 800073c:	18d3      	adds	r3, r2, r3
 800073e:	69ba      	ldr	r2, [r7, #24]
 8000740:	0011      	movs	r1, r2
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fab9 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000748:	69fb      	ldr	r3, [r7, #28]
 800074a:	3304      	adds	r3, #4
 800074c:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	683a      	ldr	r2, [r7, #0]
 8000752:	18d0      	adds	r0, r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	689b      	ldr	r3, [r3, #8]
 8000758:	69ba      	ldr	r2, [r7, #24]
 800075a:	0019      	movs	r1, r3
 800075c:	f005 f99a 	bl	8005a94 <memcpy>
      offset += length_topic_name;
 8000760:	69fa      	ldr	r2, [r7, #28]
 8000762:	69bb      	ldr	r3, [r7, #24]
 8000764:	18d3      	adds	r3, r2, r3
 8000766:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	68db      	ldr	r3, [r3, #12]
 800076c:	0018      	movs	r0, r3
 800076e:	f7ff fcc9 	bl	8000104 <strlen>
 8000772:	0003      	movs	r3, r0
 8000774:	617b      	str	r3, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000776:	69fb      	ldr	r3, [r7, #28]
 8000778:	683a      	ldr	r2, [r7, #0]
 800077a:	18d3      	adds	r3, r2, r3
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	0011      	movs	r1, r2
 8000780:	0018      	movs	r0, r3
 8000782:	f001 fa9a 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3304      	adds	r3, #4
 800078a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800078c:	69fb      	ldr	r3, [r7, #28]
 800078e:	683a      	ldr	r2, [r7, #0]
 8000790:	18d0      	adds	r0, r2, r3
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	697a      	ldr	r2, [r7, #20]
 8000798:	0019      	movs	r1, r3
 800079a:	f005 f97b 	bl	8005a94 <memcpy>
      offset += length_message_type;
 800079e:	69fa      	ldr	r2, [r7, #28]
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	18d3      	adds	r3, r2, r3
 80007a4:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	691b      	ldr	r3, [r3, #16]
 80007aa:	0018      	movs	r0, r3
 80007ac:	f7ff fcaa 	bl	8000104 <strlen>
 80007b0:	0003      	movs	r3, r0
 80007b2:	613b      	str	r3, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	683a      	ldr	r2, [r7, #0]
 80007b8:	18d3      	adds	r3, r2, r3
 80007ba:	693a      	ldr	r2, [r7, #16]
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f001 fa7b 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80007c4:	69fb      	ldr	r3, [r7, #28]
 80007c6:	3304      	adds	r3, #4
 80007c8:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 80007ca:	69fb      	ldr	r3, [r7, #28]
 80007cc:	683a      	ldr	r2, [r7, #0]
 80007ce:	18d0      	adds	r0, r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	691b      	ldr	r3, [r3, #16]
 80007d4:	693a      	ldr	r2, [r7, #16]
 80007d6:	0019      	movs	r1, r3
 80007d8:	f005 f95c 	bl	8005a94 <memcpy>
      offset += length_md5sum;
 80007dc:	69fa      	ldr	r2, [r7, #28]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	18d3      	adds	r3, r2, r3
 80007e2:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	695b      	ldr	r3, [r3, #20]
 80007e8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80007ea:	68f9      	ldr	r1, [r7, #12]
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	18d3      	adds	r3, r2, r3
 80007f2:	b2ca      	uxtb	r2, r1
 80007f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	0a19      	lsrs	r1, r3, #8
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3301      	adds	r3, #1
 80007fe:	683a      	ldr	r2, [r7, #0]
 8000800:	18d3      	adds	r3, r2, r3
 8000802:	b2ca      	uxtb	r2, r1
 8000804:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	0c19      	lsrs	r1, r3, #16
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3302      	adds	r3, #2
 800080e:	683a      	ldr	r2, [r7, #0]
 8000810:	18d3      	adds	r3, r2, r3
 8000812:	b2ca      	uxtb	r2, r1
 8000814:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	0e19      	lsrs	r1, r3, #24
 800081a:	69fb      	ldr	r3, [r7, #28]
 800081c:	3303      	adds	r3, #3
 800081e:	683a      	ldr	r2, [r7, #0]
 8000820:	18d3      	adds	r3, r2, r3
 8000822:	b2ca      	uxtb	r2, r1
 8000824:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	3304      	adds	r3, #4
 800082a:	61fb      	str	r3, [r7, #28]
      return offset;
 800082c:	69fb      	ldr	r3, [r7, #28]
    }
 800082e:	0018      	movs	r0, r3
 8000830:	46bd      	mov	sp, r7
 8000832:	b008      	add	sp, #32
 8000834:	bd80      	pop	{r7, pc}

08000836 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000836:	b580      	push	{r7, lr}
 8000838:	b08a      	sub	sp, #40	; 0x28
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
 800083e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	683a      	ldr	r2, [r7, #0]
 8000848:	18d3      	adds	r3, r2, r3
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	b29a      	uxth	r2, r3
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	889b      	ldrh	r3, [r3, #4]
 8000856:	b21a      	sxth	r2, r3
 8000858:	69bb      	ldr	r3, [r7, #24]
 800085a:	3301      	adds	r3, #1
 800085c:	6839      	ldr	r1, [r7, #0]
 800085e:	18cb      	adds	r3, r1, r3
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	021b      	lsls	r3, r3, #8
 8000864:	b21b      	sxth	r3, r3
 8000866:	4313      	orrs	r3, r2
 8000868:	b21b      	sxth	r3, r3
 800086a:	b29a      	uxth	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 8000870:	69bb      	ldr	r3, [r7, #24]
 8000872:	3302      	adds	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000876:	69bb      	ldr	r3, [r7, #24]
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	18d2      	adds	r2, r2, r3
 800087c:	2314      	movs	r3, #20
 800087e:	18fb      	adds	r3, r7, r3
 8000880:	0011      	movs	r1, r2
 8000882:	0018      	movs	r0, r3
 8000884:	f001 fa36 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000888:	69bb      	ldr	r3, [r7, #24]
 800088a:	3304      	adds	r3, #4
 800088c:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	627b      	str	r3, [r7, #36]	; 0x24
 8000892:	e00b      	b.n	80008ac <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000894:	683a      	ldr	r2, [r7, #0]
 8000896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000898:	18d2      	adds	r2, r2, r3
 800089a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800089c:	3b01      	subs	r3, #1
 800089e:	6839      	ldr	r1, [r7, #0]
 80008a0:	18cb      	adds	r3, r1, r3
 80008a2:	7812      	ldrb	r2, [r2, #0]
 80008a4:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 80008a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008a8:	3301      	adds	r3, #1
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
 80008ac:	69ba      	ldr	r2, [r7, #24]
 80008ae:	697b      	ldr	r3, [r7, #20]
 80008b0:	18d3      	adds	r3, r2, r3
 80008b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d3ed      	bcc.n	8000894 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 80008b8:	69ba      	ldr	r2, [r7, #24]
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	18d3      	adds	r3, r2, r3
 80008be:	3b01      	subs	r3, #1
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	18d3      	adds	r3, r2, r3
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	3b01      	subs	r3, #1
 80008cc:	683a      	ldr	r2, [r7, #0]
 80008ce:	18d2      	adds	r2, r2, r3
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	18d3      	adds	r3, r2, r3
 80008da:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	683a      	ldr	r2, [r7, #0]
 80008e0:	18d2      	adds	r2, r2, r3
 80008e2:	2310      	movs	r3, #16
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	0011      	movs	r1, r2
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 fa03 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	3304      	adds	r3, #4
 80008f2:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80008f4:	69bb      	ldr	r3, [r7, #24]
 80008f6:	623b      	str	r3, [r7, #32]
 80008f8:	e00b      	b.n	8000912 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 80008fa:	683a      	ldr	r2, [r7, #0]
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	18d2      	adds	r2, r2, r3
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	3b01      	subs	r3, #1
 8000904:	6839      	ldr	r1, [r7, #0]
 8000906:	18cb      	adds	r3, r1, r3
 8000908:	7812      	ldrb	r2, [r2, #0]
 800090a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 800090c:	6a3b      	ldr	r3, [r7, #32]
 800090e:	3301      	adds	r3, #1
 8000910:	623b      	str	r3, [r7, #32]
 8000912:	69ba      	ldr	r2, [r7, #24]
 8000914:	693b      	ldr	r3, [r7, #16]
 8000916:	18d3      	adds	r3, r2, r3
 8000918:	6a3a      	ldr	r2, [r7, #32]
 800091a:	429a      	cmp	r2, r3
 800091c:	d3ed      	bcc.n	80008fa <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 800091e:	69ba      	ldr	r2, [r7, #24]
 8000920:	693b      	ldr	r3, [r7, #16]
 8000922:	18d3      	adds	r3, r2, r3
 8000924:	3b01      	subs	r3, #1
 8000926:	683a      	ldr	r2, [r7, #0]
 8000928:	18d3      	adds	r3, r2, r3
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	3b01      	subs	r3, #1
 8000932:	683a      	ldr	r2, [r7, #0]
 8000934:	18d2      	adds	r2, r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	693b      	ldr	r3, [r7, #16]
 800093e:	18d3      	adds	r3, r2, r3
 8000940:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 8000942:	69bb      	ldr	r3, [r7, #24]
 8000944:	683a      	ldr	r2, [r7, #0]
 8000946:	18d2      	adds	r2, r2, r3
 8000948:	230c      	movs	r3, #12
 800094a:	18fb      	adds	r3, r7, r3
 800094c:	0011      	movs	r1, r2
 800094e:	0018      	movs	r0, r3
 8000950:	f001 f9d0 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000954:	69bb      	ldr	r3, [r7, #24]
 8000956:	3304      	adds	r3, #4
 8000958:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	e00b      	b.n	8000978 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 8000960:	683a      	ldr	r2, [r7, #0]
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	18d2      	adds	r2, r2, r3
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3b01      	subs	r3, #1
 800096a:	6839      	ldr	r1, [r7, #0]
 800096c:	18cb      	adds	r3, r1, r3
 800096e:	7812      	ldrb	r2, [r2, #0]
 8000970:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3301      	adds	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	69ba      	ldr	r2, [r7, #24]
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	18d3      	adds	r3, r2, r3
 800097e:	69fa      	ldr	r2, [r7, #28]
 8000980:	429a      	cmp	r2, r3
 8000982:	d3ed      	bcc.n	8000960 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000984:	69ba      	ldr	r2, [r7, #24]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	18d3      	adds	r3, r2, r3
 800098a:	3b01      	subs	r3, #1
 800098c:	683a      	ldr	r2, [r7, #0]
 800098e:	18d3      	adds	r3, r2, r3
 8000990:	2200      	movs	r2, #0
 8000992:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000994:	69bb      	ldr	r3, [r7, #24]
 8000996:	3b01      	subs	r3, #1
 8000998:	683a      	ldr	r2, [r7, #0]
 800099a:	18d2      	adds	r2, r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	18d3      	adds	r3, r2, r3
 80009a6:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 80009a8:	2300      	movs	r3, #0
 80009aa:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	69ba      	ldr	r2, [r7, #24]
 80009b0:	6839      	ldr	r1, [r7, #0]
 80009b2:	188a      	adds	r2, r1, r2
 80009b4:	7812      	ldrb	r2, [r2, #0]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80009ba:	68ba      	ldr	r2, [r7, #8]
 80009bc:	69bb      	ldr	r3, [r7, #24]
 80009be:	3301      	adds	r3, #1
 80009c0:	6839      	ldr	r1, [r7, #0]
 80009c2:	18cb      	adds	r3, r1, r3
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	021b      	lsls	r3, r3, #8
 80009c8:	4313      	orrs	r3, r2
 80009ca:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80009cc:	68ba      	ldr	r2, [r7, #8]
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	3302      	adds	r3, #2
 80009d2:	6839      	ldr	r1, [r7, #0]
 80009d4:	18cb      	adds	r3, r1, r3
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	041b      	lsls	r3, r3, #16
 80009da:	4313      	orrs	r3, r2
 80009dc:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	3303      	adds	r3, #3
 80009e4:	6839      	ldr	r1, [r7, #0]
 80009e6:	18cb      	adds	r3, r1, r3
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	061b      	lsls	r3, r3, #24
 80009ec:	4313      	orrs	r3, r2
 80009ee:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80009f6:	69bb      	ldr	r3, [r7, #24]
 80009f8:	3304      	adds	r3, #4
 80009fa:	61bb      	str	r3, [r7, #24]
     return offset;
 80009fc:	69bb      	ldr	r3, [r7, #24]
    }
 80009fe:	0018      	movs	r0, r3
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b00a      	add	sp, #40	; 0x28
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	4b02      	ldr	r3, [pc, #8]	; (8000a1c <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	b002      	add	sp, #8
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	46c0      	nop			; (mov r8, r8)
 8000a1c:	08005d28 	.word	0x08005d28

08000a20 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	4b02      	ldr	r3, [pc, #8]	; (8000a34 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	b002      	add	sp, #8
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	46c0      	nop			; (mov r8, r8)
 8000a34:	08005d44 	.word	0x08005d44

08000a38 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	0018      	movs	r0, r3
 8000a44:	f7ff fd3c 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 8000a48:	4a06      	ldr	r2, [pc, #24]	; (8000a64 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	601a      	str	r2, [r3, #0]
      level(0),
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	2200      	movs	r2, #0
 8000a52:	711a      	strb	r2, [r3, #4]
      msg("")
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 8000a58:	609a      	str	r2, [r3, #8]
    {
    }
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	b002      	add	sp, #8
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	08005f90 	.word	0x08005f90
 8000a68:	08005d24 	.word	0x08005d24

08000a6c <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	18d3      	adds	r3, r2, r3
 8000a80:	687a      	ldr	r2, [r7, #4]
 8000a82:	7912      	ldrb	r2, [r2, #4]
 8000a84:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	689b      	ldr	r3, [r3, #8]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f7ff fb37 	bl	8000104 <strlen>
 8000a96:	0003      	movs	r3, r0
 8000a98:	60bb      	str	r3, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	683a      	ldr	r2, [r7, #0]
 8000a9e:	18d3      	adds	r3, r2, r3
 8000aa0:	68ba      	ldr	r2, [r7, #8]
 8000aa2:	0011      	movs	r1, r2
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f001 f908 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	3304      	adds	r3, #4
 8000aae:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	683a      	ldr	r2, [r7, #0]
 8000ab4:	18d0      	adds	r0, r2, r3
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	68ba      	ldr	r2, [r7, #8]
 8000abc:	0019      	movs	r1, r3
 8000abe:	f004 ffe9 	bl	8005a94 <memcpy>
      offset += length_msg;
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	68bb      	ldr	r3, [r7, #8]
 8000ac6:	18d3      	adds	r3, r2, r3
 8000ac8:	60fb      	str	r3, [r7, #12]
      return offset;
 8000aca:	68fb      	ldr	r3, [r7, #12]
    }
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b004      	add	sp, #16
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b086      	sub	sp, #24
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	683a      	ldr	r2, [r7, #0]
 8000ae6:	18d3      	adds	r3, r2, r3
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	3301      	adds	r3, #1
 8000af2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	683a      	ldr	r2, [r7, #0]
 8000af8:	18d2      	adds	r2, r2, r3
 8000afa:	230c      	movs	r3, #12
 8000afc:	18fb      	adds	r3, r7, r3
 8000afe:	0011      	movs	r1, r2
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 f8f7 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000b06:	693b      	ldr	r3, [r7, #16]
 8000b08:	3304      	adds	r3, #4
 8000b0a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	e00b      	b.n	8000b2a <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	18d2      	adds	r2, r2, r3
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	3b01      	subs	r3, #1
 8000b1c:	6839      	ldr	r1, [r7, #0]
 8000b1e:	18cb      	adds	r3, r1, r3
 8000b20:	7812      	ldrb	r2, [r2, #0]
 8000b22:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	3301      	adds	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	18d3      	adds	r3, r2, r3
 8000b30:	697a      	ldr	r2, [r7, #20]
 8000b32:	429a      	cmp	r2, r3
 8000b34:	d3ed      	bcc.n	8000b12 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000b36:	693a      	ldr	r2, [r7, #16]
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	683a      	ldr	r2, [r7, #0]
 8000b40:	18d3      	adds	r3, r2, r3
 8000b42:	2200      	movs	r2, #0
 8000b44:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000b46:	693b      	ldr	r3, [r7, #16]
 8000b48:	3b01      	subs	r3, #1
 8000b4a:	683a      	ldr	r2, [r7, #0]
 8000b4c:	18d2      	adds	r2, r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000b52:	693a      	ldr	r2, [r7, #16]
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	18d3      	adds	r3, r2, r3
 8000b58:	613b      	str	r3, [r7, #16]
     return offset;
 8000b5a:	693b      	ldr	r3, [r7, #16]
    }
 8000b5c:	0018      	movs	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b006      	add	sp, #24
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	4b02      	ldr	r3, [pc, #8]	; (8000b78 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	46bd      	mov	sp, r7
 8000b72:	b002      	add	sp, #8
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	46c0      	nop			; (mov r8, r8)
 8000b78:	08005d68 	.word	0x08005d68

08000b7c <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	4b02      	ldr	r3, [pc, #8]	; (8000b90 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b002      	add	sp, #8
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	46c0      	nop			; (mov r8, r8)
 8000b90:	08005d7c 	.word	0x08005d7c

08000b94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f7ff fc8e 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 8000ba4:	4a11      	ldr	r2, [pc, #68]	; (8000bec <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	611a      	str	r2, [r3, #16]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	615a      	str	r2, [r3, #20]
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2200      	movs	r2, #0
 8000bcc:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	61da      	str	r2, [r3, #28]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	2200      	movs	r2, #0
 8000bde:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	0018      	movs	r0, r3
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b002      	add	sp, #8
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	08005f78 	.word	0x08005f78

08000bf0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6859      	ldr	r1, [r3, #4]
 8000c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c04:	683a      	ldr	r2, [r7, #0]
 8000c06:	18d3      	adds	r3, r2, r3
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	0a19      	lsrs	r1, r3, #8
 8000c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c14:	3301      	adds	r3, #1
 8000c16:	683a      	ldr	r2, [r7, #0]
 8000c18:	18d3      	adds	r3, r2, r3
 8000c1a:	b2ca      	uxtb	r2, r1
 8000c1c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	0c19      	lsrs	r1, r3, #16
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3302      	adds	r3, #2
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	18d3      	adds	r3, r2, r3
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	0e19      	lsrs	r1, r3, #24
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	3303      	adds	r3, #3
 8000c3a:	683a      	ldr	r2, [r7, #0]
 8000c3c:	18d3      	adds	r3, r2, r3
 8000c3e:	b2ca      	uxtb	r2, r1
 8000c40:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c44:	3304      	adds	r3, #4
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c48:	2300      	movs	r3, #0
 8000c4a:	623b      	str	r3, [r7, #32]
 8000c4c:	e02a      	b.n	8000ca4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	68da      	ldr	r2, [r3, #12]
 8000c52:	6a3b      	ldr	r3, [r7, #32]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	18d3      	adds	r3, r2, r3
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000c5c:	6939      	ldr	r1, [r7, #16]
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c60:	683a      	ldr	r2, [r7, #0]
 8000c62:	18d3      	adds	r3, r2, r3
 8000c64:	b2ca      	uxtb	r2, r1
 8000c66:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	0a19      	lsrs	r1, r3, #8
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	3301      	adds	r3, #1
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	18d3      	adds	r3, r2, r3
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	0c19      	lsrs	r1, r3, #16
 8000c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7e:	3302      	adds	r3, #2
 8000c80:	683a      	ldr	r2, [r7, #0]
 8000c82:	18d3      	adds	r3, r2, r3
 8000c84:	b2ca      	uxtb	r2, r1
 8000c86:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	0e19      	lsrs	r1, r3, #24
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	3303      	adds	r3, #3
 8000c90:	683a      	ldr	r2, [r7, #0]
 8000c92:	18d3      	adds	r3, r2, r3
 8000c94:	b2ca      	uxtb	r2, r1
 8000c96:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c9e:	6a3b      	ldr	r3, [r7, #32]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	623b      	str	r3, [r7, #32]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	685b      	ldr	r3, [r3, #4]
 8000ca8:	6a3a      	ldr	r2, [r7, #32]
 8000caa:	429a      	cmp	r2, r3
 8000cac:	d3cf      	bcc.n	8000c4e <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6919      	ldr	r1, [r3, #16]
 8000cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb4:	683a      	ldr	r2, [r7, #0]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	b2ca      	uxtb	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	691b      	ldr	r3, [r3, #16]
 8000cc0:	0a19      	lsrs	r1, r3, #8
 8000cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	683a      	ldr	r2, [r7, #0]
 8000cc8:	18d3      	adds	r3, r2, r3
 8000cca:	b2ca      	uxtb	r2, r1
 8000ccc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	0c19      	lsrs	r1, r3, #16
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3302      	adds	r3, #2
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	18d3      	adds	r3, r2, r3
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	691b      	ldr	r3, [r3, #16]
 8000ce4:	0e19      	lsrs	r1, r3, #24
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	3303      	adds	r3, #3
 8000cea:	683a      	ldr	r2, [r7, #0]
 8000cec:	18d3      	adds	r3, r2, r3
 8000cee:	b2ca      	uxtb	r2, r1
 8000cf0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	e02a      	b.n	8000d54 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	699a      	ldr	r2, [r3, #24]
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	009b      	lsls	r3, r3, #2
 8000d06:	18d3      	adds	r3, r2, r3
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000d0c:	68f9      	ldr	r1, [r7, #12]
 8000d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d10:	683a      	ldr	r2, [r7, #0]
 8000d12:	18d3      	adds	r3, r2, r3
 8000d14:	b2ca      	uxtb	r2, r1
 8000d16:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	0a19      	lsrs	r1, r3, #8
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	3301      	adds	r3, #1
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	18d3      	adds	r3, r2, r3
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	0c19      	lsrs	r1, r3, #16
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	3302      	adds	r3, #2
 8000d30:	683a      	ldr	r2, [r7, #0]
 8000d32:	18d3      	adds	r3, r2, r3
 8000d34:	b2ca      	uxtb	r2, r1
 8000d36:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	0e19      	lsrs	r1, r3, #24
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	3303      	adds	r3, #3
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	18d3      	adds	r3, r2, r3
 8000d44:	b2ca      	uxtb	r2, r1
 8000d46:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4a:	3304      	adds	r3, #4
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3301      	adds	r3, #1
 8000d52:	61fb      	str	r3, [r7, #28]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	691b      	ldr	r3, [r3, #16]
 8000d58:	69fa      	ldr	r2, [r7, #28]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3cf      	bcc.n	8000cfe <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	69d9      	ldr	r1, [r3, #28]
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	683a      	ldr	r2, [r7, #0]
 8000d66:	18d3      	adds	r3, r2, r3
 8000d68:	b2ca      	uxtb	r2, r1
 8000d6a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	0a19      	lsrs	r1, r3, #8
 8000d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d74:	3301      	adds	r3, #1
 8000d76:	683a      	ldr	r2, [r7, #0]
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	b2ca      	uxtb	r2, r1
 8000d7c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	0c19      	lsrs	r1, r3, #16
 8000d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d86:	3302      	adds	r3, #2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	18d3      	adds	r3, r2, r3
 8000d8c:	b2ca      	uxtb	r2, r1
 8000d8e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	69db      	ldr	r3, [r3, #28]
 8000d94:	0e19      	lsrs	r1, r3, #24
 8000d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d98:	3303      	adds	r3, #3
 8000d9a:	683a      	ldr	r2, [r7, #0]
 8000d9c:	18d3      	adds	r3, r2, r3
 8000d9e:	b2ca      	uxtb	r2, r1
 8000da0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da4:	3304      	adds	r3, #4
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	e029      	b.n	8000e02 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x212>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000db2:	69bb      	ldr	r3, [r7, #24]
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	18d3      	adds	r3, r2, r3
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	0018      	movs	r0, r3
 8000dbc:	f7ff f9a2 	bl	8000104 <strlen>
 8000dc0:	0003      	movs	r3, r0
 8000dc2:	617b      	str	r3, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	18d3      	adds	r3, r2, r3
 8000dca:	697a      	ldr	r2, [r7, #20]
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 ff73 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd6:	3304      	adds	r3, #4
 8000dd8:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	18d0      	adds	r0, r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	009b      	lsls	r3, r3, #2
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	697a      	ldr	r2, [r7, #20]
 8000dee:	0019      	movs	r1, r3
 8000df0:	f004 fe50 	bl	8005a94 <memcpy>
      offset += length_stringsi;
 8000df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	18d3      	adds	r3, r2, r3
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000dfc:	69bb      	ldr	r3, [r7, #24]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	61bb      	str	r3, [r7, #24]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	69db      	ldr	r3, [r3, #28]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	429a      	cmp	r2, r3
 8000e0a:	d3d0      	bcc.n	8000dae <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000e0e:	0018      	movs	r0, r3
 8000e10:	46bd      	mov	sp, r7
 8000e12:	b00a      	add	sp, #40	; 0x28
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b08e      	sub	sp, #56	; 0x38
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000e24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e26:	683a      	ldr	r2, [r7, #0]
 8000e28:	18d3      	adds	r3, r2, r3
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e30:	3301      	adds	r3, #1
 8000e32:	683a      	ldr	r2, [r7, #0]
 8000e34:	18d3      	adds	r3, r2, r3
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	021b      	lsls	r3, r3, #8
 8000e3a:	6a3a      	ldr	r2, [r7, #32]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e42:	3302      	adds	r3, #2
 8000e44:	683a      	ldr	r2, [r7, #0]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	041b      	lsls	r3, r3, #16
 8000e4c:	6a3a      	ldr	r2, [r7, #32]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e54:	3303      	adds	r3, #3
 8000e56:	683a      	ldr	r2, [r7, #0]
 8000e58:	18d3      	adds	r3, r2, r3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	061b      	lsls	r3, r3, #24
 8000e5e:	6a3a      	ldr	r2, [r7, #32]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	3304      	adds	r3, #4
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	6a3a      	ldr	r2, [r7, #32]
 8000e70:	429a      	cmp	r2, r3
 8000e72:	d90a      	bls.n	8000e8a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	68da      	ldr	r2, [r3, #12]
 8000e78:	6a3b      	ldr	r3, [r7, #32]
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	0019      	movs	r1, r3
 8000e7e:	0010      	movs	r0, r2
 8000e80:	f004 fd9a 	bl	80059b8 <realloc>
 8000e84:	0002      	movs	r2, r0
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6a3a      	ldr	r2, [r7, #32]
 8000e8e:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	; 0x30
 8000e94:	e037      	b.n	8000f06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf0>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e9e:	6839      	ldr	r1, [r7, #0]
 8000ea0:	188a      	adds	r2, r1, r2
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	3301      	adds	r3, #1
 8000eae:	6839      	ldr	r1, [r7, #0]
 8000eb0:	18cb      	adds	r3, r1, r3
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000eba:	697a      	ldr	r2, [r7, #20]
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	6839      	ldr	r1, [r7, #0]
 8000ec2:	18cb      	adds	r3, r1, r3
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	6839      	ldr	r1, [r7, #0]
 8000ed4:	18cb      	adds	r3, r1, r3
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	061b      	lsls	r3, r3, #24
 8000eda:	4313      	orrs	r3, r2
 8000edc:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000ede:	697a      	ldr	r2, [r7, #20]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68da      	ldr	r2, [r3, #12]
 8000eee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	18d0      	adds	r0, r2, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3308      	adds	r3, #8
 8000ef8:	2204      	movs	r2, #4
 8000efa:	0019      	movs	r1, r3
 8000efc:	f004 fdca 	bl	8005a94 <memcpy>
      for( uint32_t i = 0; i < ints_length; i++){
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	3301      	adds	r3, #1
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	d3c2      	bcc.n	8000e96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f12:	683a      	ldr	r2, [r7, #0]
 8000f14:	18d3      	adds	r3, r2, r3
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	18d3      	adds	r3, r2, r3
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2e:	3302      	adds	r3, #2
 8000f30:	683a      	ldr	r2, [r7, #0]
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	041b      	lsls	r3, r3, #16
 8000f38:	69fa      	ldr	r2, [r7, #28]
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f40:	3303      	adds	r3, #3
 8000f42:	683a      	ldr	r2, [r7, #0]
 8000f44:	18d3      	adds	r3, r2, r3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	061b      	lsls	r3, r3, #24
 8000f4a:	69fa      	ldr	r2, [r7, #28]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f52:	3304      	adds	r3, #4
 8000f54:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	69fa      	ldr	r2, [r7, #28]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d90a      	bls.n	8000f76 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x160>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	0019      	movs	r1, r3
 8000f6a:	0010      	movs	r0, r2
 8000f6c:	f004 fd24 	bl	80059b8 <realloc>
 8000f70:	0002      	movs	r2, r0
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	69fa      	ldr	r2, [r7, #28]
 8000f7a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f80:	e037      	b.n	8000ff2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1dc>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f8a:	6839      	ldr	r1, [r7, #0]
 8000f8c:	188a      	adds	r2, r1, r2
 8000f8e:	7812      	ldrb	r2, [r2, #0]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f98:	3301      	adds	r3, #1
 8000f9a:	6839      	ldr	r1, [r7, #0]
 8000f9c:	18cb      	adds	r3, r1, r3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000faa:	3302      	adds	r3, #2
 8000fac:	6839      	ldr	r1, [r7, #0]
 8000fae:	18cb      	adds	r3, r1, r3
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	041b      	lsls	r3, r3, #16
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbc:	3303      	adds	r3, #3
 8000fbe:	6839      	ldr	r1, [r7, #0]
 8000fc0:	18cb      	adds	r3, r1, r3
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	061b      	lsls	r3, r3, #24
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000fd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fd2:	3304      	adds	r3, #4
 8000fd4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699a      	ldr	r2, [r3, #24]
 8000fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	18d0      	adds	r0, r2, r3
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3314      	adds	r3, #20
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	0019      	movs	r1, r3
 8000fe8:	f004 fd54 	bl	8005a94 <memcpy>
      for( uint32_t i = 0; i < floats_length; i++){
 8000fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fee:	3301      	adds	r3, #1
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	691b      	ldr	r3, [r3, #16]
 8000ff6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d3c2      	bcc.n	8000f82 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x16c>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffe:	683a      	ldr	r2, [r7, #0]
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001008:	3301      	adds	r3, #1
 800100a:	683a      	ldr	r2, [r7, #0]
 800100c:	18d3      	adds	r3, r2, r3
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	021b      	lsls	r3, r3, #8
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4313      	orrs	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800101a:	3302      	adds	r3, #2
 800101c:	683a      	ldr	r2, [r7, #0]
 800101e:	18d3      	adds	r3, r2, r3
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	041b      	lsls	r3, r3, #16
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	4313      	orrs	r3, r2
 8001028:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 800102a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800102c:	3303      	adds	r3, #3
 800102e:	683a      	ldr	r2, [r7, #0]
 8001030:	18d3      	adds	r3, r2, r3
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	061b      	lsls	r3, r3, #24
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4313      	orrs	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 800103c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800103e:	3304      	adds	r3, #4
 8001040:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	69db      	ldr	r3, [r3, #28]
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	429a      	cmp	r2, r3
 800104a:	d90a      	bls.n	8001062 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24c>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	0019      	movs	r1, r3
 8001056:	0010      	movs	r0, r2
 8001058:	f004 fcae 	bl	80059b8 <realloc>
 800105c:	0002      	movs	r2, r0
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001068:	2300      	movs	r3, #0
 800106a:	62bb      	str	r3, [r7, #40]	; 0x28
 800106c:	e040      	b.n	80010f0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2da>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 800106e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001070:	683a      	ldr	r2, [r7, #0]
 8001072:	18d2      	adds	r2, r2, r3
 8001074:	230c      	movs	r3, #12
 8001076:	18fb      	adds	r3, r7, r3
 8001078:	0011      	movs	r1, r2
 800107a:	0018      	movs	r0, r3
 800107c:	f000 fe3a 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001082:	3304      	adds	r3, #4
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001086:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
 800108a:	e00b      	b.n	80010a4 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x28e>
          inbuffer[k-1]=inbuffer[k];
 800108c:	683a      	ldr	r2, [r7, #0]
 800108e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001090:	18d2      	adds	r2, r2, r3
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	3b01      	subs	r3, #1
 8001096:	6839      	ldr	r1, [r7, #0]
 8001098:	18cb      	adds	r3, r1, r3
 800109a:	7812      	ldrb	r2, [r2, #0]
 800109c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	3301      	adds	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
 80010a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	18d3      	adds	r3, r2, r3
 80010aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ac:	429a      	cmp	r2, r3
 80010ae:	d3ed      	bcc.n	800108c <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x276>
      }
      inbuffer[offset+length_st_strings-1]=0;
 80010b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	18d3      	adds	r3, r2, r3
 80010b6:	3b01      	subs	r3, #1
 80010b8:	683a      	ldr	r2, [r7, #0]
 80010ba:	18d3      	adds	r3, r2, r3
 80010bc:	2200      	movs	r2, #0
 80010be:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 80010c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c2:	3b01      	subs	r3, #1
 80010c4:	683a      	ldr	r2, [r7, #0]
 80010c6:	18d2      	adds	r2, r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 80010cc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	18d3      	adds	r3, r2, r3
 80010d2:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010da:	009b      	lsls	r3, r3, #2
 80010dc:	18d0      	adds	r0, r2, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	3320      	adds	r3, #32
 80010e2:	2204      	movs	r2, #4
 80010e4:	0019      	movs	r1, r3
 80010e6:	f004 fcd5 	bl	8005a94 <memcpy>
      for( uint32_t i = 0; i < strings_length; i++){
 80010ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010ec:	3301      	adds	r3, #1
 80010ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3b9      	bcc.n	800106e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x258>
      }
     return offset;
 80010fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b00e      	add	sp, #56	; 0x38
 8001102:	bd80      	pop	{r7, pc}

08001104 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	4b02      	ldr	r3, [pc, #8]	; (8001118 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 800110e:	0018      	movs	r0, r3
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
 8001116:	46c0      	nop			; (mov r8, r8)
 8001118:	08005eb4 	.word	0x08005eb4

0800111c <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	4b02      	ldr	r3, [pc, #8]	; (8001130 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 8001126:	0018      	movs	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	b002      	add	sp, #8
 800112c:	bd80      	pop	{r7, pc}
 800112e:	46c0      	nop			; (mov r8, r8)
 8001130:	08005da0 	.word	0x08005da0

08001134 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001134:	b580      	push	{r7, lr}
 8001136:	b084      	sub	sp, #16
 8001138:	af00      	add	r7, sp, #0
 800113a:	60f8      	str	r0, [r7, #12]
 800113c:	60b9      	str	r1, [r7, #8]
 800113e:	607a      	str	r2, [r7, #4]
 8001140:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	601a      	str	r2, [r3, #0]
    msg_(msg),
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	683a      	ldr	r2, [r7, #0]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	0018      	movs	r0, r3
 8001158:	46bd      	mov	sp, r7
 800115a:	b004      	add	sp, #16
 800115c:	bd80      	pop	{r7, pc}

0800115e <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b083      	sub	sp, #12
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	68d8      	ldr	r0, [r3, #12]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681c      	ldr	r4, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	0019      	movs	r1, r3
 800117c:	47a0      	blx	r4
 800117e:	0003      	movs	r3, r0
  };
 8001180:	0018      	movs	r0, r3
 8001182:	46bd      	mov	sp, r7
 8001184:	b003      	add	sp, #12
 8001186:	bd90      	pop	{r4, r7, pc}

08001188 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	691b      	ldr	r3, [r3, #16]
  }
 8001194:	0018      	movs	r0, r3
 8001196:	46bd      	mov	sp, r7
 8001198:	b002      	add	sp, #8
 800119a:	bd80      	pop	{r7, pc}

0800119c <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = R_BUFFER_SIZE;
    uint8_t rbuf[rbuflen];
    volatile uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	589b      	ldr	r3, [r3, r2]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	2280      	movs	r2, #128	; 0x80
 80011b2:	0092      	lsls	r2, r2, #2
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	05db      	lsls	r3, r3, #23
 80011b8:	0ddb      	lsrs	r3, r3, #23
 80011ba:	0018      	movs	r0, r3
 80011bc:	46bd      	mov	sp, r7
 80011be:	b002      	add	sp, #8
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <_ZN13STM32HardwareC1Ev>:

  public:
    volatile bool mutex = false;
    bool tx_transfare_complete = true;
    uint16_t tfind_to_be = 0;
    STM32Hardware():
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	4a11      	ldr	r2, [pc, #68]	; (8001214 <_ZN13STM32HardwareC1Ev+0x50>)
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	2381      	movs	r3, #129	; 0x81
 80011d6:	009b      	lsls	r3, r3, #2
 80011d8:	2100      	movs	r1, #0
 80011da:	50d1      	str	r1, [r2, r3]
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	2381      	movs	r3, #129	; 0x81
 80011e0:	00db      	lsls	r3, r3, #3
 80011e2:	2100      	movs	r1, #0
 80011e4:	50d1      	str	r1, [r2, r3]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <_ZN13STM32HardwareC1Ev+0x54>)
 80011ea:	2100      	movs	r1, #0
 80011ec:	5099      	str	r1, [r3, r2]
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	2382      	movs	r3, #130	; 0x82
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	2100      	movs	r1, #0
 80011f6:	54d1      	strb	r1, [r2, r3]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <_ZN13STM32HardwareC1Ev+0x58>)
 80011fc:	2101      	movs	r1, #1
 80011fe:	5499      	strb	r1, [r3, r2]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a07      	ldr	r2, [pc, #28]	; (8001220 <_ZN13STM32HardwareC1Ev+0x5c>)
 8001204:	2100      	movs	r1, #0
 8001206:	5299      	strh	r1, [r3, r2]
    }
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	0018      	movs	r0, r3
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	20000088 	.word	0x20000088
 8001218:	0000040c 	.word	0x0000040c
 800121c:	00000411 	.word	0x00000411
 8001220:	00000412 	.word	0x00000412

08001224 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	0018      	movs	r0, r3
 8001230:	f000 f804 	bl	800123c <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001234:	46c0      	nop			; (mov r8, r8)
 8001236:	46bd      	mov	sp, r7
 8001238:	b002      	add	sp, #8
 800123a:	bd80      	pop	{r7, pc}

0800123c <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3304      	adds	r3, #4
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	0092      	lsls	r2, r2, #2
 8001250:	0019      	movs	r1, r3
 8001252:	f003 f843 	bl	80042dc <HAL_UART_Receive_DMA>
    }
 8001256:	46c0      	nop			; (mov r8, r8)
 8001258:	46bd      	mov	sp, r7
 800125a:	b002      	add	sp, #8
 800125c:	bd80      	pop	{r7, pc}

0800125e <_ZN13STM32Hardware4readEv>:

    int read(){
 800125e:	b590      	push	{r4, r7, lr}
 8001260:	b085      	sub	sp, #20
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001266:	2301      	movs	r3, #1
 8001268:	425b      	negs	r3, r3
 800126a:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 800126c:	687a      	ldr	r2, [r7, #4]
 800126e:	2381      	movs	r3, #129	; 0x81
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	58d4      	ldr	r4, [r2, r3]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	0018      	movs	r0, r3
 8001278:	f7ff ff90 	bl	800119c <_ZN13STM32Hardware10getRdmaIndEv>
 800127c:	0003      	movs	r3, r0
 800127e:	1ae3      	subs	r3, r4, r3
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	4193      	sbcs	r3, r2
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d016      	beq.n	80012b8 <_ZN13STM32Hardware4readEv+0x5a>
        c = rbuf[rind++];
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	2381      	movs	r3, #129	; 0x81
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	58d3      	ldr	r3, [r2, r3]
 8001292:	1c58      	adds	r0, r3, #1
 8001294:	6879      	ldr	r1, [r7, #4]
 8001296:	2281      	movs	r2, #129	; 0x81
 8001298:	0092      	lsls	r2, r2, #2
 800129a:	5088      	str	r0, [r1, r2]
 800129c:	687a      	ldr	r2, [r7, #4]
 800129e:	18d3      	adds	r3, r2, r3
 80012a0:	791b      	ldrb	r3, [r3, #4]
 80012a2:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	2381      	movs	r3, #129	; 0x81
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	58d3      	ldr	r3, [r2, r3]
 80012ac:	05db      	lsls	r3, r3, #23
 80012ae:	0dd9      	lsrs	r1, r3, #23
 80012b0:	687a      	ldr	r2, [r7, #4]
 80012b2:	2381      	movs	r3, #129	; 0x81
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	50d1      	str	r1, [r2, r3]
      }
      return c;
 80012b8:	68fb      	ldr	r3, [r7, #12]
    }
 80012ba:	0018      	movs	r0, r3
 80012bc:	46bd      	mov	sp, r7
 80012be:	b005      	add	sp, #20
 80012c0:	bd90      	pop	{r4, r7, pc}
	...

080012c4 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 80012c4:	b590      	push	{r4, r7, lr}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if(huart->gState == HAL_UART_STATE_READY &&				// Uart ready
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	2288      	movs	r2, #136	; 0x88
 80012d2:	589b      	ldr	r3, [r3, r2]
    	 //(huart->gState != HAL_UART_STATE_READY	)			// if UART is ready to write (Shouldn't we check for DMA tho)
    	 tx_transfare_complete &&								// Flag set by this function and reset by interrupt, each time
 80012d4:	2b20      	cmp	r3, #32
 80012d6:	d10d      	bne.n	80012f4 <_ZN13STM32Hardware5flushEv+0x30>
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4a43      	ldr	r2, [pc, #268]	; (80013e8 <_ZN13STM32Hardware5flushEv+0x124>)
 80012dc:	5c9b      	ldrb	r3, [r3, r2]
      if(huart->gState == HAL_UART_STATE_READY &&				// Uart ready
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d008      	beq.n	80012f4 <_ZN13STM32Hardware5flushEv+0x30>
																// code is used different channel might be used so ISR flags
																// are a bit complicated to check plus not sure they are not
																// cleared right after interrupt.
    	 !mutex){
 80012e2:	4b42      	ldr	r3, [pc, #264]	; (80013ec <_ZN13STM32Hardware5flushEv+0x128>)
 80012e4:	781b      	ldrb	r3, [r3, #0]
 80012e6:	2201      	movs	r2, #1
 80012e8:	4053      	eors	r3, r2
 80012ea:	b2db      	uxtb	r3, r3
    	 tx_transfare_complete &&								// Flag set by this function and reset by interrupt, each time
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <_ZN13STM32Hardware5flushEv+0x30>
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <_ZN13STM32Hardware5flushEv+0x32>
 80012f4:	2300      	movs	r3, #0
      if(huart->gState == HAL_UART_STATE_READY &&				// Uart ready
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d072      	beq.n	80013e0 <_ZN13STM32Hardware5flushEv+0x11c>
    	tfind = tfind_to_be;									// previous write is finished so we can move tfind
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4a3c      	ldr	r2, [pc, #240]	; (80013f0 <_ZN13STM32Hardware5flushEv+0x12c>)
 80012fe:	5a9b      	ldrh	r3, [r3, r2]
 8001300:	0019      	movs	r1, r3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a3b      	ldr	r2, [pc, #236]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 8001306:	5099      	str	r1, [r3, r2]
        mutex = true;
 8001308:	4b38      	ldr	r3, [pc, #224]	; (80013ec <_ZN13STM32Hardware5flushEv+0x128>)
 800130a:	2201      	movs	r2, #1
 800130c:	701a      	strb	r2, [r3, #0]
        if(twind != tfind){
 800130e:	687a      	ldr	r2, [r7, #4]
 8001310:	2381      	movs	r3, #129	; 0x81
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	58d2      	ldr	r2, [r2, r3]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4936      	ldr	r1, [pc, #216]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 800131a:	585b      	ldr	r3, [r3, r1]
 800131c:	1ad3      	subs	r3, r2, r3
 800131e:	1e5a      	subs	r2, r3, #1
 8001320:	4193      	sbcs	r3, r2
 8001322:	b2db      	uxtb	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d058      	beq.n	80013da <_ZN13STM32Hardware5flushEv+0x116>
          uint16_t len = 0;
 8001328:	200e      	movs	r0, #14
 800132a:	183b      	adds	r3, r7, r0
 800132c:	2200      	movs	r2, #0
 800132e:	801a      	strh	r2, [r3, #0]
		  if(tfind < twind){			// if no overflow
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a30      	ldr	r2, [pc, #192]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 8001334:	589a      	ldr	r2, [r3, r2]
 8001336:	6879      	ldr	r1, [r7, #4]
 8001338:	2381      	movs	r3, #129	; 0x81
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	58cb      	ldr	r3, [r1, r3]
 800133e:	429a      	cmp	r2, r3
 8001340:	419b      	sbcs	r3, r3
 8001342:	425b      	negs	r3, r3
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d025      	beq.n	8001396 <_ZN13STM32Hardware5flushEv+0xd2>
			len = twind - tfind;
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	2381      	movs	r3, #129	; 0x81
 800134e:	00db      	lsls	r3, r3, #3
 8001350:	58d3      	ldr	r3, [r2, r3]
 8001352:	b299      	uxth	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a27      	ldr	r2, [pc, #156]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 8001358:	589b      	ldr	r3, [r3, r2]
 800135a:	b29a      	uxth	r2, r3
 800135c:	0004      	movs	r4, r0
 800135e:	183b      	adds	r3, r7, r0
 8001360:	1a8a      	subs	r2, r1, r2
 8001362:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len); 	//simple write
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6818      	ldr	r0, [r3, #0]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	4a22      	ldr	r2, [pc, #136]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 800136c:	589b      	ldr	r3, [r3, r2]
 800136e:	2282      	movs	r2, #130	; 0x82
 8001370:	0092      	lsls	r2, r2, #2
 8001372:	4694      	mov	ip, r2
 8001374:	4463      	add	r3, ip
 8001376:	687a      	ldr	r2, [r7, #4]
 8001378:	18d1      	adds	r1, r2, r3
 800137a:	193b      	adds	r3, r7, r4
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	001a      	movs	r2, r3
 8001380:	f002 ff1a 	bl	80041b8 <HAL_UART_Transmit_DMA>
			tfind_to_be = twind;								// tfind when DMA is finished
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	2381      	movs	r3, #129	; 0x81
 8001388:	00db      	lsls	r3, r3, #3
 800138a:	58d3      	ldr	r3, [r2, r3]
 800138c:	b299      	uxth	r1, r3
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <_ZN13STM32Hardware5flushEv+0x12c>)
 8001392:	5299      	strh	r1, [r3, r2]
 8001394:	e01d      	b.n	80013d2 <_ZN13STM32Hardware5flushEv+0x10e>
		  }else{
			len = tbuflen - tfind;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4a16      	ldr	r2, [pc, #88]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 800139a:	589b      	ldr	r3, [r3, r2]
 800139c:	b29a      	uxth	r2, r3
 800139e:	240e      	movs	r4, #14
 80013a0:	193b      	adds	r3, r7, r4
 80013a2:	2180      	movs	r1, #128	; 0x80
 80013a4:	0089      	lsls	r1, r1, #2
 80013a6:	1a8a      	subs	r2, r1, r2
 80013a8:	801a      	strh	r2, [r3, #0]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);	//simple write
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6818      	ldr	r0, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a10      	ldr	r2, [pc, #64]	; (80013f4 <_ZN13STM32Hardware5flushEv+0x130>)
 80013b2:	589b      	ldr	r3, [r3, r2]
 80013b4:	2282      	movs	r2, #130	; 0x82
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4694      	mov	ip, r2
 80013ba:	4463      	add	r3, ip
 80013bc:	687a      	ldr	r2, [r7, #4]
 80013be:	18d1      	adds	r1, r2, r3
 80013c0:	193b      	adds	r3, r7, r4
 80013c2:	881b      	ldrh	r3, [r3, #0]
 80013c4:	001a      	movs	r2, r3
 80013c6:	f002 fef7 	bl	80041b8 <HAL_UART_Transmit_DMA>
//			HAL_UART_Transmit_DMA(huart, &(tbuf[0]), twind);//this is weird
			tfind_to_be = 0;									// tfind when DMA is finished
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <_ZN13STM32Hardware5flushEv+0x12c>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	5299      	strh	r1, [r3, r2]
		  }
		  tx_transfare_complete = false;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4a04      	ldr	r2, [pc, #16]	; (80013e8 <_ZN13STM32Hardware5flushEv+0x124>)
 80013d6:	2100      	movs	r1, #0
 80013d8:	5499      	strb	r1, [r3, r2]
        }
        mutex = false;
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <_ZN13STM32Hardware5flushEv+0x128>)
 80013dc:	2200      	movs	r2, #0
 80013de:	701a      	strb	r2, [r3, #0]
      }
    }
 80013e0:	46c0      	nop			; (mov r8, r8)
 80013e2:	46bd      	mov	sp, r7
 80013e4:	b005      	add	sp, #20
 80013e6:	bd90      	pop	{r4, r7, pc}
 80013e8:	00000411 	.word	0x00000411
 80013ec:	20000084 	.word	0x20000084
 80013f0:	00000412 	.word	0x00000412
 80013f4:	0000040c 	.word	0x0000040c

080013f8 <_ZN13STM32Hardware5writeEPhj>:
         HAL_UART_Transmit_DMA(huart, tbuf, n);


       }*/

    void write(uint8_t* data, unsigned int length){
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
    	while (mutex) {
 8001404:	e000      	b.n	8001408 <_ZN13STM32Hardware5writeEPhj+0x10>
    		__NOP();
 8001406:	46c0      	nop			; (mov r8, r8)
    	while (mutex) {
 8001408:	68fa      	ldr	r2, [r7, #12]
 800140a:	2382      	movs	r3, #130	; 0x82
 800140c:	00db      	lsls	r3, r3, #3
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	b2db      	uxtb	r3, r3
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f7      	bne.n	8001406 <_ZN13STM32Hardware5writeEPhj+0xe>
    	}


    	if (length > tbuflen) return; // this will never fit, drop it
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	2380      	movs	r3, #128	; 0x80
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	429a      	cmp	r2, r3
 800141e:	d900      	bls.n	8001422 <_ZN13STM32Hardware5writeEPhj+0x2a>
 8001420:	e087      	b.n	8001532 <_ZN13STM32Hardware5writeEPhj+0x13a>
    	// check if there is place in a buffer else cycle
    	uint16_t free_space = 0;
 8001422:	231e      	movs	r3, #30
 8001424:	18fb      	adds	r3, r7, r3
 8001426:	2200      	movs	r2, #0
 8001428:	801a      	strh	r2, [r3, #0]
    	while(free_space < length){
 800142a:	e02d      	b.n	8001488 <_ZN13STM32Hardware5writeEPhj+0x90>
    		if (twind >= tfind) free_space = tbuflen - (twind-tfind)-1; // -1 for reasons
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	2381      	movs	r3, #129	; 0x81
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	58d1      	ldr	r1, [r2, r3]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4a41      	ldr	r2, [pc, #260]	; (800153c <_ZN13STM32Hardware5writeEPhj+0x144>)
 8001438:	589a      	ldr	r2, [r3, r2]
 800143a:	2300      	movs	r3, #0
 800143c:	4291      	cmp	r1, r2
 800143e:	415b      	adcs	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	2b00      	cmp	r3, #0
 8001444:	d011      	beq.n	800146a <_ZN13STM32Hardware5writeEPhj+0x72>
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4a3c      	ldr	r2, [pc, #240]	; (800153c <_ZN13STM32Hardware5writeEPhj+0x144>)
 800144a:	589b      	ldr	r3, [r3, r2]
 800144c:	b29a      	uxth	r2, r3
 800144e:	68f9      	ldr	r1, [r7, #12]
 8001450:	2381      	movs	r3, #129	; 0x81
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	58cb      	ldr	r3, [r1, r3]
 8001456:	b29b      	uxth	r3, r3
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	b29a      	uxth	r2, r3
 800145c:	231e      	movs	r3, #30
 800145e:	18fb      	adds	r3, r7, r3
 8001460:	4937      	ldr	r1, [pc, #220]	; (8001540 <_ZN13STM32Hardware5writeEPhj+0x148>)
 8001462:	468c      	mov	ip, r1
 8001464:	4462      	add	r2, ip
 8001466:	801a      	strh	r2, [r3, #0]
 8001468:	e00e      	b.n	8001488 <_ZN13STM32Hardware5writeEPhj+0x90>
    		else free_space = (tfind-twind)-1;							// -1 for reasons
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4a33      	ldr	r2, [pc, #204]	; (800153c <_ZN13STM32Hardware5writeEPhj+0x144>)
 800146e:	589b      	ldr	r3, [r3, r2]
 8001470:	b29a      	uxth	r2, r3
 8001472:	68f9      	ldr	r1, [r7, #12]
 8001474:	2381      	movs	r3, #129	; 0x81
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	58cb      	ldr	r3, [r1, r3]
 800147a:	b29b      	uxth	r3, r3
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29a      	uxth	r2, r3
 8001480:	231e      	movs	r3, #30
 8001482:	18fb      	adds	r3, r7, r3
 8001484:	3a01      	subs	r2, #1
 8001486:	801a      	strh	r2, [r3, #0]
    	while(free_space < length){
 8001488:	231e      	movs	r3, #30
 800148a:	18fb      	adds	r3, r7, r3
 800148c:	881b      	ldrh	r3, [r3, #0]
 800148e:	687a      	ldr	r2, [r7, #4]
 8001490:	429a      	cmp	r2, r3
 8001492:	d8cb      	bhi.n	800142c <_ZN13STM32Hardware5writeEPhj+0x34>
    	}
    	uint32_t n = length;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	61bb      	str	r3, [r7, #24]
    	n = (n <= tbuflen) ? n : tbuflen;  //clamp lenght
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2280      	movs	r2, #128	; 0x80
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <_ZN13STM32Hardware5writeEPhj+0xae>
 80014a2:	2380      	movs	r3, #128	; 0x80
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	61bb      	str	r3, [r7, #24]

    	uint32_t n_tail = (n <= (tbuflen - twind)) ? n : (tbuflen - twind);
 80014a8:	68fa      	ldr	r2, [r7, #12]
 80014aa:	2381      	movs	r3, #129	; 0x81
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	58d3      	ldr	r3, [r2, r3]
 80014b0:	2280      	movs	r2, #128	; 0x80
 80014b2:	0092      	lsls	r2, r2, #2
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d907      	bls.n	80014cc <_ZN13STM32Hardware5writeEPhj+0xd4>
 80014bc:	68fa      	ldr	r2, [r7, #12]
 80014be:	2381      	movs	r3, #129	; 0x81
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	58d3      	ldr	r3, [r2, r3]
 80014c4:	2280      	movs	r2, #128	; 0x80
 80014c6:	0092      	lsls	r2, r2, #2
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	e000      	b.n	80014ce <_ZN13STM32Hardware5writeEPhj+0xd6>
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	617b      	str	r3, [r7, #20]
    	memcpy(&(tbuf[twind]), data, n_tail);
 80014d0:	68fa      	ldr	r2, [r7, #12]
 80014d2:	2381      	movs	r3, #129	; 0x81
 80014d4:	00db      	lsls	r3, r3, #3
 80014d6:	58d3      	ldr	r3, [r2, r3]
 80014d8:	2282      	movs	r2, #130	; 0x82
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4694      	mov	ip, r2
 80014de:	4463      	add	r3, ip
 80014e0:	68fa      	ldr	r2, [r7, #12]
 80014e2:	18d3      	adds	r3, r2, r3
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	68b9      	ldr	r1, [r7, #8]
 80014e8:	0018      	movs	r0, r3
 80014ea:	f004 fad3 	bl	8005a94 <memcpy>
    	twind = (twind + n) & (tbuflen - 1);
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	2381      	movs	r3, #129	; 0x81
 80014f2:	00db      	lsls	r3, r3, #3
 80014f4:	58d2      	ldr	r2, [r2, r3]
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	18d3      	adds	r3, r2, r3
 80014fa:	05db      	lsls	r3, r3, #23
 80014fc:	0dd9      	lsrs	r1, r3, #23
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	2381      	movs	r3, #129	; 0x81
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	50d1      	str	r1, [r2, r3]

    	if(n != n_tail){
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	429a      	cmp	r2, r3
 800150c:	d00c      	beq.n	8001528 <_ZN13STM32Hardware5writeEPhj+0x130>
    		memcpy(tbuf, &(data[n_tail]), n - n_tail);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2282      	movs	r2, #130	; 0x82
 8001512:	0092      	lsls	r2, r2, #2
 8001514:	1898      	adds	r0, r3, r2
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	18d1      	adds	r1, r2, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	001a      	movs	r2, r3
 8001524:	f004 fab6 	bl	8005a94 <memcpy>
    	}

    	flush();
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	0018      	movs	r0, r3
 800152c:	f7ff feca 	bl	80012c4 <_ZN13STM32Hardware5flushEv>
 8001530:	e000      	b.n	8001534 <_ZN13STM32Hardware5writeEPhj+0x13c>
    	if (length > tbuflen) return; // this will never fit, drop it
 8001532:	46c0      	nop			; (mov r8, r8)
    }
 8001534:	46bd      	mov	sp, r7
 8001536:	b008      	add	sp, #32
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	0000040c 	.word	0x0000040c
 8001540:	000001ff 	.word	0x000001ff

08001544 <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	f001 fc22 	bl	8002d94 <HAL_GetTick>
 8001550:	0003      	movs	r3, r0
 8001552:	0018      	movs	r0, r3
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
      data("")
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	0018      	movs	r0, r3
 8001568:	f7fe ffaa 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <_ZN8std_msgs6StringC1Ev+0x28>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a04      	ldr	r2, [pc, #16]	; (8001588 <_ZN8std_msgs6StringC1Ev+0x2c>)
 8001576:	605a      	str	r2, [r3, #4]
    {
    }
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	b002      	add	sp, #8
 8001580:	bd80      	pop	{r7, pc}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	08005f34 	.word	0x08005f34
 8001588:	08005d24 	.word	0x08005d24

0800158c <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800158c:	b580      	push	{r7, lr}
 800158e:	b084      	sub	sp, #16
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
 8001594:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	0018      	movs	r0, r3
 80015a0:	f7fe fdb0 	bl	8000104 <strlen>
 80015a4:	0003      	movs	r3, r0
 80015a6:	60bb      	str	r3, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	18d3      	adds	r3, r2, r3
 80015ae:	68ba      	ldr	r2, [r7, #8]
 80015b0:	0011      	movs	r1, r2
 80015b2:	0018      	movs	r0, r3
 80015b4:	f000 fb81 	bl	8001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	3304      	adds	r3, #4
 80015bc:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	18d0      	adds	r0, r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	0019      	movs	r1, r3
 80015cc:	f004 fa62 	bl	8005a94 <memcpy>
      offset += length_data;
 80015d0:	68fa      	ldr	r2, [r7, #12]
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	18d3      	adds	r3, r2, r3
 80015d6:	60fb      	str	r3, [r7, #12]
      return offset;
 80015d8:	68fb      	ldr	r3, [r7, #12]
    }
 80015da:	0018      	movs	r0, r3
 80015dc:	46bd      	mov	sp, r7
 80015de:	b004      	add	sp, #16
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 80015f0:	693b      	ldr	r3, [r7, #16]
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	18d2      	adds	r2, r2, r3
 80015f6:	230c      	movs	r3, #12
 80015f8:	18fb      	adds	r3, r7, r3
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f000 fb79 	bl	8001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	3304      	adds	r3, #4
 8001606:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e00b      	b.n	8001626 <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 800160e:	683a      	ldr	r2, [r7, #0]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	18d2      	adds	r2, r2, r3
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3b01      	subs	r3, #1
 8001618:	6839      	ldr	r1, [r7, #0]
 800161a:	18cb      	adds	r3, r1, r3
 800161c:	7812      	ldrb	r2, [r2, #0]
 800161e:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	18d3      	adds	r3, r2, r3
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	429a      	cmp	r2, r3
 8001630:	d3ed      	bcc.n	800160e <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	18d3      	adds	r3, r2, r3
 8001638:	3b01      	subs	r3, #1
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	18d3      	adds	r3, r2, r3
 800163e:	2200      	movs	r2, #0
 8001640:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	3b01      	subs	r3, #1
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	18d2      	adds	r2, r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	605a      	str	r2, [r3, #4]
      offset += length_data;
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	18d3      	adds	r3, r2, r3
 8001654:	613b      	str	r3, [r7, #16]
     return offset;
 8001656:	693b      	ldr	r3, [r7, #16]
    }
 8001658:	0018      	movs	r0, r3
 800165a:	46bd      	mov	sp, r7
 800165c:	b006      	add	sp, #24
 800165e:	bd80      	pop	{r7, pc}

08001660 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	4b02      	ldr	r3, [pc, #8]	; (8001674 <_ZN8std_msgs6String7getTypeEv+0x14>)
 800166a:	0018      	movs	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	08005dc4 	.word	0x08005dc4

08001678 <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	4b02      	ldr	r3, [pc, #8]	; (800168c <_ZN8std_msgs6String6getMD5Ev+0x14>)
 8001682:	0018      	movs	r0, r3
 8001684:	46bd      	mov	sp, r7
 8001686:	b002      	add	sp, #8
 8001688:	bd80      	pop	{r7, pc}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	08005dd4 	.word	0x08005dd4

08001690 <_ZN8std_msgs5UInt8C1Ev>:
  {
    public:
      typedef uint8_t _data_type;
      _data_type data;

    UInt8():
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
      data(0)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	0018      	movs	r0, r3
 800169c:	f7fe ff10 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 80016a0:	4a05      	ldr	r2, [pc, #20]	; (80016b8 <_ZN8std_msgs5UInt8C1Ev+0x28>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	711a      	strb	r2, [r3, #4]
    {
    }
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	0018      	movs	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	b002      	add	sp, #8
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	46c0      	nop			; (mov r8, r8)
 80016b8:	08005f1c 	.word	0x08005f1c

080016bc <_ZNK8std_msgs5UInt89serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	18d3      	adds	r3, r2, r3
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	7912      	ldrb	r2, [r2, #4]
 80016d4:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	3301      	adds	r3, #1
 80016da:	60fb      	str	r3, [r7, #12]
      return offset;
 80016dc:	68fb      	ldr	r3, [r7, #12]
    }
 80016de:	0018      	movs	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	b004      	add	sp, #16
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <_ZN8std_msgs5UInt811deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b084      	sub	sp, #16
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint8_t) (*(inbuffer + offset)));
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	18d3      	adds	r3, r2, r3
 80016fa:	781a      	ldrb	r2, [r3, #0]
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->data);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3301      	adds	r3, #1
 8001704:	60fb      	str	r3, [r7, #12]
     return offset;
 8001706:	68fb      	ldr	r3, [r7, #12]
    }
 8001708:	0018      	movs	r0, r3
 800170a:	46bd      	mov	sp, r7
 800170c:	b004      	add	sp, #16
 800170e:	bd80      	pop	{r7, pc}

08001710 <_ZN8std_msgs5UInt87getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt8"; };
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <_ZN8std_msgs5UInt87getTypeEv+0x14>)
 800171a:	0018      	movs	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	b002      	add	sp, #8
 8001720:	bd80      	pop	{r7, pc}
 8001722:	46c0      	nop			; (mov r8, r8)
 8001724:	08005df8 	.word	0x08005df8

08001728 <_ZN8std_msgs5UInt86getMD5Ev>:
    virtual const char * getMD5() override { return "7c8164229e7d2c17eb95e9231617fdee"; };
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	4b02      	ldr	r3, [pc, #8]	; (800173c <_ZN8std_msgs5UInt86getMD5Ev+0x14>)
 8001732:	0018      	movs	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	b002      	add	sp, #8
 8001738:	bd80      	pop	{r7, pc}
 800173a:	46c0      	nop			; (mov r8, r8)
 800173c:	08005e08 	.word	0x08005e08

08001740 <_ZN8std_msgs6UInt32C1Ev>:
  {
    public:
      typedef uint32_t _data_type;
      _data_type data;

    UInt32():
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
      data(0)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	0018      	movs	r0, r3
 800174c:	f7fe feb8 	bl	80004c0 <_ZN3ros3MsgC1Ev>
 8001750:	4a05      	ldr	r2, [pc, #20]	; (8001768 <_ZN8std_msgs6UInt32C1Ev+0x28>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	605a      	str	r2, [r3, #4]
    {
    }
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	0018      	movs	r0, r3
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	08005f04 	.word	0x08005f04

0800176c <_ZNK8std_msgs6UInt329serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data >> (8 * 0)) & 0xFF;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6859      	ldr	r1, [r3, #4]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	18d3      	adds	r3, r2, r3
 8001784:	b2ca      	uxtb	r2, r1
 8001786:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data >> (8 * 1)) & 0xFF;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	0a19      	lsrs	r1, r3, #8
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	3301      	adds	r3, #1
 8001792:	683a      	ldr	r2, [r7, #0]
 8001794:	18d3      	adds	r3, r2, r3
 8001796:	b2ca      	uxtb	r2, r1
 8001798:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data >> (8 * 2)) & 0xFF;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	0c19      	lsrs	r1, r3, #16
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	3302      	adds	r3, #2
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	18d3      	adds	r3, r2, r3
 80017a8:	b2ca      	uxtb	r2, r1
 80017aa:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data >> (8 * 3)) & 0xFF;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	0e19      	lsrs	r1, r3, #24
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	3303      	adds	r3, #3
 80017b6:	683a      	ldr	r2, [r7, #0]
 80017b8:	18d3      	adds	r3, r2, r3
 80017ba:	b2ca      	uxtb	r2, r1
 80017bc:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	3304      	adds	r3, #4
 80017c2:	60fb      	str	r3, [r7, #12]
      return offset;
 80017c4:	68fb      	ldr	r3, [r7, #12]
    }
 80017c6:	0018      	movs	r0, r3
 80017c8:	46bd      	mov	sp, r7
 80017ca:	b004      	add	sp, #16
 80017cc:	bd80      	pop	{r7, pc}

080017ce <_ZN8std_msgs6UInt3211deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	60fb      	str	r3, [r7, #12]
      this->data =  ((uint32_t) (*(inbuffer + offset)));
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	18d3      	adds	r3, r2, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	001a      	movs	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685a      	ldr	r2, [r3, #4]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	3301      	adds	r3, #1
 80017f2:	6839      	ldr	r1, [r7, #0]
 80017f4:	18cb      	adds	r3, r1, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	021b      	lsls	r3, r3, #8
 80017fa:	431a      	orrs	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	685a      	ldr	r2, [r3, #4]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	3302      	adds	r3, #2
 8001808:	6839      	ldr	r1, [r7, #0]
 800180a:	18cb      	adds	r3, r1, r3
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	431a      	orrs	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	605a      	str	r2, [r3, #4]
      this->data |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	3303      	adds	r3, #3
 800181e:	6839      	ldr	r1, [r7, #0]
 8001820:	18cb      	adds	r3, r1, r3
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	431a      	orrs	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3304      	adds	r3, #4
 8001830:	60fb      	str	r3, [r7, #12]
     return offset;
 8001832:	68fb      	ldr	r3, [r7, #12]
    }
 8001834:	0018      	movs	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	b004      	add	sp, #16
 800183a:	bd80      	pop	{r7, pc}

0800183c <_ZN8std_msgs6UInt327getTypeEv>:

    virtual const char * getType() override { return "std_msgs/UInt32"; };
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
 8001844:	4b02      	ldr	r3, [pc, #8]	; (8001850 <_ZN8std_msgs6UInt327getTypeEv+0x14>)
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	b002      	add	sp, #8
 800184c:	bd80      	pop	{r7, pc}
 800184e:	46c0      	nop			; (mov r8, r8)
 8001850:	08005e2c 	.word	0x08005e2c

08001854 <_ZN8std_msgs6UInt326getMD5Ev>:
    virtual const char * getMD5() override { return "304a39449588c7f8ce2df6e8001c5fce"; };
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	4b02      	ldr	r3, [pc, #8]	; (8001868 <_ZN8std_msgs6UInt326getMD5Ev+0x14>)
 800185e:	0018      	movs	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	b002      	add	sp, #8
 8001864:	bd80      	pop	{r7, pc}
 8001866:	46c0      	nop			; (mov r8, r8)
 8001868:	08005e3c 	.word	0x08005e3c

0800186c <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	4a03      	ldr	r2, [pc, #12]	; (8001884 <_ZN3ros15NodeHandleBase_C1Ev+0x18>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	0018      	movs	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	b002      	add	sp, #8
 8001882:	bd80      	pop	{r7, pc}
 8001884:	08005f64 	.word	0x08005f64

08001888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	0018      	movs	r0, r3
 8001894:	f7ff ffea 	bl	800186c <_ZN3ros15NodeHandleBase_C1Ev>
 8001898:	4a3a      	ldr	r2, [pc, #232]	; (8001984 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xfc>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	0018      	movs	r0, r3
 80018a4:	f7ff fc8e 	bl	80011c4 <_ZN13STM32HardwareC1Ev>
 80018a8:	687a      	ldr	r2, [r7, #4]
 80018aa:	2383      	movs	r3, #131	; 0x83
 80018ac:	00db      	lsls	r3, r3, #3
 80018ae:	2100      	movs	r1, #0
 80018b0:	50d1      	str	r1, [r2, r3]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a34      	ldr	r2, [pc, #208]	; (8001988 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x100>)
 80018b6:	2100      	movs	r1, #0
 80018b8:	5099      	str	r1, [r3, r2]
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	2384      	movs	r3, #132	; 0x84
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	2100      	movs	r1, #0
 80018c2:	50d1      	str	r1, [r2, r3]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	4a31      	ldr	r2, [pc, #196]	; (800198c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x104>)
 80018c8:	2100      	movs	r1, #0
 80018ca:	5099      	str	r1, [r3, r2]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	2385      	movs	r3, #133	; 0x85
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	18d3      	adds	r3, r2, r3
 80018d4:	2280      	movs	r2, #128	; 0x80
 80018d6:	0092      	lsls	r2, r2, #2
 80018d8:	2100      	movs	r1, #0
 80018da:	0018      	movs	r0, r3
 80018dc:	f004 f8a5 	bl	8005a2a <memset>
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	23c5      	movs	r3, #197	; 0xc5
 80018e4:	00db      	lsls	r3, r3, #3
 80018e6:	18d3      	adds	r3, r2, r3
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	2100      	movs	r1, #0
 80018ee:	0018      	movs	r0, r3
 80018f0:	f004 f89b 	bl	8005a2a <memset>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a26      	ldr	r2, [pc, #152]	; (8001990 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x108>)
 80018f8:	189b      	adds	r3, r3, r2
 80018fa:	2264      	movs	r2, #100	; 0x64
 80018fc:	2100      	movs	r1, #0
 80018fe:	0018      	movs	r0, r3
 8001900:	f004 f893 	bl	8005a2a <memset>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a23      	ldr	r2, [pc, #140]	; (8001994 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x10c>)
 8001908:	189b      	adds	r3, r3, r2
 800190a:	2264      	movs	r2, #100	; 0x64
 800190c:	2100      	movs	r1, #0
 800190e:	0018      	movs	r0, r3
 8001910:	f004 f88b 	bl	8005a2a <memset>
 8001914:	687a      	ldr	r2, [r7, #4]
 8001916:	238f      	movs	r3, #143	; 0x8f
 8001918:	011b      	lsls	r3, r3, #4
 800191a:	2100      	movs	r1, #0
 800191c:	50d1      	str	r1, [r2, r3]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a1d      	ldr	r2, [pc, #116]	; (8001998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x110>)
 8001922:	2100      	movs	r1, #0
 8001924:	5099      	str	r1, [r3, r2]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x114>)
 800192a:	2100      	movs	r1, #0
 800192c:	5099      	str	r1, [r3, r2]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a1b      	ldr	r2, [pc, #108]	; (80019a0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x118>)
 8001932:	2100      	movs	r1, #0
 8001934:	5099      	str	r1, [r3, r2]
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	2390      	movs	r3, #144	; 0x90
 800193a:	011b      	lsls	r3, r3, #4
 800193c:	2100      	movs	r1, #0
 800193e:	50d1      	str	r1, [r2, r3]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a18      	ldr	r2, [pc, #96]	; (80019a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x11c>)
 8001944:	2100      	movs	r1, #0
 8001946:	5499      	strb	r1, [r3, r2]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	4a17      	ldr	r2, [pc, #92]	; (80019a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x120>)
 800194c:	2100      	movs	r1, #0
 800194e:	5099      	str	r1, [r3, r2]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x124>)
 8001954:	2100      	movs	r1, #0
 8001956:	5099      	str	r1, [r3, r2]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	2391      	movs	r3, #145	; 0x91
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	2100      	movs	r1, #0
 8001960:	50d1      	str	r1, [r2, r3]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x128>)
 8001966:	2100      	movs	r1, #0
 8001968:	5499      	strb	r1, [r3, r2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0x12c>)
 800196e:	4694      	mov	ip, r2
 8001970:	4463      	add	r3, ip
 8001972:	0018      	movs	r0, r3
 8001974:	f7ff f90e 	bl	8000b94 <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	46bd      	mov	sp, r7
 800197e:	b002      	add	sp, #8
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	08005ef0 	.word	0x08005ef0
 8001988:	0000041c 	.word	0x0000041c
 800198c:	00000424 	.word	0x00000424
 8001990:	00000828 	.word	0x00000828
 8001994:	0000088c 	.word	0x0000088c
 8001998:	000008f4 	.word	0x000008f4
 800199c:	000008f8 	.word	0x000008f8
 80019a0:	000008fc 	.word	0x000008fc
 80019a4:	00000904 	.word	0x00000904
 80019a8:	00000908 	.word	0x00000908
 80019ac:	0000090c 	.word	0x0000090c
 80019b0:	00000914 	.word	0x00000914
 80019b4:	00000918 	.word	0x00000918

080019b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019be:	f001 f96d 	bl	8002c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c2:	f000 f851 	bl	8001a68 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c6:	f000 f8fb 	bl	8001bc0 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80019ca:	f000 f8d3 	bl	8001b74 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80019ce:	f000 f899 	bl	8001b04 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  nh.initNode();
 80019d2:	4b1e      	ldr	r3, [pc, #120]	; (8001a4c <main+0x94>)
 80019d4:	0018      	movs	r0, r3
 80019d6:	f000 f9e3 	bl	8001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 80019da:	4a1d      	ldr	r2, [pc, #116]	; (8001a50 <main+0x98>)
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <main+0x94>)
 80019de:	0011      	movs	r1, r2
 80019e0:	0018      	movs	r0, r3
 80019e2:	f000 fa01 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(chatter2);
 80019e6:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <main+0x9c>)
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <main+0x94>)
 80019ea:	0011      	movs	r1, r2
 80019ec:	0018      	movs	r0, r3
 80019ee:	f000 f9fb 	bl	8001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.subscribe(led_sub);
 80019f2:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <main+0xa0>)
 80019f4:	4b15      	ldr	r3, [pc, #84]	; (8001a4c <main+0x94>)
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f000 fa25 	bl	8001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t cycleTook;
  uint32_t toWait = 1;
 80019fe:	2301      	movs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
  uint32_t start_time;
  uint32_t toWait_inst = 900;
 8001a02:	23e1      	movs	r3, #225	; 0xe1
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	60bb      	str	r3, [r7, #8]
  while (1)
  {
	  start_time = HAL_GetTick();
 8001a08:	f001 f9c4 	bl	8002d94 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	607b      	str	r3, [r7, #4]
	  str_msg.data = hello;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <main+0xa4>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	; (8001a60 <main+0xa8>)
 8001a14:	605a      	str	r2, [r3, #4]
	  uint32_msg.data = start_time;
 8001a16:	4b13      	ldr	r3, [pc, #76]	; (8001a64 <main+0xac>)
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	605a      	str	r2, [r3, #4]
//      chatter.publish(&str_msg);
      chatter2.publish(&uint32_msg);
 8001a1c:	4a11      	ldr	r2, [pc, #68]	; (8001a64 <main+0xac>)
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <main+0x9c>)
 8001a20:	0011      	movs	r1, r2
 8001a22:	0018      	movs	r0, r3
 8001a24:	f7ff fb9b 	bl	800115e <_ZN3ros9Publisher7publishEPKNS_3MsgE>
      nh.spinOnce();
 8001a28:	4b08      	ldr	r3, [pc, #32]	; (8001a4c <main+0x94>)
 8001a2a:	0018      	movs	r0, r3
 8001a2c:	f000 fa3e 	bl	8001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001a30:	23a0      	movs	r3, #160	; 0xa0
 8001a32:	05db      	lsls	r3, r3, #23
 8001a34:	2101      	movs	r1, #1
 8001a36:	0018      	movs	r0, r3
 8001a38:	f001 ff33 	bl	80038a2 <HAL_GPIO_TogglePin>
      cycleTook = HAL_GetTick()-start_time;
 8001a3c:	f001 f9aa 	bl	8002d94 <HAL_GetTick>
 8001a40:	0002      	movs	r2, r0
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	603b      	str	r3, [r7, #0]
	  start_time = HAL_GetTick();
 8001a48:	e7de      	b.n	8001a08 <main+0x50>
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	2000020c 	.word	0x2000020c
 8001a50:	20000b5c 	.word	0x20000b5c
 8001a54:	20000b70 	.word	0x20000b70
 8001a58:	20000b84 	.word	0x20000b84
 8001a5c:	20000b4c 	.word	0x20000b4c
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000b54 	.word	0x20000b54

08001a68 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a68:	b590      	push	{r4, r7, lr}
 8001a6a:	b093      	sub	sp, #76	; 0x4c
 8001a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6e:	2410      	movs	r4, #16
 8001a70:	193b      	adds	r3, r7, r4
 8001a72:	0018      	movs	r0, r3
 8001a74:	2338      	movs	r3, #56	; 0x38
 8001a76:	001a      	movs	r2, r3
 8001a78:	2100      	movs	r1, #0
 8001a7a:	f003 ffd6 	bl	8005a2a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a7e:	003b      	movs	r3, r7
 8001a80:	0018      	movs	r0, r3
 8001a82:	2310      	movs	r3, #16
 8001a84:	001a      	movs	r2, r3
 8001a86:	2100      	movs	r1, #0
 8001a88:	f003 ffcf 	bl	8005a2a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	009b      	lsls	r3, r3, #2
 8001a90:	0018      	movs	r0, r3
 8001a92:	f001 ff21 	bl	80038d8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a96:	193b      	adds	r3, r7, r4
 8001a98:	2202      	movs	r2, #2
 8001a9a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a9c:	193b      	adds	r3, r7, r4
 8001a9e:	2280      	movs	r2, #128	; 0x80
 8001aa0:	0052      	lsls	r2, r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001aa4:	0021      	movs	r1, r4
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2240      	movs	r2, #64	; 0x40
 8001ab0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ab2:	187b      	adds	r3, r7, r1
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ab8:	187b      	adds	r3, r7, r1
 8001aba:	2202      	movs	r2, #2
 8001abc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001abe:	187b      	adds	r3, r7, r1
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001ac4:	187b      	adds	r3, r7, r1
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aca:	187b      	adds	r3, r7, r1
 8001acc:	2280      	movs	r2, #128	; 0x80
 8001ace:	0292      	lsls	r2, r2, #10
 8001ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	2280      	movs	r2, #128	; 0x80
 8001ad6:	0492      	lsls	r2, r2, #18
 8001ad8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ada:	187b      	adds	r3, r7, r1
 8001adc:	2280      	movs	r2, #128	; 0x80
 8001ade:	0592      	lsls	r2, r2, #22
 8001ae0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	187b      	adds	r3, r7, r1
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 ff43 	bl	8003970 <HAL_RCC_OscConfig>
 8001aea:	0003      	movs	r3, r0
 8001aec:	1e5a      	subs	r2, r3, #1
 8001aee:	4193      	sbcs	r3, r2
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <_Z18SystemClock_Configv+0x92>
  {
    Error_Handler();
 8001af6:	f000 f8db 	bl	8001cb0 <Error_Handler>
  }
}
 8001afa:	46c0      	nop			; (mov r8, r8)
 8001afc:	46bd      	mov	sp, r7
 8001afe:	b013      	add	sp, #76	; 0x4c
 8001b00:	bd90      	pop	{r4, r7, pc}
	...

08001b04 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b08:	4b18      	ldr	r3, [pc, #96]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b0a:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <_ZL19MX_USART2_UART_Initv+0x6c>)
 8001b0c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 460800;
 8001b0e:	4b17      	ldr	r3, [pc, #92]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b10:	22e1      	movs	r2, #225	; 0xe1
 8001b12:	02d2      	lsls	r2, r2, #11
 8001b14:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b28:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b2e:	4b0f      	ldr	r3, [pc, #60]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_8;
 8001b34:	4b0d      	ldr	r3, [pc, #52]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b36:	2280      	movs	r2, #128	; 0x80
 8001b38:	0212      	lsls	r2, r2, #8
 8001b3a:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b42:	4b0a      	ldr	r3, [pc, #40]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_ZL19MX_USART2_UART_Initv+0x68>)
 8001b50:	0018      	movs	r0, r3
 8001b52:	f002 fac9 	bl	80040e8 <HAL_UART_Init>
 8001b56:	0003      	movs	r3, r0
 8001b58:	1e5a      	subs	r2, r3, #1
 8001b5a:	4193      	sbcs	r3, r2
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <_ZL19MX_USART2_UART_Initv+0x62>
  {
    Error_Handler();
 8001b62:	f000 f8a5 	bl	8001cb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b66:	46c0      	nop			; (mov r8, r8)
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	20000088 	.word	0x20000088
 8001b70:	40004400 	.word	0x40004400

08001b74 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <_ZL11MX_DMA_Initv+0x48>)
 8001b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b7e:	4b0f      	ldr	r3, [pc, #60]	; (8001bbc <_ZL11MX_DMA_Initv+0x48>)
 8001b80:	2101      	movs	r1, #1
 8001b82:	430a      	orrs	r2, r1
 8001b84:	639a      	str	r2, [r3, #56]	; 0x38
 8001b86:	4b0d      	ldr	r3, [pc, #52]	; (8001bbc <_ZL11MX_DMA_Initv+0x48>)
 8001b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b92:	2200      	movs	r2, #0
 8001b94:	2100      	movs	r1, #0
 8001b96:	2009      	movs	r0, #9
 8001b98:	f001 f9b2 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001b9c:	2009      	movs	r0, #9
 8001b9e:	f001 f9c4 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	200a      	movs	r0, #10
 8001ba8:	f001 f9aa 	bl	8002f00 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8001bac:	200a      	movs	r0, #10
 8001bae:	f001 f9bc 	bl	8002f2a <HAL_NVIC_EnableIRQ>

}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	b002      	add	sp, #8
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	40021000 	.word	0x40021000

08001bc0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b086      	sub	sp, #24
 8001bc4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc6:	1d3b      	adds	r3, r7, #4
 8001bc8:	0018      	movs	r0, r3
 8001bca:	2314      	movs	r3, #20
 8001bcc:	001a      	movs	r2, r3
 8001bce:	2100      	movs	r1, #0
 8001bd0:	f003 ff2b 	bl	8005a2a <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	4b14      	ldr	r3, [pc, #80]	; (8001c28 <_ZL12MX_GPIO_Initv+0x68>)
 8001bd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_ZL12MX_GPIO_Initv+0x68>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	635a      	str	r2, [r3, #52]	; 0x34
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_ZL12MX_GPIO_Initv+0x68>)
 8001be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001be4:	2201      	movs	r2, #1
 8001be6:	4013      	ands	r3, r2
 8001be8:	603b      	str	r3, [r7, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8001bec:	23a0      	movs	r3, #160	; 0xa0
 8001bee:	05db      	lsls	r3, r3, #23
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2103      	movs	r1, #3
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f001 fe37 	bl	8003868 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001bfa:	1d3b      	adds	r3, r7, #4
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	2201      	movs	r2, #1
 8001c04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	1d3b      	adds	r3, r7, #4
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	1d3b      	adds	r3, r7, #4
 8001c0e:	2200      	movs	r2, #0
 8001c10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c12:	1d3a      	adds	r2, r7, #4
 8001c14:	23a0      	movs	r3, #160	; 0xa0
 8001c16:	05db      	lsls	r3, r3, #23
 8001c18:	0011      	movs	r1, r2
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f001 fcc0 	bl	80035a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c20:	46c0      	nop			; (mov r8, r8)
 8001c22:	46bd      	mov	sp, r7
 8001c24:	b006      	add	sp, #24
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40021000 	.word	0x40021000

08001c2c <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_UART_TxCpltCallback+0x38>)
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d10f      	bne.n	8001c5c <HAL_UART_TxCpltCallback+0x30>
	nh.getHardware()->tx_transfare_complete = true;				// Flag set by this function and reset by interrupt, each time
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_UART_TxCpltCallback+0x3c>)
 8001c3e:	0018      	movs	r0, r3
 8001c40:	f000 fb6a 	bl	8002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001c44:	0003      	movs	r3, r0
 8001c46:	4a09      	ldr	r2, [pc, #36]	; (8001c6c <HAL_UART_TxCpltCallback+0x40>)
 8001c48:	2101      	movs	r1, #1
 8001c4a:	5499      	strb	r1, [r3, r2]
	 	 	 													// code is used different channel might be used so ISR flags
																// are a bit complicated to check plus not sure they are not
																// cleared right after interrupt.
	nh.getHardware()->flush();
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <HAL_UART_TxCpltCallback+0x3c>)
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f000 fb62 	bl	8002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001c54:	0003      	movs	r3, r0
 8001c56:	0018      	movs	r0, r3
 8001c58:	f7ff fb34 	bl	80012c4 <_ZN13STM32Hardware5flushEv>
	}
//	nh.getHardware()->mutex=false;
}
 8001c5c:	46c0      	nop			; (mov r8, r8)
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20000088 	.word	0x20000088
 8001c68:	2000020c 	.word	0x2000020c
 8001c6c:	00000411 	.word	0x00000411

08001c70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <HAL_UART_RxCpltCallback+0x20>)
 8001c7a:	0018      	movs	r0, r3
 8001c7c:	f000 fb4c 	bl	8002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8001c80:	0003      	movs	r3, r0
 8001c82:	0018      	movs	r0, r3
 8001c84:	f7ff fada 	bl	800123c <_ZN13STM32Hardware10reset_rbufEv>
}
 8001c88:	46c0      	nop			; (mov r8, r8)
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	b002      	add	sp, #8
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000020c 	.word	0x2000020c

08001c94 <_Z6led_cbRKN8std_msgs5UInt8E>:

void led_cb(const std_msgs::UInt8& msg){
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
	//uint8_t a = msg.data;
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001c9c:	23a0      	movs	r3, #160	; 0xa0
 8001c9e:	05db      	lsls	r3, r3, #23
 8001ca0:	2101      	movs	r1, #1
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f001 fdfd 	bl	80038a2 <HAL_GPIO_TogglePin>
}
 8001ca8:	46c0      	nop			; (mov r8, r8)
 8001caa:	46bd      	mov	sp, r7
 8001cac:	b002      	add	sp, #8
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cb4:	b672      	cpsid	i
}
 8001cb6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <Error_Handler+0x8>

08001cba <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	e00c      	b.n	8001ce4 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	40da      	lsrs	r2, r3
 8001cd2:	0011      	movs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	18d3      	adds	r3, r2, r3
 8001cda:	b2ca      	uxtb	r2, r1
 8001cdc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d9ef      	bls.n	8001cca <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 8001cea:	46c0      	nop			; (mov r8, r8)
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b004      	add	sp, #16
 8001cf2:	bd80      	pop	{r7, pc}

08001cf4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	e010      	b.n	8001d2c <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6839      	ldr	r1, [r7, #0]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	188a      	adds	r2, r1, r2
 8001d14:	7812      	ldrb	r2, [r2, #0]
 8001d16:	0011      	movs	r1, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	00d2      	lsls	r2, r2, #3
 8001d1c:	4091      	lsls	r1, r2
 8001d1e:	000a      	movs	r2, r1
 8001d20:	431a      	orrs	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2b03      	cmp	r3, #3
 8001d30:	d9eb      	bls.n	8001d0a <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	46c0      	nop			; (mov r8, r8)
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b004      	add	sp, #16
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b082      	sub	sp, #8
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <_ZN3ros11Subscriber_C1Ev+0x18>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	b002      	add	sp, #8
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	08005f4c 	.word	0x08005f4c

08001d58 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
 8001d64:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	0018      	movs	r0, r3
 8001d6a:	f7ff ffe7 	bl	8001d3c <_ZN3ros11Subscriber_C1Ev>
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei+0x44>)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	330c      	adds	r3, #12
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fc89 	bl	8001690 <_ZN8std_msgs5UInt8C1Ev>
    cb_(cb),
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	687a      	ldr	r2, [r7, #4]
 8001d82:	615a      	str	r2, [r3, #20]
    endpoint_(endpoint)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	619a      	str	r2, [r3, #24]
  {
    topic_ = topic_name;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	68ba      	ldr	r2, [r7, #8]
 8001d8e:	609a      	str	r2, [r3, #8]
  };
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	0018      	movs	r0, r3
 8001d94:	46bd      	mov	sp, r7
 8001d96:	b004      	add	sp, #16
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	46c0      	nop			; (mov r8, r8)
 8001d9c:	08005ed8 	.word	0x08005ed8

08001da0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:
  {
    return &hardware_;
  }

  /* Start serial, initialize buffers */
  void initNode()
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3304      	adds	r3, #4
 8001dac:	0018      	movs	r0, r3
 8001dae:	f7ff fa39 	bl	8001224 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	238f      	movs	r3, #143	; 0x8f
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	2100      	movs	r1, #0
 8001dba:	50d1      	str	r1, [r2, r3]
    bytes_ = 0;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x3c>)
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5099      	str	r1, [r3, r2]
    index_ = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a06      	ldr	r2, [pc, #24]	; (8001de0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x40>)
 8001dc8:	2100      	movs	r1, #0
 8001dca:	5099      	str	r1, [r3, r2]
    topic_ = 0;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a05      	ldr	r2, [pc, #20]	; (8001de4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv+0x44>)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	5099      	str	r1, [r3, r2]
  };
 8001dd4:	46c0      	nop			; (mov r8, r8)
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	b002      	add	sp, #8
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	000008f4 	.word	0x000008f4
 8001de0:	000008fc 	.word	0x000008fc
 8001de4:	000008f8 	.word	0x000008f8

08001de8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
 8001df6:	e01d      	b.n	8001e34 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4911      	ldr	r1, [pc, #68]	; (8001e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x5c>)
 8001dfe:	468c      	mov	ip, r1
 8001e00:	4462      	add	r2, ip
 8001e02:	0092      	lsls	r2, r2, #2
 8001e04:	58d3      	ldr	r3, [r2, r3]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d111      	bne.n	8001e2e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	490d      	ldr	r1, [pc, #52]	; (8001e44 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x5c>)
 8001e10:	468c      	mov	ip, r1
 8001e12:	4462      	add	r2, ip
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	6839      	ldr	r1, [r7, #0]
 8001e18:	50d1      	str	r1, [r2, r3]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	337d      	adds	r3, #125	; 0x7d
 8001e1e:	001a      	movs	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	60da      	str	r2, [r3, #12]
        return true;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e006      	b.n	8001e3c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	3301      	adds	r3, #1
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b18      	cmp	r3, #24
 8001e38:	ddde      	ble.n	8001df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8001e3a:	2300      	movs	r3, #0
  }
 8001e3c:	0018      	movs	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	b004      	add	sp, #16
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	0000020a 	.word	0x0000020a

08001e48 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E>:

  /* Register a new subscriber */
  bool subscribe(Subscriber_& s)
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	e01e      	b.n	8001e96 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x4e>
    {
      if (subscribers[i] == 0) // empty slot
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4912      	ldr	r1, [pc, #72]	; (8001ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x60>)
 8001e5e:	468c      	mov	ip, r1
 8001e60:	4463      	add	r3, ip
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	18d3      	adds	r3, r2, r3
 8001e66:	3304      	adds	r3, #4
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d110      	bne.n	8001e90 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x48>
      {
        subscribers[i] = &s;
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	490d      	ldr	r1, [pc, #52]	; (8001ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x60>)
 8001e74:	468c      	mov	ip, r1
 8001e76:	4463      	add	r3, ip
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	18d3      	adds	r3, r2, r3
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	683a      	ldr	r2, [r7, #0]
 8001e80:	601a      	str	r2, [r3, #0]
        s.id_ = i + 100;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3364      	adds	r3, #100	; 0x64
 8001e86:	001a      	movs	r2, r3
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
        return true;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e006      	b.n	8001e9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x56>
    for (int i = 0; i < MAX_SUBSCRIBERS; i++)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	3301      	adds	r3, #1
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2b18      	cmp	r3, #24
 8001e9a:	dddd      	ble.n	8001e58 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9subscribeERNS_11Subscriber_E+0x10>
      }
    }
    return false;
 8001e9c:	2300      	movs	r3, #0
  }
 8001e9e:	0018      	movs	r0, r3
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b004      	add	sp, #16
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			; (mov r8, r8)
 8001ea8:	00000222 	.word	0x00000222

08001eac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3304      	adds	r3, #4
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff fb43 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 8001ebe:	0003      	movs	r3, r0
 8001ec0:	60fb      	str	r3, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4ad7      	ldr	r2, [pc, #860]	; (8002224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x378>)
 8001ec6:	589b      	ldr	r3, [r3, r2]
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	4ad6      	ldr	r2, [pc, #856]	; (8002228 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d903      	bls.n	8001eda <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4ad5      	ldr	r2, [pc, #852]	; (800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	5499      	strb	r1, [r3, r2]
    if (mode_ != MODE_FIRST_FF)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	238f      	movs	r3, #143	; 0x8f
 8001ede:	011b      	lsls	r3, r3, #4
 8001ee0:	58d3      	ldr	r3, [r2, r3]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      if (c_time > last_msg_timeout_time)
 8001ee6:	687a      	ldr	r2, [r7, #4]
 8001ee8:	2391      	movs	r3, #145	; 0x91
 8001eea:	011b      	lsls	r3, r3, #4
 8001eec:	58d3      	ldr	r3, [r2, r3]
 8001eee:	68fa      	ldr	r2, [r7, #12]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d904      	bls.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
        mode_ = MODE_FIRST_FF;
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	238f      	movs	r3, #143	; 0x8f
 8001ef8:	011b      	lsls	r3, r3, #4
 8001efa:	2100      	movs	r1, #0
 8001efc:	50d1      	str	r1, [r2, r3]
      if (spin_timeout_ > 0)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4acb      	ldr	r2, [pc, #812]	; (8002230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x384>)
 8001f02:	589b      	ldr	r3, [r3, r2]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d013      	beq.n	8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x84>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3304      	adds	r3, #4
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff fb19 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 8001f12:	0002      	movs	r2, r0
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	687a      	ldr	r2, [r7, #4]
 8001f1a:	49c5      	ldr	r1, [pc, #788]	; (8002230 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x384>)
 8001f1c:	5852      	ldr	r2, [r2, r1]
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	419b      	sbcs	r3, r3
 8001f22:	425b      	negs	r3, r3
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x84>
          return SPIN_TIMEOUT;
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	425b      	negs	r3, r3
 8001f2e:	e1e5      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x450>
      int data = hardware_.read();
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3304      	adds	r3, #4
 8001f34:	0018      	movs	r0, r3
 8001f36:	f7ff f992 	bl	800125e <_ZN13STM32Hardware4readEv>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	60bb      	str	r3, [r7, #8]
      if (data < 0)
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	da00      	bge.n	8001f46 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x9a>
 8001f44:	e1c3      	b.n	80022ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x422>
      checksum_ += data;
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	2390      	movs	r3, #144	; 0x90
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	58d2      	ldr	r2, [r2, r3]
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	18d1      	adds	r1, r2, r3
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	2390      	movs	r3, #144	; 0x90
 8001f56:	011b      	lsls	r3, r3, #4
 8001f58:	50d1      	str	r1, [r2, r3]
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8001f5a:	687a      	ldr	r2, [r7, #4]
 8001f5c:	238f      	movs	r3, #143	; 0x8f
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	58d3      	ldr	r3, [r2, r3]
 8001f62:	2b07      	cmp	r3, #7
 8001f64:	d121      	bne.n	8001faa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xfe>
        message_in[index_++] = data;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4ab2      	ldr	r2, [pc, #712]	; (8002234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x388>)
 8001f6a:	589b      	ldr	r3, [r3, r2]
 8001f6c:	1c59      	adds	r1, r3, #1
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	48b0      	ldr	r0, [pc, #704]	; (8002234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x388>)
 8001f72:	5011      	str	r1, [r2, r0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	b2d0      	uxtb	r0, r2
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	2285      	movs	r2, #133	; 0x85
 8001f7c:	00d2      	lsls	r2, r2, #3
 8001f7e:	18cb      	adds	r3, r1, r3
 8001f80:	189b      	adds	r3, r3, r2
 8001f82:	1c02      	adds	r2, r0, #0
 8001f84:	701a      	strb	r2, [r3, #0]
        bytes_--;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4aab      	ldr	r2, [pc, #684]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 8001f8a:	589b      	ldr	r3, [r3, r2]
 8001f8c:	1e5a      	subs	r2, r3, #1
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	49a9      	ldr	r1, [pc, #676]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 8001f92:	505a      	str	r2, [r3, r1]
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4aa8      	ldr	r2, [pc, #672]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 8001f98:	589b      	ldr	r3, [r3, r2]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1af      	bne.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          mode_ = MODE_MSG_CHECKSUM;
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	238f      	movs	r3, #143	; 0x8f
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	2108      	movs	r1, #8
 8001fa6:	50d1      	str	r1, [r2, r3]
 8001fa8:	e7a9      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_FIRST_FF)
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	238f      	movs	r3, #143	; 0x8f
 8001fae:	011b      	lsls	r3, r3, #4
 8001fb0:	58d3      	ldr	r3, [r2, r3]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d129      	bne.n	800200a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x15e>
        if (data == 0xff)
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	2bff      	cmp	r3, #255	; 0xff
 8001fba:	d110      	bne.n	8001fde <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x132>
          mode_++;
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	238f      	movs	r3, #143	; 0x8f
 8001fc0:	011b      	lsls	r3, r3, #4
 8001fc2:	58d3      	ldr	r3, [r2, r3]
 8001fc4:	1c59      	adds	r1, r3, #1
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	238f      	movs	r3, #143	; 0x8f
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	50d1      	str	r1, [r2, r3]
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	3314      	adds	r3, #20
 8001fd2:	0019      	movs	r1, r3
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	2391      	movs	r3, #145	; 0x91
 8001fd8:	011b      	lsls	r3, r3, #4
 8001fda:	50d1      	str	r1, [r2, r3]
 8001fdc:	e78f      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff faae 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	4a93      	ldr	r2, [pc, #588]	; (800223c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x390>)
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	419b      	sbcs	r3, r3
 8001ff4:	425b      	negs	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d080      	beq.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          configured_ = false;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a8b      	ldr	r2, [pc, #556]	; (800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 8002000:	2100      	movs	r1, #0
 8002002:	5499      	strb	r1, [r3, r2]
          return SPIN_TIMEOUT;
 8002004:	2302      	movs	r3, #2
 8002006:	425b      	negs	r3, r3
 8002008:	e178      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x450>
      else if (mode_ == MODE_PROTOCOL_VER)
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	238f      	movs	r3, #143	; 0x8f
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	58d3      	ldr	r3, [r2, r3]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d11c      	bne.n	8002050 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1a4>
        if (data == PROTOCOL_VER)
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	2bfe      	cmp	r3, #254	; 0xfe
 800201a:	d109      	bne.n	8002030 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
          mode_++;
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	238f      	movs	r3, #143	; 0x8f
 8002020:	011b      	lsls	r3, r3, #4
 8002022:	58d3      	ldr	r3, [r2, r3]
 8002024:	1c59      	adds	r1, r3, #1
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	238f      	movs	r3, #143	; 0x8f
 800202a:	011b      	lsls	r3, r3, #4
 800202c:	50d1      	str	r1, [r2, r3]
 800202e:	e766      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          mode_ = MODE_FIRST_FF;
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	238f      	movs	r3, #143	; 0x8f
 8002034:	011b      	lsls	r3, r3, #4
 8002036:	2100      	movs	r1, #0
 8002038:	50d1      	str	r1, [r2, r3]
          if (configured_ == false)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a7b      	ldr	r2, [pc, #492]	; (800222c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x380>)
 800203e:	5c9b      	ldrb	r3, [r3, r2]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d000      	beq.n	8002046 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x19a>
 8002044:	e75b      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	0018      	movs	r0, r3
 800204a:	f000 f96f 	bl	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 800204e:	e756      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	238f      	movs	r3, #143	; 0x8f
 8002054:	011b      	lsls	r3, r3, #4
 8002056:	58d3      	ldr	r3, [r2, r3]
 8002058:	2b02      	cmp	r3, #2
 800205a:	d116      	bne.n	800208a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1de>
        bytes_ = data;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4976      	ldr	r1, [pc, #472]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	505a      	str	r2, [r3, r1]
        index_ = 0;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a73      	ldr	r2, [pc, #460]	; (8002234 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x388>)
 8002068:	2100      	movs	r1, #0
 800206a:	5099      	str	r1, [r3, r2]
        mode_++;
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	238f      	movs	r3, #143	; 0x8f
 8002070:	011b      	lsls	r3, r3, #4
 8002072:	58d3      	ldr	r3, [r2, r3]
 8002074:	1c59      	adds	r1, r3, #1
 8002076:	687a      	ldr	r2, [r7, #4]
 8002078:	238f      	movs	r3, #143	; 0x8f
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	50d1      	str	r1, [r2, r3]
        checksum_ = data;               /* first byte for calculating size checksum */
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	2390      	movs	r3, #144	; 0x90
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	50d1      	str	r1, [r2, r3]
 8002088:	e739      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	238f      	movs	r3, #143	; 0x8f
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	58d3      	ldr	r3, [r2, r3]
 8002092:	2b03      	cmp	r3, #3
 8002094:	d112      	bne.n	80020bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
        bytes_ += data << 8;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a67      	ldr	r2, [pc, #412]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 800209a:	589a      	ldr	r2, [r3, r2]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	18d2      	adds	r2, r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4964      	ldr	r1, [pc, #400]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 80020a6:	505a      	str	r2, [r3, r1]
        mode_++;
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	238f      	movs	r3, #143	; 0x8f
 80020ac:	011b      	lsls	r3, r3, #4
 80020ae:	58d3      	ldr	r3, [r2, r3]
 80020b0:	1c59      	adds	r1, r3, #1
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	238f      	movs	r3, #143	; 0x8f
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	50d1      	str	r1, [r2, r3]
 80020ba:	e720      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80020bc:	687a      	ldr	r2, [r7, #4]
 80020be:	238f      	movs	r3, #143	; 0x8f
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	58d3      	ldr	r3, [r2, r3]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d11c      	bne.n	8002102 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x256>
        if ((checksum_ % 256) == 255)
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	2390      	movs	r3, #144	; 0x90
 80020cc:	011b      	lsls	r3, r3, #4
 80020ce:	58d3      	ldr	r3, [r2, r3]
 80020d0:	4a5b      	ldr	r2, [pc, #364]	; (8002240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x394>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	d503      	bpl.n	80020de <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x232>
 80020d6:	3b01      	subs	r3, #1
 80020d8:	4a5a      	ldr	r2, [pc, #360]	; (8002244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x398>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	3301      	adds	r3, #1
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d109      	bne.n	80020f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x24a>
          mode_++;
 80020e2:	687a      	ldr	r2, [r7, #4]
 80020e4:	238f      	movs	r3, #143	; 0x8f
 80020e6:	011b      	lsls	r3, r3, #4
 80020e8:	58d3      	ldr	r3, [r2, r3]
 80020ea:	1c59      	adds	r1, r3, #1
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	238f      	movs	r3, #143	; 0x8f
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	50d1      	str	r1, [r2, r3]
 80020f4:	e703      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	238f      	movs	r3, #143	; 0x8f
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	2100      	movs	r1, #0
 80020fe:	50d1      	str	r1, [r2, r3]
 8002100:	e6fd      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002102:	687a      	ldr	r2, [r7, #4]
 8002104:	238f      	movs	r3, #143	; 0x8f
 8002106:	011b      	lsls	r3, r3, #4
 8002108:	58d3      	ldr	r3, [r2, r3]
 800210a:	2b05      	cmp	r3, #5
 800210c:	d112      	bne.n	8002134 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x288>
        topic_ = data;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	494d      	ldr	r1, [pc, #308]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	505a      	str	r2, [r3, r1]
        mode_++;
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	238f      	movs	r3, #143	; 0x8f
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	58d3      	ldr	r3, [r2, r3]
 800211e:	1c59      	adds	r1, r3, #1
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	238f      	movs	r3, #143	; 0x8f
 8002124:	011b      	lsls	r3, r3, #4
 8002126:	50d1      	str	r1, [r2, r3]
        checksum_ = data;               /* first byte included in checksum */
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	2390      	movs	r3, #144	; 0x90
 800212c:	011b      	lsls	r3, r3, #4
 800212e:	68b9      	ldr	r1, [r7, #8]
 8002130:	50d1      	str	r1, [r2, r3]
 8002132:	e6e4      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	238f      	movs	r3, #143	; 0x8f
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	58d3      	ldr	r3, [r2, r3]
 800213c:	2b06      	cmp	r3, #6
 800213e:	d119      	bne.n	8002174 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2c8>
        topic_ += data << 8;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a41      	ldr	r2, [pc, #260]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 8002144:	589a      	ldr	r2, [r3, r2]
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	021b      	lsls	r3, r3, #8
 800214a:	18d2      	adds	r2, r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	493e      	ldr	r1, [pc, #248]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 8002150:	505a      	str	r2, [r3, r1]
        mode_ = MODE_MESSAGE;
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	238f      	movs	r3, #143	; 0x8f
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	2107      	movs	r1, #7
 800215a:	50d1      	str	r1, [r2, r3]
        if (bytes_ == 0)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a36      	ldr	r2, [pc, #216]	; (8002238 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x38c>)
 8002160:	589b      	ldr	r3, [r3, r2]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d000      	beq.n	8002168 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2bc>
 8002166:	e6ca      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          mode_ = MODE_MSG_CHECKSUM;
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	238f      	movs	r3, #143	; 0x8f
 800216c:	011b      	lsls	r3, r3, #4
 800216e:	2108      	movs	r1, #8
 8002170:	50d1      	str	r1, [r2, r3]
 8002172:	e6c4      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	238f      	movs	r3, #143	; 0x8f
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	58d3      	ldr	r3, [r2, r3]
 800217c:	2b08      	cmp	r3, #8
 800217e:	d000      	beq.n	8002182 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d6>
 8002180:	e6bd      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
        mode_ = MODE_FIRST_FF;
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	238f      	movs	r3, #143	; 0x8f
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	2100      	movs	r1, #0
 800218a:	50d1      	str	r1, [r2, r3]
        if ((checksum_ % 256) == 255)
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	2390      	movs	r3, #144	; 0x90
 8002190:	011b      	lsls	r3, r3, #4
 8002192:	58d3      	ldr	r3, [r2, r3]
 8002194:	4a2a      	ldr	r2, [pc, #168]	; (8002240 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x394>)
 8002196:	4013      	ands	r3, r2
 8002198:	d503      	bpl.n	80021a2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2f6>
 800219a:	3b01      	subs	r3, #1
 800219c:	4a29      	ldr	r2, [pc, #164]	; (8002244 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x398>)
 800219e:	4313      	orrs	r3, r2
 80021a0:	3301      	adds	r3, #1
 80021a2:	2bff      	cmp	r3, #255	; 0xff
 80021a4:	d000      	beq.n	80021a8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2fc>
 80021a6:	e6aa      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a27      	ldr	r2, [pc, #156]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 80021ac:	589b      	ldr	r3, [r3, r2]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d112      	bne.n	80021d8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32c>
            requestSyncTime();
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	0018      	movs	r0, r3
 80021b6:	f000 f8b9 	bl	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f8d3 	bl	8002368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4921      	ldr	r1, [pc, #132]	; (800224c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a0>)
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	505a      	str	r2, [r3, r1]
            last_sync_receive_time = c_time;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4915      	ldr	r1, [pc, #84]	; (8002224 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x378>)
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	505a      	str	r2, [r3, r1]
            return SPIN_ERR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	425b      	negs	r3, r3
 80021d6:	e091      	b.n	80022fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x450>
          else if (topic_ == TopicInfo::ID_TIME)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 80021dc:	589b      	ldr	r3, [r3, r2]
 80021de:	2b0a      	cmp	r3, #10
 80021e0:	d109      	bne.n	80021f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x34a>
            syncTime(message_in);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2285      	movs	r2, #133	; 0x85
 80021e6:	00d2      	lsls	r2, r2, #3
 80021e8:	189a      	adds	r2, r3, r2
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	0011      	movs	r1, r2
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 f9c6 	bl	8002580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80021f4:	e683      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a13      	ldr	r2, [pc, #76]	; (8002248 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x39c>)
 80021fa:	589b      	ldr	r3, [r3, r2]
 80021fc:	2b06      	cmp	r3, #6
 80021fe:	d12b      	bne.n	8002258 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3ac>
            req_param_resp.deserialize(message_in);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a13      	ldr	r2, [pc, #76]	; (8002250 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a4>)
 8002204:	189a      	adds	r2, r3, r2
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2185      	movs	r1, #133	; 0x85
 800220a:	00c9      	lsls	r1, r1, #3
 800220c:	468c      	mov	ip, r1
 800220e:	4463      	add	r3, ip
 8002210:	0019      	movs	r1, r3
 8002212:	0010      	movs	r0, r2
 8002214:	f7fe fdff 	bl	8000e16 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	4a0e      	ldr	r2, [pc, #56]	; (8002254 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>)
 800221c:	2101      	movs	r1, #1
 800221e:	5499      	strb	r1, [r3, r2]
 8002220:	e66d      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
 8002222:	46c0      	nop			; (mov r8, r8)
 8002224:	0000090c 	.word	0x0000090c
 8002228:	00002af8 	.word	0x00002af8
 800222c:	00000904 	.word	0x00000904
 8002230:	00000424 	.word	0x00000424
 8002234:	000008fc 	.word	0x000008fc
 8002238:	000008f4 	.word	0x000008f4
 800223c:	00001388 	.word	0x00001388
 8002240:	800000ff 	.word	0x800000ff
 8002244:	ffffff00 	.word	0xffffff00
 8002248:	000008f8 	.word	0x000008f8
 800224c:	00000908 	.word	0x00000908
 8002250:	00000918 	.word	0x00000918
 8002254:	00000914 	.word	0x00000914
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a2a      	ldr	r2, [pc, #168]	; (8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x458>)
 800225c:	589b      	ldr	r3, [r3, r2]
 800225e:	2b0b      	cmp	r3, #11
 8002260:	d104      	bne.n	800226c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3c0>
            configured_ = false;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a28      	ldr	r2, [pc, #160]	; (8002308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x45c>)
 8002266:	2100      	movs	r1, #0
 8002268:	5499      	strb	r1, [r3, r2]
 800226a:	e648      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
            if (subscribers[topic_ - 100])
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a25      	ldr	r2, [pc, #148]	; (8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x458>)
 8002270:	589b      	ldr	r3, [r3, r2]
 8002272:	3b64      	subs	r3, #100	; 0x64
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	4925      	ldr	r1, [pc, #148]	; (800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x460>)
 8002278:	468c      	mov	ip, r1
 800227a:	4463      	add	r3, ip
 800227c:	009b      	lsls	r3, r3, #2
 800227e:	18d3      	adds	r3, r2, r3
 8002280:	3304      	adds	r3, #4
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d100      	bne.n	800228a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3de>
 8002288:	e639      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
              subscribers[topic_ - 100]->callback(message_in);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1d      	ldr	r2, [pc, #116]	; (8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x458>)
 800228e:	589b      	ldr	r3, [r3, r2]
 8002290:	3b64      	subs	r3, #100	; 0x64
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	491d      	ldr	r1, [pc, #116]	; (800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x460>)
 8002296:	468c      	mov	ip, r1
 8002298:	4463      	add	r3, ip
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	18d3      	adds	r3, r2, r3
 800229e:	3304      	adds	r3, #4
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a17      	ldr	r2, [pc, #92]	; (8002304 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x458>)
 80022a6:	589b      	ldr	r3, [r3, r2]
 80022a8:	3b64      	subs	r3, #100	; 0x64
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	4917      	ldr	r1, [pc, #92]	; (800230c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x460>)
 80022ae:	468c      	mov	ip, r1
 80022b0:	4463      	add	r3, ip
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	3304      	adds	r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2185      	movs	r1, #133	; 0x85
 80022c2:	00c9      	lsls	r1, r1, #3
 80022c4:	468c      	mov	ip, r1
 80022c6:	4463      	add	r3, ip
 80022c8:	0019      	movs	r1, r3
 80022ca:	4790      	blx	r2
    while (true)
 80022cc:	e617      	b.n	8001efe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x52>
        break;
 80022ce:	46c0      	nop			; (mov r8, r8)
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	4a0d      	ldr	r2, [pc, #52]	; (8002308 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x45c>)
 80022d4:	5c9b      	ldrb	r3, [r3, r2]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00f      	beq.n	80022fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x464>)
 80022de:	589b      	ldr	r3, [r3, r2]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	4a0b      	ldr	r2, [pc, #44]	; (8002314 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x468>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d907      	bls.n	80022fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x44e>
      requestSyncTime();
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 f81d 	bl	800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4906      	ldr	r1, [pc, #24]	; (8002310 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x464>)
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	505a      	str	r2, [r3, r1]
    return SPIN_OK;
 80022fa:	2300      	movs	r3, #0
  }
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b004      	add	sp, #16
 8002302:	bd80      	pop	{r7, pc}
 8002304:	000008f8 	.word	0x000008f8
 8002308:	00000904 	.word	0x00000904
 800230c:	00000222 	.word	0x00000222
 8002310:	00000908 	.word	0x00000908
 8002314:	000009c4 	.word	0x000009c4

08002318 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:
  Hardware* getHardware()
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
    return &hardware_;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	3304      	adds	r3, #4
  }
 8002324:	0018      	movs	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	b002      	add	sp, #8
 800232a:	bd80      	pop	{r7, pc}

0800232c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 800232c:	b590      	push	{r4, r7, lr}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8002334:	240c      	movs	r4, #12
 8002336:	193b      	adds	r3, r7, r4
 8002338:	0018      	movs	r0, r3
 800233a:	f7fe f8cf 	bl	80004dc <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	193a      	adds	r2, r7, r4
 8002346:	6878      	ldr	r0, [r7, #4]
 8002348:	210a      	movs	r1, #10
 800234a:	4798      	blx	r3
    rt_time = hardware_.time();
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	3304      	adds	r3, #4
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff f8f7 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 8002356:	0001      	movs	r1, r0
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	2383      	movs	r3, #131	; 0x83
 800235c:	00db      	lsls	r3, r3, #3
 800235e:	50d1      	str	r1, [r2, r3]
  }
 8002360:	46c0      	nop			; (mov r8, r8)
 8002362:	46bd      	mov	sp, r7
 8002364:	b007      	add	sp, #28
 8002366:	bd90      	pop	{r4, r7, pc}

08002368 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8002368:	b5b0      	push	{r4, r5, r7, lr}
 800236a:	b08a      	sub	sp, #40	; 0x28
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002370:	230c      	movs	r3, #12
 8002372:	18fb      	adds	r3, r7, r3
 8002374:	0018      	movs	r0, r3
 8002376:	f7fe f999 	bl	80006ac <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800237a:	2300      	movs	r3, #0
 800237c:	627b      	str	r3, [r7, #36]	; 0x24
 800237e:	e068      	b.n	8002452 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
    {
      if (publishers[i] != 0) // non-empty slot
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002384:	497b      	ldr	r1, [pc, #492]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 8002386:	468c      	mov	ip, r1
 8002388:	4462      	add	r2, ip
 800238a:	0092      	lsls	r2, r2, #2
 800238c:	58d3      	ldr	r3, [r2, r3]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d05c      	beq.n	800244c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
      {
        ti.topic_id = publishers[i]->id_;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002396:	4977      	ldr	r1, [pc, #476]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 8002398:	468c      	mov	ip, r1
 800239a:	4462      	add	r2, ip
 800239c:	0092      	lsls	r2, r2, #2
 800239e:	58d3      	ldr	r3, [r2, r3]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	240c      	movs	r4, #12
 80023a6:	193b      	adds	r3, r7, r4
 80023a8:	809a      	strh	r2, [r3, #4]
        ti.topic_name = (char *) publishers[i]->topic_;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ae:	4971      	ldr	r1, [pc, #452]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 80023b0:	468c      	mov	ip, r1
 80023b2:	4462      	add	r2, ip
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	58d3      	ldr	r3, [r2, r3]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	193b      	adds	r3, r7, r4
 80023bc:	609a      	str	r2, [r3, #8]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c2:	496c      	ldr	r1, [pc, #432]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 80023c4:	468c      	mov	ip, r1
 80023c6:	4462      	add	r2, ip
 80023c8:	0092      	lsls	r2, r2, #2
 80023ca:	58d3      	ldr	r3, [r2, r3]
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	4868      	ldr	r0, [pc, #416]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 80023d4:	4684      	mov	ip, r0
 80023d6:	4462      	add	r2, ip
 80023d8:	0092      	lsls	r2, r2, #2
 80023da:	58d3      	ldr	r3, [r2, r3]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	3308      	adds	r3, #8
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	0008      	movs	r0, r1
 80023e6:	4798      	blx	r3
 80023e8:	0002      	movs	r2, r0
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	60da      	str	r2, [r3, #12]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f2:	4960      	ldr	r1, [pc, #384]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 80023f4:	468c      	mov	ip, r1
 80023f6:	4462      	add	r2, ip
 80023f8:	0092      	lsls	r2, r2, #2
 80023fa:	58d3      	ldr	r3, [r2, r3]
 80023fc:	6859      	ldr	r1, [r3, #4]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002402:	485c      	ldr	r0, [pc, #368]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 8002404:	4684      	mov	ip, r0
 8002406:	4462      	add	r2, ip
 8002408:	0092      	lsls	r2, r2, #2
 800240a:	58d3      	ldr	r3, [r2, r3]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	330c      	adds	r3, #12
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	0008      	movs	r0, r1
 8002416:	4798      	blx	r3
 8002418:	0002      	movs	r2, r0
 800241a:	193b      	adds	r3, r7, r4
 800241c:	611a      	str	r2, [r3, #16]
        ti.buffer_size = OUTPUT_SIZE;
 800241e:	0025      	movs	r5, r4
 8002420:	193b      	adds	r3, r7, r4
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	0092      	lsls	r2, r2, #2
 8002426:	615a      	str	r2, [r3, #20]
        publish(publishers[i]->getEndpointType(), &ti);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681c      	ldr	r4, [r3, #0]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002432:	4950      	ldr	r1, [pc, #320]	; (8002574 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x20c>)
 8002434:	468c      	mov	ip, r1
 8002436:	4462      	add	r2, ip
 8002438:	0092      	lsls	r2, r2, #2
 800243a:	58d3      	ldr	r3, [r2, r3]
 800243c:	0018      	movs	r0, r3
 800243e:	f7fe fea3 	bl	8001188 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002442:	0001      	movs	r1, r0
 8002444:	197a      	adds	r2, r7, r5
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	0018      	movs	r0, r3
 800244a:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 800244c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244e:	3301      	adds	r3, #1
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002454:	2b18      	cmp	r3, #24
 8002456:	dd93      	ble.n	8002380 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002458:	2300      	movs	r3, #0
 800245a:	627b      	str	r3, [r7, #36]	; 0x24
 800245c:	e07e      	b.n	800255c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1f4>
    {
      if (subscribers[i] != 0) // non-empty slot
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002462:	4945      	ldr	r1, [pc, #276]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 8002464:	468c      	mov	ip, r1
 8002466:	4463      	add	r3, ip
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	18d3      	adds	r3, r2, r3
 800246c:	3304      	adds	r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d070      	beq.n	8002556 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ee>
      {
        ti.topic_id = subscribers[i]->id_;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002478:	493f      	ldr	r1, [pc, #252]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 800247a:	468c      	mov	ip, r1
 800247c:	4463      	add	r3, ip
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	18d3      	adds	r3, r2, r3
 8002482:	3304      	adds	r3, #4
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	b29a      	uxth	r2, r3
 800248a:	250c      	movs	r5, #12
 800248c:	197b      	adds	r3, r7, r5
 800248e:	809a      	strh	r2, [r3, #4]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002494:	4938      	ldr	r1, [pc, #224]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 8002496:	468c      	mov	ip, r1
 8002498:	4463      	add	r3, ip
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	18d3      	adds	r3, r2, r3
 800249e:	3304      	adds	r3, #4
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	197b      	adds	r3, r7, r5
 80024a6:	609a      	str	r2, [r3, #8]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	4932      	ldr	r1, [pc, #200]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 80024ae:	468c      	mov	ip, r1
 80024b0:	4463      	add	r3, ip
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	18d3      	adds	r3, r2, r3
 80024b6:	3304      	adds	r3, #4
 80024b8:	6819      	ldr	r1, [r3, #0]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024be:	482e      	ldr	r0, [pc, #184]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 80024c0:	4684      	mov	ip, r0
 80024c2:	4463      	add	r3, ip
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	18d3      	adds	r3, r2, r3
 80024c8:	3304      	adds	r3, #4
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	3308      	adds	r3, #8
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0008      	movs	r0, r1
 80024d4:	4798      	blx	r3
 80024d6:	0002      	movs	r2, r0
 80024d8:	197b      	adds	r3, r7, r5
 80024da:	60da      	str	r2, [r3, #12]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e0:	4925      	ldr	r1, [pc, #148]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 80024e2:	468c      	mov	ip, r1
 80024e4:	4463      	add	r3, ip
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	18d3      	adds	r3, r2, r3
 80024ea:	3304      	adds	r3, #4
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f2:	4821      	ldr	r0, [pc, #132]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 80024f4:	4684      	mov	ip, r0
 80024f6:	4463      	add	r3, ip
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	18d3      	adds	r3, r2, r3
 80024fc:	3304      	adds	r3, #4
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	330c      	adds	r3, #12
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	0008      	movs	r0, r1
 8002508:	4798      	blx	r3
 800250a:	0002      	movs	r2, r0
 800250c:	197b      	adds	r3, r7, r5
 800250e:	611a      	str	r2, [r3, #16]
        ti.buffer_size = INPUT_SIZE;
 8002510:	197b      	adds	r3, r7, r5
 8002512:	2280      	movs	r2, #128	; 0x80
 8002514:	0092      	lsls	r2, r2, #2
 8002516:	615a      	str	r2, [r3, #20]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	681c      	ldr	r4, [r3, #0]
 800251e:	687a      	ldr	r2, [r7, #4]
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	4915      	ldr	r1, [pc, #84]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 8002524:	468c      	mov	ip, r1
 8002526:	4463      	add	r3, ip
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	18d3      	adds	r3, r2, r3
 800252c:	3304      	adds	r3, #4
 800252e:	6819      	ldr	r1, [r3, #0]
 8002530:	687a      	ldr	r2, [r7, #4]
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	4810      	ldr	r0, [pc, #64]	; (8002578 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x210>)
 8002536:	4684      	mov	ip, r0
 8002538:	4463      	add	r3, ip
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	18d3      	adds	r3, r2, r3
 800253e:	3304      	adds	r3, #4
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3304      	adds	r3, #4
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0008      	movs	r0, r1
 800254a:	4798      	blx	r3
 800254c:	0001      	movs	r1, r0
 800254e:	197a      	adds	r2, r7, r5
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	0018      	movs	r0, r3
 8002554:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	3301      	adds	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	; 0x24
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	2b18      	cmp	r3, #24
 8002560:	dc00      	bgt.n	8002564 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1fc>
 8002562:	e77c      	b.n	800245e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xf6>
      }
    }
    configured_ = true;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	4a05      	ldr	r2, [pc, #20]	; (800257c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x214>)
 8002568:	2101      	movs	r1, #1
 800256a:	5499      	strb	r1, [r3, r2]
  }
 800256c:	46c0      	nop			; (mov r8, r8)
 800256e:	46bd      	mov	sp, r7
 8002570:	b00a      	add	sp, #40	; 0x28
 8002572:	bdb0      	pop	{r4, r5, r7, pc}
 8002574:	0000020a 	.word	0x0000020a
 8002578:	00000222 	.word	0x00000222
 800257c:	00000904 	.word	0x00000904

08002580 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002580:	b5b0      	push	{r4, r5, r7, lr}
 8002582:	b086      	sub	sp, #24
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 800258a:	2408      	movs	r4, #8
 800258c:	193b      	adds	r3, r7, r4
 800258e:	0018      	movs	r0, r3
 8002590:	f7fd ffa4 	bl	80004dc <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3304      	adds	r3, #4
 8002598:	0018      	movs	r0, r3
 800259a:	f7fe ffd3 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 800259e:	0001      	movs	r1, r0
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	2383      	movs	r3, #131	; 0x83
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	58d3      	ldr	r3, [r2, r3]
 80025a8:	1acb      	subs	r3, r1, r3
 80025aa:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 80025ac:	683a      	ldr	r2, [r7, #0]
 80025ae:	0025      	movs	r5, r4
 80025b0:	197b      	adds	r3, r7, r5
 80025b2:	0011      	movs	r1, r2
 80025b4:	0018      	movs	r0, r3
 80025b6:	f7fd ffff 	bl	80005b8 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 80025ba:	197b      	adds	r3, r7, r5
 80025bc:	685c      	ldr	r4, [r3, #4]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	22fa      	movs	r2, #250	; 0xfa
 80025c2:	0091      	lsls	r1, r2, #2
 80025c4:	0018      	movs	r0, r3
 80025c6:	f7fd fda5 	bl	8000114 <__udivsi3>
 80025ca:	0003      	movs	r3, r0
 80025cc:	18e2      	adds	r2, r4, r3
 80025ce:	197b      	adds	r3, r7, r5
 80025d0:	605a      	str	r2, [r3, #4]
    t.data.nsec += (offset % 1000) * 1000000UL;
 80025d2:	197b      	adds	r3, r7, r5
 80025d4:	689c      	ldr	r4, [r3, #8]
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	22fa      	movs	r2, #250	; 0xfa
 80025da:	0091      	lsls	r1, r2, #2
 80025dc:	0018      	movs	r0, r3
 80025de:	f7fd fe1f 	bl	8000220 <__aeabi_uidivmod>
 80025e2:	000b      	movs	r3, r1
 80025e4:	0019      	movs	r1, r3
 80025e6:	000a      	movs	r2, r1
 80025e8:	0152      	lsls	r2, r2, #5
 80025ea:	1a52      	subs	r2, r2, r1
 80025ec:	0193      	lsls	r3, r2, #6
 80025ee:	1a9b      	subs	r3, r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	185b      	adds	r3, r3, r1
 80025f4:	019b      	lsls	r3, r3, #6
 80025f6:	18e2      	adds	r2, r4, r3
 80025f8:	197b      	adds	r3, r7, r5
 80025fa:	609a      	str	r2, [r3, #8]
    this->setNow(t.data);
 80025fc:	197b      	adds	r3, r7, r5
 80025fe:	1d1a      	adds	r2, r3, #4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0011      	movs	r1, r2
 8002604:	0018      	movs	r0, r3
 8002606:	f000 f8c3 	bl	8002790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	3304      	adds	r3, #4
 800260e:	0018      	movs	r0, r3
 8002610:	f7fe ff98 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 8002614:	0002      	movs	r2, r0
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4902      	ldr	r1, [pc, #8]	; (8002624 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0xa4>)
 800261a:	505a      	str	r2, [r3, r1]
  }
 800261c:	46c0      	nop			; (mov r8, r8)
 800261e:	46bd      	mov	sp, r7
 8002620:	b006      	add	sp, #24
 8002622:	bdb0      	pop	{r4, r5, r7, pc}
 8002624:	0000090c 	.word	0x0000090c

08002628 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af00      	add	r7, sp, #0
 800262e:	60f8      	str	r0, [r7, #12]
 8002630:	60b9      	str	r1, [r7, #8]
 8002632:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	2b63      	cmp	r3, #99	; 0x63
 8002638:	dd09      	ble.n	800264e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4a4a      	ldr	r2, [pc, #296]	; (8002768 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x140>)
 800263e:	5c9b      	ldrb	r3, [r3, r2]
 8002640:	2201      	movs	r2, #1
 8002642:	4053      	eors	r3, r2
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 800264a:	2300      	movs	r3, #0
 800264c:	e087      	b.n	800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x136>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	21c5      	movs	r1, #197	; 0xc5
 8002658:	00c9      	lsls	r1, r1, #3
 800265a:	468c      	mov	ip, r1
 800265c:	4462      	add	r2, ip
 800265e:	1dd1      	adds	r1, r2, #7
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	0010      	movs	r0, r2
 8002664:	4798      	blx	r3
 8002666:	0003      	movs	r3, r0
 8002668:	617b      	str	r3, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	23c5      	movs	r3, #197	; 0xc5
 800266e:	00db      	lsls	r3, r3, #3
 8002670:	21ff      	movs	r1, #255	; 0xff
 8002672:	54d1      	strb	r1, [r2, r3]
    message_out[1] = PROTOCOL_VER;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	4a3d      	ldr	r2, [pc, #244]	; (800276c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x144>)
 8002678:	21fe      	movs	r1, #254	; 0xfe
 800267a:	5499      	strb	r1, [r3, r2]
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	b2d9      	uxtb	r1, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4a3b      	ldr	r2, [pc, #236]	; (8002770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x148>)
 8002684:	5499      	strb	r1, [r3, r2]
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	b29b      	uxth	r3, r3
 800268a:	0a1b      	lsrs	r3, r3, #8
 800268c:	b29b      	uxth	r3, r3
 800268e:	b2d9      	uxtb	r1, r3
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a38      	ldr	r2, [pc, #224]	; (8002774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>)
 8002694:	5499      	strb	r1, [r3, r2]
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a35      	ldr	r2, [pc, #212]	; (8002770 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x148>)
 800269a:	5c9a      	ldrb	r2, [r3, r2]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4935      	ldr	r1, [pc, #212]	; (8002774 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x14c>)
 80026a0:	5c5b      	ldrb	r3, [r3, r1]
 80026a2:	18d3      	adds	r3, r2, r3
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	b2d9      	uxtb	r1, r3
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	4a32      	ldr	r2, [pc, #200]	; (8002778 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x150>)
 80026ae:	5499      	strb	r1, [r3, r2]
    message_out[5] = (uint8_t)((int16_t)id & 255);
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	b2d9      	uxtb	r1, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x154>)
 80026b8:	5499      	strb	r1, [r3, r2]
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	b21b      	sxth	r3, r3
 80026be:	121b      	asrs	r3, r3, #8
 80026c0:	b21b      	sxth	r3, r3
 80026c2:	b2d9      	uxtb	r1, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a2e      	ldr	r2, [pc, #184]	; (8002780 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x158>)
 80026c8:	5499      	strb	r1, [r3, r2]

    /* calculate checksum */
    int chk = 0;
 80026ca:	2300      	movs	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80026ce:	2305      	movs	r3, #5
 80026d0:	61bb      	str	r3, [r7, #24]
 80026d2:	e00d      	b.n	80026f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc8>
      chk += message_out[i];
 80026d4:	68f9      	ldr	r1, [r7, #12]
 80026d6:	23c5      	movs	r3, #197	; 0xc5
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	188a      	adds	r2, r1, r2
 80026de:	18d3      	adds	r3, r2, r3
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	001a      	movs	r2, r3
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	189b      	adds	r3, r3, r2
 80026e8:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	3301      	adds	r3, #1
 80026ee:	61bb      	str	r3, [r7, #24]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	3306      	adds	r3, #6
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	ddec      	ble.n	80026d4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xac>
    l += 7;
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	3307      	adds	r3, #7
 80026fe:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	4a20      	ldr	r2, [pc, #128]	; (8002784 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x15c>)
 8002704:	4013      	ands	r3, r2
 8002706:	d503      	bpl.n	8002710 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xe8>
 8002708:	3b01      	subs	r3, #1
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x160>)
 800270c:	4313      	orrs	r3, r2
 800270e:	3301      	adds	r3, #1
 8002710:	b2da      	uxtb	r2, r3
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	1c59      	adds	r1, r3, #1
 8002716:	6179      	str	r1, [r7, #20]
 8002718:	43d2      	mvns	r2, r2
 800271a:	b2d0      	uxtb	r0, r2
 800271c:	68f9      	ldr	r1, [r7, #12]
 800271e:	22c5      	movs	r2, #197	; 0xc5
 8002720:	00d2      	lsls	r2, r2, #3
 8002722:	18cb      	adds	r3, r1, r3
 8002724:	189b      	adds	r3, r3, r2
 8002726:	1c02      	adds	r2, r0, #0
 8002728:	701a      	strb	r2, [r3, #0]

    if (l <= OUTPUT_SIZE)
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	2380      	movs	r3, #128	; 0x80
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	429a      	cmp	r2, r3
 8002732:	dc0c      	bgt.n	800274e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x126>
    {
      hardware_.write(message_out, l);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1d18      	adds	r0, r3, #4
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	22c5      	movs	r2, #197	; 0xc5
 800273c:	00d2      	lsls	r2, r2, #3
 800273e:	4694      	mov	ip, r2
 8002740:	4463      	add	r3, ip
 8002742:	697a      	ldr	r2, [r7, #20]
 8002744:	0019      	movs	r1, r3
 8002746:	f7fe fe57 	bl	80013f8 <_ZN13STM32Hardware5writeEPhj>
      return l;
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	e007      	b.n	800275e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x136>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 800274e:	4a0f      	ldr	r2, [pc, #60]	; (800278c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x164>)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0011      	movs	r1, r2
 8002754:	0018      	movs	r0, r3
 8002756:	f000 f863 	bl	8002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 800275a:	2301      	movs	r3, #1
 800275c:	425b      	negs	r3, r3
    }
  }
 800275e:	0018      	movs	r0, r3
 8002760:	46bd      	mov	sp, r7
 8002762:	b008      	add	sp, #32
 8002764:	bd80      	pop	{r7, pc}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	00000904 	.word	0x00000904
 800276c:	00000629 	.word	0x00000629
 8002770:	0000062a 	.word	0x0000062a
 8002774:	0000062b 	.word	0x0000062b
 8002778:	0000062c 	.word	0x0000062c
 800277c:	0000062d 	.word	0x0000062d
 8002780:	0000062e 	.word	0x0000062e
 8002784:	800000ff 	.word	0x800000ff
 8002788:	ffffff00 	.word	0xffffff00
 800278c:	08005e60 	.word	0x08005e60

08002790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002790:	b590      	push	{r4, r7, lr}
 8002792:	b085      	sub	sp, #20
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	3304      	adds	r3, #4
 800279e:	0018      	movs	r0, r3
 80027a0:	f7fe fed0 	bl	8001544 <_ZN13STM32Hardware4timeEv>
 80027a4:	0003      	movs	r3, r0
 80027a6:	60fb      	str	r3, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	22fa      	movs	r2, #250	; 0xfa
 80027b0:	0091      	lsls	r1, r2, #2
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7fd fcae 	bl	8000114 <__udivsi3>
 80027b8:	0003      	movs	r3, r0
 80027ba:	1ae3      	subs	r3, r4, r3
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4915      	ldr	r1, [pc, #84]	; (8002818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x88>)
 80027c2:	505a      	str	r2, [r3, r1]
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685c      	ldr	r4, [r3, #4]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	22fa      	movs	r2, #250	; 0xfa
 80027cc:	0091      	lsls	r1, r2, #2
 80027ce:	0018      	movs	r0, r3
 80027d0:	f7fd fd26 	bl	8000220 <__aeabi_uidivmod>
 80027d4:	000b      	movs	r3, r1
 80027d6:	0019      	movs	r1, r3
 80027d8:	000a      	movs	r2, r1
 80027da:	0152      	lsls	r2, r2, #5
 80027dc:	1a52      	subs	r2, r2, r1
 80027de:	0193      	lsls	r3, r2, #6
 80027e0:	1a9b      	subs	r3, r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	185b      	adds	r3, r3, r1
 80027e6:	019b      	lsls	r3, r3, #6
 80027e8:	1ae3      	subs	r3, r4, r3
 80027ea:	4a0c      	ldr	r2, [pc, #48]	; (800281c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x8c>)
 80027ec:	1899      	adds	r1, r3, r2
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	2384      	movs	r3, #132	; 0x84
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	50d1      	str	r1, [r2, r3]
    normalizeSecNSec(sec_offset, nsec_offset);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a07      	ldr	r2, [pc, #28]	; (8002818 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x88>)
 80027fa:	189a      	adds	r2, r3, r2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2184      	movs	r1, #132	; 0x84
 8002800:	00c9      	lsls	r1, r1, #3
 8002802:	468c      	mov	ip, r1
 8002804:	4463      	add	r3, ip
 8002806:	0019      	movs	r1, r3
 8002808:	0010      	movs	r0, r2
 800280a:	f7fd fe25 	bl	8000458 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	46bd      	mov	sp, r7
 8002812:	b005      	add	sp, #20
 8002814:	bd90      	pop	{r4, r7, pc}
 8002816:	46c0      	nop			; (mov r8, r8)
 8002818:	0000041c 	.word	0x0000041c
 800281c:	3b9aca00 	.word	0x3b9aca00

08002820 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2103      	movs	r1, #3
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f804 	bl	800283e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002836:	46c0      	nop			; (mov r8, r8)
 8002838:	46bd      	mov	sp, r7
 800283a:	b002      	add	sp, #8
 800283c:	bd80      	pop	{r7, pc}

0800283e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 800283e:	b5b0      	push	{r4, r5, r7, lr}
 8002840:	b088      	sub	sp, #32
 8002842:	af00      	add	r7, sp, #0
 8002844:	60f8      	str	r0, [r7, #12]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	250b      	movs	r5, #11
 800284a:	197b      	adds	r3, r7, r5
 800284c:	1c0a      	adds	r2, r1, #0
 800284e:	701a      	strb	r2, [r3, #0]
    rosserial_msgs::Log l;
 8002850:	2414      	movs	r4, #20
 8002852:	193b      	adds	r3, r7, r4
 8002854:	0018      	movs	r0, r3
 8002856:	f7fe f8ef 	bl	8000a38 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 800285a:	0021      	movs	r1, r4
 800285c:	187b      	adds	r3, r7, r1
 800285e:	197a      	adds	r2, r7, r5
 8002860:	7812      	ldrb	r2, [r2, #0]
 8002862:	711a      	strb	r2, [r3, #4]
    l.msg = (char*)msg;
 8002864:	187b      	adds	r3, r7, r1
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	609a      	str	r2, [r3, #8]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	187a      	adds	r2, r7, r1
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	2107      	movs	r1, #7
 8002876:	4798      	blx	r3
  }
 8002878:	46c0      	nop			; (mov r8, r8)
 800287a:	46bd      	mov	sp, r7
 800287c:	b008      	add	sp, #32
 800287e:	bdb0      	pop	{r4, r5, r7, pc}

08002880 <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d121      	bne.n	80028d4 <_Z41__static_initialization_and_destruction_0ii+0x54>
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	4a12      	ldr	r2, [pc, #72]	; (80028dc <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d11d      	bne.n	80028d4 <_Z41__static_initialization_and_destruction_0ii+0x54>
ros::NodeHandle nh;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 800289a:	0018      	movs	r0, r3
 800289c:	f7fe fff4 	bl	8001888 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 80028a0:	4b10      	ldr	r3, [pc, #64]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80028a2:	0018      	movs	r0, r3
 80028a4:	f7fe fe5a 	bl	800155c <_ZN8std_msgs6StringC1Ev>
std_msgs::UInt32 uint32_msg;
 80028a8:	4b0f      	ldr	r3, [pc, #60]	; (80028e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fe ff48 	bl	8001740 <_ZN8std_msgs6UInt32C1Ev>
ros::Publisher chatter("chatter", &str_msg);
 80028b0:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80028b2:	490e      	ldr	r1, [pc, #56]	; (80028ec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80028b4:	480e      	ldr	r0, [pc, #56]	; (80028f0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80028b6:	2300      	movs	r3, #0
 80028b8:	f7fe fc3c 	bl	8001134 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher chatter2("chatter2", &uint32_msg);
 80028bc:	4a0a      	ldr	r2, [pc, #40]	; (80028e8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80028be:	490d      	ldr	r1, [pc, #52]	; (80028f4 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80028c0:	480d      	ldr	r0, [pc, #52]	; (80028f8 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 80028c2:	2300      	movs	r3, #0
 80028c4:	f7fe fc36 	bl	8001134 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<std_msgs::UInt8> led_sub("led", &led_cb);
 80028c8:	4a0c      	ldr	r2, [pc, #48]	; (80028fc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80028ca:	490d      	ldr	r1, [pc, #52]	; (8002900 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80028cc:	480d      	ldr	r0, [pc, #52]	; (8002904 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80028ce:	2301      	movs	r3, #1
 80028d0:	f7ff fa42 	bl	8001d58 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvEC1EPKcPFvRKS2_Ei>
}
 80028d4:	46c0      	nop			; (mov r8, r8)
 80028d6:	46bd      	mov	sp, r7
 80028d8:	b002      	add	sp, #8
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	0000ffff 	.word	0x0000ffff
 80028e0:	2000020c 	.word	0x2000020c
 80028e4:	20000b4c 	.word	0x20000b4c
 80028e8:	20000b54 	.word	0x20000b54
 80028ec:	08005e9c 	.word	0x08005e9c
 80028f0:	20000b5c 	.word	0x20000b5c
 80028f4:	08005ea4 	.word	0x08005ea4
 80028f8:	20000b70 	.word	0x20000b70
 80028fc:	08001c95 	.word	0x08001c95
 8002900:	08005eb0 	.word	0x08005eb0
 8002904:	20000b84 	.word	0x20000b84

08002908 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	330c      	adds	r3, #12
 8002916:	683a      	ldr	r2, [r7, #0]
 8002918:	0011      	movs	r1, r2
 800291a:	0018      	movs	r0, r3
 800291c:	f7fe fee3 	bl	80016e6 <_ZN8std_msgs5UInt811deserializeEPh>
    this->cb_(msg);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	320c      	adds	r2, #12
 8002928:	0010      	movs	r0, r2
 800292a:	4798      	blx	r3
  }
 800292c:	46c0      	nop			; (mov r8, r8)
 800292e:	46bd      	mov	sp, r7
 8002930:	b002      	add	sp, #8
 8002932:	bd80      	pop	{r7, pc}

08002934 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
  }
 8002940:	0018      	movs	r0, r3
 8002942:	46bd      	mov	sp, r7
 8002944:	b002      	add	sp, #8
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	330c      	adds	r3, #12
 8002954:	0018      	movs	r0, r3
 8002956:	f7fe fedb 	bl	8001710 <_ZN8std_msgs5UInt87getTypeEv>
 800295a:	0003      	movs	r3, r0
  }
 800295c:	0018      	movs	r0, r3
 800295e:	46bd      	mov	sp, r7
 8002960:	b002      	add	sp, #8
 8002962:	bd80      	pop	{r7, pc}

08002964 <_ZN3ros10SubscriberIN8std_msgs5UInt8EvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	330c      	adds	r3, #12
 8002970:	0018      	movs	r0, r3
 8002972:	f7fe fed9 	bl	8001728 <_ZN8std_msgs5UInt86getMD5Ev>
 8002976:	0003      	movs	r3, r0
  }
 8002978:	0018      	movs	r0, r3
 800297a:	46bd      	mov	sp, r7
 800297c:	b002      	add	sp, #8
 800297e:	bd80      	pop	{r7, pc}

08002980 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002980:	b580      	push	{r7, lr}
 8002982:	b082      	sub	sp, #8
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
    return configured_;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a03      	ldr	r2, [pc, #12]	; (8002998 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv+0x18>)
 800298c:	5c9b      	ldrb	r3, [r3, r2]
  };
 800298e:	0018      	movs	r0, r3
 8002990:	46bd      	mov	sp, r7
 8002992:	b002      	add	sp, #8
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	00000904 	.word	0x00000904

0800299c <_GLOBAL__sub_I_huart2>:
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
 80029a0:	4b03      	ldr	r3, [pc, #12]	; (80029b0 <_GLOBAL__sub_I_huart2+0x14>)
 80029a2:	0019      	movs	r1, r3
 80029a4:	2001      	movs	r0, #1
 80029a6:	f7ff ff6b 	bl	8002880 <_Z41__static_initialization_and_destruction_0ii>
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	0000ffff 	.word	0x0000ffff

080029b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ba:	4b0f      	ldr	r3, [pc, #60]	; (80029f8 <HAL_MspInit+0x44>)
 80029bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_MspInit+0x44>)
 80029c0:	2101      	movs	r1, #1
 80029c2:	430a      	orrs	r2, r1
 80029c4:	641a      	str	r2, [r3, #64]	; 0x40
 80029c6:	4b0c      	ldr	r3, [pc, #48]	; (80029f8 <HAL_MspInit+0x44>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	2201      	movs	r2, #1
 80029cc:	4013      	ands	r3, r2
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_MspInit+0x44>)
 80029d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029d6:	4b08      	ldr	r3, [pc, #32]	; (80029f8 <HAL_MspInit+0x44>)
 80029d8:	2180      	movs	r1, #128	; 0x80
 80029da:	0549      	lsls	r1, r1, #21
 80029dc:	430a      	orrs	r2, r1
 80029de:	63da      	str	r2, [r3, #60]	; 0x3c
 80029e0:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_MspInit+0x44>)
 80029e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	055b      	lsls	r3, r3, #21
 80029e8:	4013      	ands	r3, r2
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029ee:	46c0      	nop			; (mov r8, r8)
 80029f0:	46bd      	mov	sp, r7
 80029f2:	b002      	add	sp, #8
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	40021000 	.word	0x40021000

080029fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b08b      	sub	sp, #44	; 0x2c
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	2414      	movs	r4, #20
 8002a06:	193b      	adds	r3, r7, r4
 8002a08:	0018      	movs	r0, r3
 8002a0a:	2314      	movs	r3, #20
 8002a0c:	001a      	movs	r2, r3
 8002a0e:	2100      	movs	r1, #0
 8002a10:	f003 f80b 	bl	8005a2a <memset>
  if(huart->Instance==USART2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a49      	ldr	r2, [pc, #292]	; (8002b40 <HAL_UART_MspInit+0x144>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d000      	beq.n	8002a20 <HAL_UART_MspInit+0x24>
 8002a1e:	e08b      	b.n	8002b38 <HAL_UART_MspInit+0x13c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a20:	4b48      	ldr	r3, [pc, #288]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a24:	4b47      	ldr	r3, [pc, #284]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a26:	2180      	movs	r1, #128	; 0x80
 8002a28:	0289      	lsls	r1, r1, #10
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a2e:	4b45      	ldr	r3, [pc, #276]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a32:	2380      	movs	r3, #128	; 0x80
 8002a34:	029b      	lsls	r3, r3, #10
 8002a36:	4013      	ands	r3, r2
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a3c:	4b41      	ldr	r3, [pc, #260]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a40:	4b40      	ldr	r3, [pc, #256]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a42:	2101      	movs	r1, #1
 8002a44:	430a      	orrs	r2, r1
 8002a46:	635a      	str	r2, [r3, #52]	; 0x34
 8002a48:	4b3e      	ldr	r3, [pc, #248]	; (8002b44 <HAL_UART_MspInit+0x148>)
 8002a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002a54:	0021      	movs	r1, r4
 8002a56:	187b      	adds	r3, r7, r1
 8002a58:	220c      	movs	r2, #12
 8002a5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	187b      	adds	r3, r7, r1
 8002a5e:	2202      	movs	r2, #2
 8002a60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a62:	187b      	adds	r3, r7, r1
 8002a64:	2200      	movs	r2, #0
 8002a66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a68:	187b      	adds	r3, r7, r1
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8002a6e:	187b      	adds	r3, r7, r1
 8002a70:	2201      	movs	r2, #1
 8002a72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a74:	187a      	adds	r2, r7, r1
 8002a76:	23a0      	movs	r3, #160	; 0xa0
 8002a78:	05db      	lsls	r3, r3, #23
 8002a7a:	0011      	movs	r1, r2
 8002a7c:	0018      	movs	r0, r3
 8002a7e:	f000 fd8f 	bl	80035a0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8002a82:	4b31      	ldr	r3, [pc, #196]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002a84:	4a31      	ldr	r2, [pc, #196]	; (8002b4c <HAL_UART_MspInit+0x150>)
 8002a86:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8002a88:	4b2f      	ldr	r3, [pc, #188]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002a8a:	2234      	movs	r2, #52	; 0x34
 8002a8c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a8e:	4b2e      	ldr	r3, [pc, #184]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a94:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002a96:	2200      	movs	r2, #0
 8002a98:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a9a:	4b2b      	ldr	r3, [pc, #172]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002aa0:	4b29      	ldr	r3, [pc, #164]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aa6:	4b28      	ldr	r3, [pc, #160]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002aae:	2220      	movs	r2, #32
 8002ab0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ab2:	4b25      	ldr	r3, [pc, #148]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 fa52 	bl	8002f64 <HAL_DMA_Init>
 8002ac0:	1e03      	subs	r3, r0, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002ac4:	f7ff f8f4 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2180      	movs	r1, #128	; 0x80
 8002acc:	4a1e      	ldr	r2, [pc, #120]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002ace:	505a      	str	r2, [r3, r1]
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <HAL_UART_MspInit+0x14c>)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8002ad6:	4b1e      	ldr	r3, [pc, #120]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_UART_MspInit+0x158>)
 8002ada:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8002adc:	4b1c      	ldr	r3, [pc, #112]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002ade:	2235      	movs	r2, #53	; 0x35
 8002ae0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ae2:	4b1b      	ldr	r3, [pc, #108]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ae8:	4b19      	ldr	r3, [pc, #100]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002aee:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002af0:	2280      	movs	r2, #128	; 0x80
 8002af2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002af4:	4b16      	ldr	r3, [pc, #88]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002afa:	4b15      	ldr	r3, [pc, #84]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002b00:	4b13      	ldr	r3, [pc, #76]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b06:	4b12      	ldr	r3, [pc, #72]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b08:	2200      	movs	r2, #0
 8002b0a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002b0c:	4b10      	ldr	r3, [pc, #64]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 fa28 	bl	8002f64 <HAL_DMA_Init>
 8002b14:	1e03      	subs	r3, r0, #0
 8002b16:	d001      	beq.n	8002b1c <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002b18:	f7ff f8ca 	bl	8001cb0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	4a0c      	ldr	r2, [pc, #48]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b20:	67da      	str	r2, [r3, #124]	; 0x7c
 8002b22:	4b0b      	ldr	r3, [pc, #44]	; (8002b50 <HAL_UART_MspInit+0x154>)
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	629a      	str	r2, [r3, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002b28:	2200      	movs	r2, #0
 8002b2a:	2100      	movs	r1, #0
 8002b2c:	201c      	movs	r0, #28
 8002b2e:	f000 f9e7 	bl	8002f00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002b32:	201c      	movs	r0, #28
 8002b34:	f000 f9f9 	bl	8002f2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b00b      	add	sp, #44	; 0x2c
 8002b3e:	bd90      	pop	{r4, r7, pc}
 8002b40:	40004400 	.word	0x40004400
 8002b44:	40021000 	.word	0x40021000
 8002b48:	20000154 	.word	0x20000154
 8002b4c:	40020008 	.word	0x40020008
 8002b50:	200001b0 	.word	0x200001b0
 8002b54:	4002001c 	.word	0x4002001c

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <NMI_Handler+0x4>

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <HardFault_Handler+0x4>

08002b64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002b68:	46c0      	nop			; (mov r8, r8)
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b7c:	f000 f8f8 	bl	8002d70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b80:	46c0      	nop			; (mov r8, r8)
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002b8c:	4b03      	ldr	r3, [pc, #12]	; (8002b9c <DMA1_Channel1_IRQHandler+0x14>)
 8002b8e:	0018      	movs	r0, r3
 8002b90:	f000 fbc4 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002b94:	46c0      	nop			; (mov r8, r8)
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	46c0      	nop			; (mov r8, r8)
 8002b9c:	20000154 	.word	0x20000154

08002ba0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002ba4:	4b03      	ldr	r3, [pc, #12]	; (8002bb4 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 fbb8 	bl	800331c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002bac:	46c0      	nop			; (mov r8, r8)
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	200001b0 	.word	0x200001b0

08002bb8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bbc:	4b03      	ldr	r3, [pc, #12]	; (8002bcc <USART2_IRQHandler+0x14>)
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f001 fbea 	bl	8004398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bc4:	46c0      	nop			; (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	20000088 	.word	0x20000088

08002bd0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <_sbrk+0x5c>)
 8002bda:	4b15      	ldr	r3, [pc, #84]	; (8002c30 <_sbrk+0x60>)
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002be4:	4b13      	ldr	r3, [pc, #76]	; (8002c34 <_sbrk+0x64>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d102      	bne.n	8002bf2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bec:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <_sbrk+0x64>)
 8002bee:	4a12      	ldr	r2, [pc, #72]	; (8002c38 <_sbrk+0x68>)
 8002bf0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bf2:	4b10      	ldr	r3, [pc, #64]	; (8002c34 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	18d3      	adds	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d207      	bcs.n	8002c10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c00:	f002 ff1c 	bl	8005a3c <__errno>
 8002c04:	0003      	movs	r3, r0
 8002c06:	220c      	movs	r2, #12
 8002c08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	425b      	negs	r3, r3
 8002c0e:	e009      	b.n	8002c24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c10:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <_sbrk+0x64>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c16:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <_sbrk+0x64>)
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	18d2      	adds	r2, r2, r3
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <_sbrk+0x64>)
 8002c20:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c22:	68fb      	ldr	r3, [r7, #12]
}
 8002c24:	0018      	movs	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	20002000 	.word	0x20002000
 8002c30:	00000400 	.word	0x00000400
 8002c34:	20000ba0 	.word	0x20000ba0
 8002c38:	20000cf0 	.word	0x20000cf0

08002c3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c40:	46c0      	nop			; (mov r8, r8)
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002c48:	480d      	ldr	r0, [pc, #52]	; (8002c80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002c4a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002c4c:	f7ff fff6 	bl	8002c3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c50:	480c      	ldr	r0, [pc, #48]	; (8002c84 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c52:	490d      	ldr	r1, [pc, #52]	; (8002c88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c54:	4a0d      	ldr	r2, [pc, #52]	; (8002c8c <LoopForever+0xe>)
  movs r3, #0
 8002c56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c58:	e002      	b.n	8002c60 <LoopCopyDataInit>

08002c5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c5e:	3304      	adds	r3, #4

08002c60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c64:	d3f9      	bcc.n	8002c5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c66:	4a0a      	ldr	r2, [pc, #40]	; (8002c90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c68:	4c0a      	ldr	r4, [pc, #40]	; (8002c94 <LoopForever+0x16>)
  movs r3, #0
 8002c6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c6c:	e001      	b.n	8002c72 <LoopFillZerobss>

08002c6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c70:	3204      	adds	r2, #4

08002c72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c74:	d3fb      	bcc.n	8002c6e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002c76:	f002 fee7 	bl	8005a48 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002c7a:	f7fe fe9d 	bl	80019b8 <main>

08002c7e <LoopForever>:

LoopForever:
  b LoopForever
 8002c7e:	e7fe      	b.n	8002c7e <LoopForever>
  ldr   r0, =_estack
 8002c80:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8002c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8002c8c:	08006034 	.word	0x08006034
  ldr r2, =_sbss
 8002c90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8002c94:	20000cf0 	.word	0x20000cf0

08002c98 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c98:	e7fe      	b.n	8002c98 <ADC1_IRQHandler>
	...

08002c9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ca2:	1dfb      	adds	r3, r7, #7
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_Init+0x3c>)
 8002caa:	681a      	ldr	r2, [r3, #0]
 8002cac:	4b0a      	ldr	r3, [pc, #40]	; (8002cd8 <HAL_Init+0x3c>)
 8002cae:	2180      	movs	r1, #128	; 0x80
 8002cb0:	0049      	lsls	r1, r1, #1
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cb6:	2003      	movs	r0, #3
 8002cb8:	f000 f810 	bl	8002cdc <HAL_InitTick>
 8002cbc:	1e03      	subs	r3, r0, #0
 8002cbe:	d003      	beq.n	8002cc8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002cc0:	1dfb      	adds	r3, r7, #7
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e001      	b.n	8002ccc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002cc8:	f7ff fe74 	bl	80029b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ccc:	1dfb      	adds	r3, r7, #7
 8002cce:	781b      	ldrb	r3, [r3, #0]
}
 8002cd0:	0018      	movs	r0, r3
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	b002      	add	sp, #8
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	40022000 	.word	0x40022000

08002cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cdc:	b590      	push	{r4, r7, lr}
 8002cde:	b085      	sub	sp, #20
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	18fb      	adds	r3, r7, r3
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8002cec:	4b1d      	ldr	r3, [pc, #116]	; (8002d64 <HAL_InitTick+0x88>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d02b      	beq.n	8002d4c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	; (8002d68 <HAL_InitTick+0x8c>)
 8002cf6:	681c      	ldr	r4, [r3, #0]
 8002cf8:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <HAL_InitTick+0x88>)
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	0019      	movs	r1, r3
 8002cfe:	23fa      	movs	r3, #250	; 0xfa
 8002d00:	0098      	lsls	r0, r3, #2
 8002d02:	f7fd fa07 	bl	8000114 <__udivsi3>
 8002d06:	0003      	movs	r3, r0
 8002d08:	0019      	movs	r1, r3
 8002d0a:	0020      	movs	r0, r4
 8002d0c:	f7fd fa02 	bl	8000114 <__udivsi3>
 8002d10:	0003      	movs	r3, r0
 8002d12:	0018      	movs	r0, r3
 8002d14:	f000 f919 	bl	8002f4a <HAL_SYSTICK_Config>
 8002d18:	1e03      	subs	r3, r0, #0
 8002d1a:	d112      	bne.n	8002d42 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d80a      	bhi.n	8002d38 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2301      	movs	r3, #1
 8002d26:	425b      	negs	r3, r3
 8002d28:	2200      	movs	r2, #0
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f000 f8e8 	bl	8002f00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d30:	4b0e      	ldr	r3, [pc, #56]	; (8002d6c <HAL_InitTick+0x90>)
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e00d      	b.n	8002d54 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	e008      	b.n	8002d54 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002d42:	230f      	movs	r3, #15
 8002d44:	18fb      	adds	r3, r7, r3
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
 8002d4a:	e003      	b.n	8002d54 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002d4c:	230f      	movs	r3, #15
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8002d54:	230f      	movs	r3, #15
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	781b      	ldrb	r3, [r3, #0]
}
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	b005      	add	sp, #20
 8002d60:	bd90      	pop	{r4, r7, pc}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	20000014 	.word	0x20000014
 8002d68:	2000000c 	.word	0x2000000c
 8002d6c:	20000010 	.word	0x20000010

08002d70 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002d74:	4b05      	ldr	r3, [pc, #20]	; (8002d8c <HAL_IncTick+0x1c>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	001a      	movs	r2, r3
 8002d7a:	4b05      	ldr	r3, [pc, #20]	; (8002d90 <HAL_IncTick+0x20>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	18d2      	adds	r2, r2, r3
 8002d80:	4b03      	ldr	r3, [pc, #12]	; (8002d90 <HAL_IncTick+0x20>)
 8002d82:	601a      	str	r2, [r3, #0]
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	20000014 	.word	0x20000014
 8002d90:	20000ba4 	.word	0x20000ba4

08002d94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	af00      	add	r7, sp, #0
  return uwTick;
 8002d98:	4b02      	ldr	r3, [pc, #8]	; (8002da4 <HAL_GetTick+0x10>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
}
 8002d9c:	0018      	movs	r0, r3
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	46c0      	nop			; (mov r8, r8)
 8002da4:	20000ba4 	.word	0x20000ba4

08002da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	0002      	movs	r2, r0
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002db4:	1dfb      	adds	r3, r7, #7
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b7f      	cmp	r3, #127	; 0x7f
 8002dba:	d809      	bhi.n	8002dd0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dbc:	1dfb      	adds	r3, r7, #7
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	001a      	movs	r2, r3
 8002dc2:	231f      	movs	r3, #31
 8002dc4:	401a      	ands	r2, r3
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <__NVIC_EnableIRQ+0x30>)
 8002dc8:	2101      	movs	r1, #1
 8002dca:	4091      	lsls	r1, r2
 8002dcc:	000a      	movs	r2, r1
 8002dce:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002dd0:	46c0      	nop			; (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ddc:	b590      	push	{r4, r7, lr}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	0002      	movs	r2, r0
 8002de4:	6039      	str	r1, [r7, #0]
 8002de6:	1dfb      	adds	r3, r7, #7
 8002de8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002dea:	1dfb      	adds	r3, r7, #7
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	2b7f      	cmp	r3, #127	; 0x7f
 8002df0:	d828      	bhi.n	8002e44 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002df2:	4a2f      	ldr	r2, [pc, #188]	; (8002eb0 <__NVIC_SetPriority+0xd4>)
 8002df4:	1dfb      	adds	r3, r7, #7
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b25b      	sxtb	r3, r3
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	33c0      	adds	r3, #192	; 0xc0
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	589b      	ldr	r3, [r3, r2]
 8002e02:	1dfa      	adds	r2, r7, #7
 8002e04:	7812      	ldrb	r2, [r2, #0]
 8002e06:	0011      	movs	r1, r2
 8002e08:	2203      	movs	r2, #3
 8002e0a:	400a      	ands	r2, r1
 8002e0c:	00d2      	lsls	r2, r2, #3
 8002e0e:	21ff      	movs	r1, #255	; 0xff
 8002e10:	4091      	lsls	r1, r2
 8002e12:	000a      	movs	r2, r1
 8002e14:	43d2      	mvns	r2, r2
 8002e16:	401a      	ands	r2, r3
 8002e18:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	019b      	lsls	r3, r3, #6
 8002e1e:	22ff      	movs	r2, #255	; 0xff
 8002e20:	401a      	ands	r2, r3
 8002e22:	1dfb      	adds	r3, r7, #7
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	0018      	movs	r0, r3
 8002e28:	2303      	movs	r3, #3
 8002e2a:	4003      	ands	r3, r0
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e30:	481f      	ldr	r0, [pc, #124]	; (8002eb0 <__NVIC_SetPriority+0xd4>)
 8002e32:	1dfb      	adds	r3, r7, #7
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	b25b      	sxtb	r3, r3
 8002e38:	089b      	lsrs	r3, r3, #2
 8002e3a:	430a      	orrs	r2, r1
 8002e3c:	33c0      	adds	r3, #192	; 0xc0
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e42:	e031      	b.n	8002ea8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e44:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <__NVIC_SetPriority+0xd8>)
 8002e46:	1dfb      	adds	r3, r7, #7
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	230f      	movs	r3, #15
 8002e4e:	400b      	ands	r3, r1
 8002e50:	3b08      	subs	r3, #8
 8002e52:	089b      	lsrs	r3, r3, #2
 8002e54:	3306      	adds	r3, #6
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	18d3      	adds	r3, r2, r3
 8002e5a:	3304      	adds	r3, #4
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	1dfa      	adds	r2, r7, #7
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	0011      	movs	r1, r2
 8002e64:	2203      	movs	r2, #3
 8002e66:	400a      	ands	r2, r1
 8002e68:	00d2      	lsls	r2, r2, #3
 8002e6a:	21ff      	movs	r1, #255	; 0xff
 8002e6c:	4091      	lsls	r1, r2
 8002e6e:	000a      	movs	r2, r1
 8002e70:	43d2      	mvns	r2, r2
 8002e72:	401a      	ands	r2, r3
 8002e74:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	019b      	lsls	r3, r3, #6
 8002e7a:	22ff      	movs	r2, #255	; 0xff
 8002e7c:	401a      	ands	r2, r3
 8002e7e:	1dfb      	adds	r3, r7, #7
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0018      	movs	r0, r3
 8002e84:	2303      	movs	r3, #3
 8002e86:	4003      	ands	r3, r0
 8002e88:	00db      	lsls	r3, r3, #3
 8002e8a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e8c:	4809      	ldr	r0, [pc, #36]	; (8002eb4 <__NVIC_SetPriority+0xd8>)
 8002e8e:	1dfb      	adds	r3, r7, #7
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	001c      	movs	r4, r3
 8002e94:	230f      	movs	r3, #15
 8002e96:	4023      	ands	r3, r4
 8002e98:	3b08      	subs	r3, #8
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	3306      	adds	r3, #6
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	18c3      	adds	r3, r0, r3
 8002ea4:	3304      	adds	r3, #4
 8002ea6:	601a      	str	r2, [r3, #0]
}
 8002ea8:	46c0      	nop			; (mov r8, r8)
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b003      	add	sp, #12
 8002eae:	bd90      	pop	{r4, r7, pc}
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b082      	sub	sp, #8
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	1e5a      	subs	r2, r3, #1
 8002ec4:	2380      	movs	r3, #128	; 0x80
 8002ec6:	045b      	lsls	r3, r3, #17
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d301      	bcc.n	8002ed0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e010      	b.n	8002ef2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ed0:	4b0a      	ldr	r3, [pc, #40]	; (8002efc <SysTick_Config+0x44>)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	3a01      	subs	r2, #1
 8002ed6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ed8:	2301      	movs	r3, #1
 8002eda:	425b      	negs	r3, r3
 8002edc:	2103      	movs	r1, #3
 8002ede:	0018      	movs	r0, r3
 8002ee0:	f7ff ff7c 	bl	8002ddc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <SysTick_Config+0x44>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002eea:	4b04      	ldr	r3, [pc, #16]	; (8002efc <SysTick_Config+0x44>)
 8002eec:	2207      	movs	r2, #7
 8002eee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b002      	add	sp, #8
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	e000e010 	.word	0xe000e010

08002f00 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b084      	sub	sp, #16
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	210f      	movs	r1, #15
 8002f0c:	187b      	adds	r3, r7, r1
 8002f0e:	1c02      	adds	r2, r0, #0
 8002f10:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8002f12:	68ba      	ldr	r2, [r7, #8]
 8002f14:	187b      	adds	r3, r7, r1
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	b25b      	sxtb	r3, r3
 8002f1a:	0011      	movs	r1, r2
 8002f1c:	0018      	movs	r0, r3
 8002f1e:	f7ff ff5d 	bl	8002ddc <__NVIC_SetPriority>
}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b004      	add	sp, #16
 8002f28:	bd80      	pop	{r7, pc}

08002f2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b082      	sub	sp, #8
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	0002      	movs	r2, r0
 8002f32:	1dfb      	adds	r3, r7, #7
 8002f34:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f36:	1dfb      	adds	r3, r7, #7
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	b25b      	sxtb	r3, r3
 8002f3c:	0018      	movs	r0, r3
 8002f3e:	f7ff ff33 	bl	8002da8 <__NVIC_EnableIRQ>
}
 8002f42:	46c0      	nop			; (mov r8, r8)
 8002f44:	46bd      	mov	sp, r7
 8002f46:	b002      	add	sp, #8
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b082      	sub	sp, #8
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f7ff ffaf 	bl	8002eb8 <SysTick_Config>
 8002f5a:	0003      	movs	r3, r0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b082      	sub	sp, #8
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d101      	bne.n	8002f76 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e077      	b.n	8003066 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a3d      	ldr	r2, [pc, #244]	; (8003070 <HAL_DMA_Init+0x10c>)
 8002f7c:	4694      	mov	ip, r2
 8002f7e:	4463      	add	r3, ip
 8002f80:	2114      	movs	r1, #20
 8002f82:	0018      	movs	r0, r3
 8002f84:	f7fd f8c6 	bl	8000114 <__udivsi3>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	009a      	lsls	r2, r3, #2
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2225      	movs	r2, #37	; 0x25
 8002f94:	2102      	movs	r1, #2
 8002f96:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_DMA_Init+0x110>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	6819      	ldr	r1, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	431a      	orrs	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 fa8d 	bl	8003500 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689a      	ldr	r2, [r3, #8]
 8002fea:	2380      	movs	r3, #128	; 0x80
 8002fec:	01db      	lsls	r3, r3, #7
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d102      	bne.n	8002ff8 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003000:	213f      	movs	r1, #63	; 0x3f
 8003002:	400a      	ands	r2, r1
 8003004:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300a:	687a      	ldr	r2, [r7, #4]
 800300c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800300e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d011      	beq.n	800303c <HAL_DMA_Init+0xd8>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b04      	cmp	r3, #4
 800301e:	d80d      	bhi.n	800303c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	0018      	movs	r0, r3
 8003024:	f000 fa98 	bl	8003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302c:	2200      	movs	r2, #0
 800302e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003034:	687a      	ldr	r2, [r7, #4]
 8003036:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003038:	605a      	str	r2, [r3, #4]
 800303a:	e008      	b.n	800304e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2225      	movs	r2, #37	; 0x25
 8003058:	2101      	movs	r1, #1
 800305a:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2224      	movs	r2, #36	; 0x24
 8003060:	2100      	movs	r1, #0
 8003062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	0018      	movs	r0, r3
 8003068:	46bd      	mov	sp, r7
 800306a:	b002      	add	sp, #8
 800306c:	bd80      	pop	{r7, pc}
 800306e:	46c0      	nop			; (mov r8, r8)
 8003070:	bffdfff8 	.word	0xbffdfff8
 8003074:	ffff800f 	.word	0xffff800f

08003078 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	60f8      	str	r0, [r7, #12]
 8003080:	60b9      	str	r1, [r7, #8]
 8003082:	607a      	str	r2, [r7, #4]
 8003084:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003086:	2317      	movs	r3, #23
 8003088:	18fb      	adds	r3, r7, r3
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2224      	movs	r2, #36	; 0x24
 8003092:	5c9b      	ldrb	r3, [r3, r2]
 8003094:	2b01      	cmp	r3, #1
 8003096:	d101      	bne.n	800309c <HAL_DMA_Start_IT+0x24>
 8003098:	2302      	movs	r3, #2
 800309a:	e06f      	b.n	800317c <HAL_DMA_Start_IT+0x104>
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2224      	movs	r2, #36	; 0x24
 80030a0:	2101      	movs	r1, #1
 80030a2:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2225      	movs	r2, #37	; 0x25
 80030a8:	5c9b      	ldrb	r3, [r3, r2]
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d157      	bne.n	8003160 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2225      	movs	r2, #37	; 0x25
 80030b4:	2102      	movs	r1, #2
 80030b6:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2101      	movs	r1, #1
 80030ca:	438a      	bics	r2, r1
 80030cc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 f9d3 	bl	8003480 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d008      	beq.n	80030f4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	210e      	movs	r1, #14
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	e00f      	b.n	8003114 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2104      	movs	r1, #4
 8003100:	438a      	bics	r2, r1
 8003102:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	210a      	movs	r1, #10
 8003110:	430a      	orrs	r2, r1
 8003112:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	2380      	movs	r3, #128	; 0x80
 800311c:	025b      	lsls	r3, r3, #9
 800311e:	4013      	ands	r3, r2
 8003120:	d008      	beq.n	8003134 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800312c:	2180      	movs	r1, #128	; 0x80
 800312e:	0049      	lsls	r1, r1, #1
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003138:	2b00      	cmp	r3, #0
 800313a:	d008      	beq.n	800314e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003146:	2180      	movs	r1, #128	; 0x80
 8003148:	0049      	lsls	r1, r1, #1
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2101      	movs	r1, #1
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	e00a      	b.n	8003176 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2224      	movs	r2, #36	; 0x24
 800316a:	2100      	movs	r1, #0
 800316c:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800316e:	2317      	movs	r3, #23
 8003170:	18fb      	adds	r3, r7, r3
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003176:	2317      	movs	r3, #23
 8003178:	18fb      	adds	r3, r7, r3
 800317a:	781b      	ldrb	r3, [r3, #0]
}
 800317c:	0018      	movs	r0, r3
 800317e:	46bd      	mov	sp, r7
 8003180:	b006      	add	sp, #24
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e050      	b.n	8003238 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2225      	movs	r2, #37	; 0x25
 800319a:	5c9b      	ldrb	r3, [r3, r2]
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d008      	beq.n	80031b4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2204      	movs	r2, #4
 80031a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	2100      	movs	r1, #0
 80031ae:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e041      	b.n	8003238 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	210e      	movs	r1, #14
 80031c0:	438a      	bics	r2, r1
 80031c2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ce:	491c      	ldr	r1, [pc, #112]	; (8003240 <HAL_DMA_Abort+0xbc>)
 80031d0:	400a      	ands	r2, r1
 80031d2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2101      	movs	r1, #1
 80031e0:	438a      	bics	r2, r1
 80031e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80031e4:	4b17      	ldr	r3, [pc, #92]	; (8003244 <HAL_DMA_Abort+0xc0>)
 80031e6:	6859      	ldr	r1, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ec:	221c      	movs	r2, #28
 80031ee:	4013      	ands	r3, r2
 80031f0:	2201      	movs	r2, #1
 80031f2:	409a      	lsls	r2, r3
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <HAL_DMA_Abort+0xc0>)
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003202:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003216:	490a      	ldr	r1, [pc, #40]	; (8003240 <HAL_DMA_Abort+0xbc>)
 8003218:	400a      	ands	r2, r1
 800321a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003220:	687a      	ldr	r2, [r7, #4]
 8003222:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003224:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2225      	movs	r2, #37	; 0x25
 800322a:	2101      	movs	r1, #1
 800322c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2224      	movs	r2, #36	; 0x24
 8003232:	2100      	movs	r1, #0
 8003234:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	0018      	movs	r0, r3
 800323a:	46bd      	mov	sp, r7
 800323c:	b002      	add	sp, #8
 800323e:	bd80      	pop	{r7, pc}
 8003240:	fffffeff 	.word	0xfffffeff
 8003244:	40020000 	.word	0x40020000

08003248 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003250:	210f      	movs	r1, #15
 8003252:	187b      	adds	r3, r7, r1
 8003254:	2200      	movs	r2, #0
 8003256:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2225      	movs	r2, #37	; 0x25
 800325c:	5c9b      	ldrb	r3, [r3, r2]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b02      	cmp	r3, #2
 8003262:	d006      	beq.n	8003272 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2204      	movs	r2, #4
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800326a:	187b      	adds	r3, r7, r1
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]
 8003270:	e049      	b.n	8003306 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	210e      	movs	r1, #14
 800327e:	438a      	bics	r2, r1
 8003280:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2101      	movs	r1, #1
 800328e:	438a      	bics	r2, r1
 8003290:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	491d      	ldr	r1, [pc, #116]	; (8003314 <HAL_DMA_Abort_IT+0xcc>)
 800329e:	400a      	ands	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80032a2:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_DMA_Abort_IT+0xd0>)
 80032a4:	6859      	ldr	r1, [r3, #4]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032aa:	221c      	movs	r2, #28
 80032ac:	4013      	ands	r3, r2
 80032ae:	2201      	movs	r2, #1
 80032b0:	409a      	lsls	r2, r3
 80032b2:	4b19      	ldr	r3, [pc, #100]	; (8003318 <HAL_DMA_Abort_IT+0xd0>)
 80032b4:	430a      	orrs	r2, r1
 80032b6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80032c0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00c      	beq.n	80032e4 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	490f      	ldr	r1, [pc, #60]	; (8003314 <HAL_DMA_Abort_IT+0xcc>)
 80032d6:	400a      	ands	r2, r1
 80032d8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80032e2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2225      	movs	r2, #37	; 0x25
 80032e8:	2101      	movs	r1, #1
 80032ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2224      	movs	r2, #36	; 0x24
 80032f0:	2100      	movs	r1, #0
 80032f2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d004      	beq.n	8003306 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	0010      	movs	r0, r2
 8003304:	4798      	blx	r3
    }
  }
  return status;
 8003306:	230f      	movs	r3, #15
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	781b      	ldrb	r3, [r3, #0]
}
 800330c:	0018      	movs	r0, r3
 800330e:	46bd      	mov	sp, r7
 8003310:	b004      	add	sp, #16
 8003312:	bd80      	pop	{r7, pc}
 8003314:	fffffeff 	.word	0xfffffeff
 8003318:	40020000 	.word	0x40020000

0800331c <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003324:	4b55      	ldr	r3, [pc, #340]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003336:	221c      	movs	r2, #28
 8003338:	4013      	ands	r3, r2
 800333a:	2204      	movs	r2, #4
 800333c:	409a      	lsls	r2, r3
 800333e:	0013      	movs	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4013      	ands	r3, r2
 8003344:	d027      	beq.n	8003396 <HAL_DMA_IRQHandler+0x7a>
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	2204      	movs	r2, #4
 800334a:	4013      	ands	r3, r2
 800334c:	d023      	beq.n	8003396 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2220      	movs	r2, #32
 8003356:	4013      	ands	r3, r2
 8003358:	d107      	bne.n	800336a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2104      	movs	r1, #4
 8003366:	438a      	bics	r2, r1
 8003368:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 800336a:	4b44      	ldr	r3, [pc, #272]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	221c      	movs	r2, #28
 8003374:	4013      	ands	r3, r2
 8003376:	2204      	movs	r2, #4
 8003378:	409a      	lsls	r2, r3
 800337a:	4b40      	ldr	r3, [pc, #256]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 800337c:	430a      	orrs	r2, r1
 800337e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003384:	2b00      	cmp	r3, #0
 8003386:	d100      	bne.n	800338a <HAL_DMA_IRQHandler+0x6e>
 8003388:	e073      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	687a      	ldr	r2, [r7, #4]
 8003390:	0010      	movs	r0, r2
 8003392:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003394:	e06d      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	221c      	movs	r2, #28
 800339c:	4013      	ands	r3, r2
 800339e:	2202      	movs	r2, #2
 80033a0:	409a      	lsls	r2, r3
 80033a2:	0013      	movs	r3, r2
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4013      	ands	r3, r2
 80033a8:	d02e      	beq.n	8003408 <HAL_DMA_IRQHandler+0xec>
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d02a      	beq.n	8003408 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2220      	movs	r2, #32
 80033ba:	4013      	ands	r3, r2
 80033bc:	d10b      	bne.n	80033d6 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	210a      	movs	r1, #10
 80033ca:	438a      	bics	r2, r1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2225      	movs	r2, #37	; 0x25
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 80033d8:	6859      	ldr	r1, [r3, #4]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	221c      	movs	r2, #28
 80033e0:	4013      	ands	r3, r2
 80033e2:	2202      	movs	r2, #2
 80033e4:	409a      	lsls	r2, r3
 80033e6:	4b25      	ldr	r3, [pc, #148]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 80033e8:	430a      	orrs	r2, r1
 80033ea:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2224      	movs	r2, #36	; 0x24
 80033f0:	2100      	movs	r1, #0
 80033f2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d03a      	beq.n	8003472 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	0010      	movs	r0, r2
 8003404:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003406:	e034      	b.n	8003472 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	221c      	movs	r2, #28
 800340e:	4013      	ands	r3, r2
 8003410:	2208      	movs	r2, #8
 8003412:	409a      	lsls	r2, r3
 8003414:	0013      	movs	r3, r2
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	4013      	ands	r3, r2
 800341a:	d02b      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2208      	movs	r2, #8
 8003420:	4013      	ands	r3, r2
 8003422:	d027      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	210e      	movs	r1, #14
 8003430:	438a      	bics	r2, r1
 8003432:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003434:	4b11      	ldr	r3, [pc, #68]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	221c      	movs	r2, #28
 800343e:	4013      	ands	r3, r2
 8003440:	2201      	movs	r2, #1
 8003442:	409a      	lsls	r2, r3
 8003444:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_DMA_IRQHandler+0x160>)
 8003446:	430a      	orrs	r2, r1
 8003448:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2225      	movs	r2, #37	; 0x25
 8003454:	2101      	movs	r1, #1
 8003456:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2224      	movs	r2, #36	; 0x24
 800345c:	2100      	movs	r1, #0
 800345e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	0010      	movs	r0, r2
 8003470:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	46c0      	nop			; (mov r8, r8)
}
 8003476:	46bd      	mov	sp, r7
 8003478:	b004      	add	sp, #16
 800347a:	bd80      	pop	{r7, pc}
 800347c:	40020000 	.word	0x40020000

08003480 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003492:	68fa      	ldr	r2, [r7, #12]
 8003494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003496:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034a8:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80034aa:	4b14      	ldr	r3, [pc, #80]	; (80034fc <DMA_SetConfig+0x7c>)
 80034ac:	6859      	ldr	r1, [r3, #4]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	221c      	movs	r2, #28
 80034b4:	4013      	ands	r3, r2
 80034b6:	2201      	movs	r2, #1
 80034b8:	409a      	lsls	r2, r3
 80034ba:	4b10      	ldr	r3, [pc, #64]	; (80034fc <DMA_SetConfig+0x7c>)
 80034bc:	430a      	orrs	r2, r1
 80034be:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	683a      	ldr	r2, [r7, #0]
 80034c6:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b10      	cmp	r3, #16
 80034ce:	d108      	bne.n	80034e2 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68ba      	ldr	r2, [r7, #8]
 80034de:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034e0:	e007      	b.n	80034f2 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	60da      	str	r2, [r3, #12]
}
 80034f2:	46c0      	nop			; (mov r8, r8)
 80034f4:	46bd      	mov	sp, r7
 80034f6:	b004      	add	sp, #16
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	40020000 	.word	0x40020000

08003500 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	089b      	lsrs	r3, r3, #2
 800350e:	4a10      	ldr	r2, [pc, #64]	; (8003550 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003510:	4694      	mov	ip, r2
 8003512:	4463      	add	r3, ip
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	001a      	movs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	001a      	movs	r2, r3
 8003522:	23ff      	movs	r3, #255	; 0xff
 8003524:	4013      	ands	r3, r2
 8003526:	3b08      	subs	r3, #8
 8003528:	2114      	movs	r1, #20
 800352a:	0018      	movs	r0, r3
 800352c:	f7fc fdf2 	bl	8000114 <__udivsi3>
 8003530:	0003      	movs	r3, r0
 8003532:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003538:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	221f      	movs	r2, #31
 800353e:	4013      	ands	r3, r2
 8003540:	2201      	movs	r2, #1
 8003542:	409a      	lsls	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003548:	46c0      	nop			; (mov r8, r8)
 800354a:	46bd      	mov	sp, r7
 800354c:	b004      	add	sp, #16
 800354e:	bd80      	pop	{r7, pc}
 8003550:	10008200 	.word	0x10008200
 8003554:	40020880 	.word	0x40020880

08003558 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b084      	sub	sp, #16
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	223f      	movs	r2, #63	; 0x3f
 8003566:	4013      	ands	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	4a0a      	ldr	r2, [pc, #40]	; (8003598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800356e:	4694      	mov	ip, r2
 8003570:	4463      	add	r3, ip
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	001a      	movs	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a07      	ldr	r2, [pc, #28]	; (800359c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800357e:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	3b01      	subs	r3, #1
 8003584:	2203      	movs	r2, #3
 8003586:	4013      	ands	r3, r2
 8003588:	2201      	movs	r2, #1
 800358a:	409a      	lsls	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003590:	46c0      	nop			; (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b004      	add	sp, #16
 8003596:	bd80      	pop	{r7, pc}
 8003598:	1000823f 	.word	0x1000823f
 800359c:	40020940 	.word	0x40020940

080035a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80035aa:	2300      	movs	r3, #0
 80035ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035ae:	e147      	b.n	8003840 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2101      	movs	r1, #1
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4091      	lsls	r1, r2
 80035ba:	000a      	movs	r2, r1
 80035bc:	4013      	ands	r3, r2
 80035be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d100      	bne.n	80035c8 <HAL_GPIO_Init+0x28>
 80035c6:	e138      	b.n	800383a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	2203      	movs	r2, #3
 80035ce:	4013      	ands	r3, r2
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d005      	beq.n	80035e0 <HAL_GPIO_Init+0x40>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	4013      	ands	r3, r2
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d130      	bne.n	8003642 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035e6:	697b      	ldr	r3, [r7, #20]
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	2203      	movs	r2, #3
 80035ec:	409a      	lsls	r2, r3
 80035ee:	0013      	movs	r3, r2
 80035f0:	43da      	mvns	r2, r3
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	4013      	ands	r3, r2
 80035f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	68da      	ldr	r2, [r3, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	409a      	lsls	r2, r3
 8003602:	0013      	movs	r3, r2
 8003604:	693a      	ldr	r2, [r7, #16]
 8003606:	4313      	orrs	r3, r2
 8003608:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003616:	2201      	movs	r2, #1
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	409a      	lsls	r2, r3
 800361c:	0013      	movs	r3, r2
 800361e:	43da      	mvns	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4013      	ands	r3, r2
 8003624:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	091b      	lsrs	r3, r3, #4
 800362c:	2201      	movs	r2, #1
 800362e:	401a      	ands	r2, r3
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	693a      	ldr	r2, [r7, #16]
 8003640:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	2203      	movs	r2, #3
 8003648:	4013      	ands	r3, r2
 800364a:	2b03      	cmp	r3, #3
 800364c:	d017      	beq.n	800367e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	005b      	lsls	r3, r3, #1
 8003658:	2203      	movs	r2, #3
 800365a:	409a      	lsls	r2, r3
 800365c:	0013      	movs	r3, r2
 800365e:	43da      	mvns	r2, r3
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	4013      	ands	r3, r2
 8003664:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	005b      	lsls	r3, r3, #1
 800366e:	409a      	lsls	r2, r3
 8003670:	0013      	movs	r3, r2
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	4313      	orrs	r3, r2
 8003676:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	693a      	ldr	r2, [r7, #16]
 800367c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2203      	movs	r2, #3
 8003684:	4013      	ands	r3, r2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d123      	bne.n	80036d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	08da      	lsrs	r2, r3, #3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	3208      	adds	r2, #8
 8003692:	0092      	lsls	r2, r2, #2
 8003694:	58d3      	ldr	r3, [r2, r3]
 8003696:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2207      	movs	r2, #7
 800369c:	4013      	ands	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	220f      	movs	r2, #15
 80036a2:	409a      	lsls	r2, r3
 80036a4:	0013      	movs	r3, r2
 80036a6:	43da      	mvns	r2, r3
 80036a8:	693b      	ldr	r3, [r7, #16]
 80036aa:	4013      	ands	r3, r2
 80036ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	691a      	ldr	r2, [r3, #16]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2107      	movs	r1, #7
 80036b6:	400b      	ands	r3, r1
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	409a      	lsls	r2, r3
 80036bc:	0013      	movs	r3, r2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	08da      	lsrs	r2, r3, #3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	3208      	adds	r2, #8
 80036cc:	0092      	lsls	r2, r2, #2
 80036ce:	6939      	ldr	r1, [r7, #16]
 80036d0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	005b      	lsls	r3, r3, #1
 80036dc:	2203      	movs	r2, #3
 80036de:	409a      	lsls	r2, r3
 80036e0:	0013      	movs	r3, r2
 80036e2:	43da      	mvns	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4013      	ands	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2203      	movs	r2, #3
 80036f0:	401a      	ands	r2, r3
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	409a      	lsls	r2, r3
 80036f8:	0013      	movs	r3, r2
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	23c0      	movs	r3, #192	; 0xc0
 800370c:	029b      	lsls	r3, r3, #10
 800370e:	4013      	ands	r3, r2
 8003710:	d100      	bne.n	8003714 <HAL_GPIO_Init+0x174>
 8003712:	e092      	b.n	800383a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003714:	4a50      	ldr	r2, [pc, #320]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	089b      	lsrs	r3, r3, #2
 800371a:	3318      	adds	r3, #24
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	589b      	ldr	r3, [r3, r2]
 8003720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2203      	movs	r2, #3
 8003726:	4013      	ands	r3, r2
 8003728:	00db      	lsls	r3, r3, #3
 800372a:	220f      	movs	r2, #15
 800372c:	409a      	lsls	r2, r3
 800372e:	0013      	movs	r3, r2
 8003730:	43da      	mvns	r2, r3
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4013      	ands	r3, r2
 8003736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	23a0      	movs	r3, #160	; 0xa0
 800373c:	05db      	lsls	r3, r3, #23
 800373e:	429a      	cmp	r2, r3
 8003740:	d013      	beq.n	800376a <HAL_GPIO_Init+0x1ca>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	4a45      	ldr	r2, [pc, #276]	; (800385c <HAL_GPIO_Init+0x2bc>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d00d      	beq.n	8003766 <HAL_GPIO_Init+0x1c6>
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a44      	ldr	r2, [pc, #272]	; (8003860 <HAL_GPIO_Init+0x2c0>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d007      	beq.n	8003762 <HAL_GPIO_Init+0x1c2>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a43      	ldr	r2, [pc, #268]	; (8003864 <HAL_GPIO_Init+0x2c4>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_GPIO_Init+0x1be>
 800375a:	2303      	movs	r3, #3
 800375c:	e006      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 800375e:	2305      	movs	r3, #5
 8003760:	e004      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 8003762:	2302      	movs	r3, #2
 8003764:	e002      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 8003766:	2301      	movs	r3, #1
 8003768:	e000      	b.n	800376c <HAL_GPIO_Init+0x1cc>
 800376a:	2300      	movs	r3, #0
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	2103      	movs	r1, #3
 8003770:	400a      	ands	r2, r1
 8003772:	00d2      	lsls	r2, r2, #3
 8003774:	4093      	lsls	r3, r2
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800377c:	4936      	ldr	r1, [pc, #216]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	089b      	lsrs	r3, r3, #2
 8003782:	3318      	adds	r3, #24
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800378a:	4b33      	ldr	r3, [pc, #204]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	43da      	mvns	r2, r3
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	4013      	ands	r3, r2
 8003798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685a      	ldr	r2, [r3, #4]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	035b      	lsls	r3, r3, #13
 80037a2:	4013      	ands	r3, r2
 80037a4:	d003      	beq.n	80037ae <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80037ae:	4b2a      	ldr	r3, [pc, #168]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80037b4:	4b28      	ldr	r3, [pc, #160]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	43da      	mvns	r2, r3
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4013      	ands	r3, r2
 80037c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	039b      	lsls	r3, r3, #14
 80037cc:	4013      	ands	r3, r2
 80037ce:	d003      	beq.n	80037d8 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037d8:	4b1f      	ldr	r3, [pc, #124]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 80037e0:	2384      	movs	r3, #132	; 0x84
 80037e2:	58d3      	ldr	r3, [r2, r3]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	43da      	mvns	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	4013      	ands	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	2380      	movs	r3, #128	; 0x80
 80037f6:	029b      	lsls	r3, r3, #10
 80037f8:	4013      	ands	r3, r2
 80037fa:	d003      	beq.n	8003804 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80037fc:	693a      	ldr	r2, [r7, #16]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003804:	4914      	ldr	r1, [pc, #80]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003806:	2284      	movs	r2, #132	; 0x84
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800380c:	4a12      	ldr	r2, [pc, #72]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 800380e:	2380      	movs	r3, #128	; 0x80
 8003810:	58d3      	ldr	r3, [r2, r3]
 8003812:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	43da      	mvns	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4013      	ands	r3, r2
 800381c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	685a      	ldr	r2, [r3, #4]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	025b      	lsls	r3, r3, #9
 8003826:	4013      	ands	r3, r2
 8003828:	d003      	beq.n	8003832 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003832:	4909      	ldr	r1, [pc, #36]	; (8003858 <HAL_GPIO_Init+0x2b8>)
 8003834:	2280      	movs	r2, #128	; 0x80
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3301      	adds	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	40da      	lsrs	r2, r3
 8003848:	1e13      	subs	r3, r2, #0
 800384a:	d000      	beq.n	800384e <HAL_GPIO_Init+0x2ae>
 800384c:	e6b0      	b.n	80035b0 <HAL_GPIO_Init+0x10>
  }
}
 800384e:	46c0      	nop			; (mov r8, r8)
 8003850:	46c0      	nop			; (mov r8, r8)
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	40021800 	.word	0x40021800
 800385c:	50000400 	.word	0x50000400
 8003860:	50000800 	.word	0x50000800
 8003864:	50000c00 	.word	0x50000c00

08003868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	0008      	movs	r0, r1
 8003872:	0011      	movs	r1, r2
 8003874:	1cbb      	adds	r3, r7, #2
 8003876:	1c02      	adds	r2, r0, #0
 8003878:	801a      	strh	r2, [r3, #0]
 800387a:	1c7b      	adds	r3, r7, #1
 800387c:	1c0a      	adds	r2, r1, #0
 800387e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003880:	1c7b      	adds	r3, r7, #1
 8003882:	781b      	ldrb	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d004      	beq.n	8003892 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003888:	1cbb      	adds	r3, r7, #2
 800388a:	881a      	ldrh	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003890:	e003      	b.n	800389a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003892:	1cbb      	adds	r3, r7, #2
 8003894:	881a      	ldrh	r2, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	629a      	str	r2, [r3, #40]	; 0x28
}
 800389a:	46c0      	nop			; (mov r8, r8)
 800389c:	46bd      	mov	sp, r7
 800389e:	b002      	add	sp, #8
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
 80038aa:	000a      	movs	r2, r1
 80038ac:	1cbb      	adds	r3, r7, #2
 80038ae:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80038b6:	1cbb      	adds	r3, r7, #2
 80038b8:	881b      	ldrh	r3, [r3, #0]
 80038ba:	68fa      	ldr	r2, [r7, #12]
 80038bc:	4013      	ands	r3, r2
 80038be:	041a      	lsls	r2, r3, #16
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	43db      	mvns	r3, r3
 80038c4:	1cb9      	adds	r1, r7, #2
 80038c6:	8809      	ldrh	r1, [r1, #0]
 80038c8:	400b      	ands	r3, r1
 80038ca:	431a      	orrs	r2, r3
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	619a      	str	r2, [r3, #24]
}
 80038d0:	46c0      	nop			; (mov r8, r8)
 80038d2:	46bd      	mov	sp, r7
 80038d4:	b004      	add	sp, #16
 80038d6:	bd80      	pop	{r7, pc}

080038d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a19      	ldr	r2, [pc, #100]	; (800394c <HAL_PWREx_ControlVoltageScaling+0x74>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d11f      	bne.n	800393c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038fc:	4b14      	ldr	r3, [pc, #80]	; (8003950 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	0013      	movs	r3, r2
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	189b      	adds	r3, r3, r2
 8003906:	005b      	lsls	r3, r3, #1
 8003908:	4912      	ldr	r1, [pc, #72]	; (8003954 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800390a:	0018      	movs	r0, r3
 800390c:	f7fc fc02 	bl	8000114 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	3301      	adds	r3, #1
 8003914:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003916:	e008      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	3b01      	subs	r3, #1
 8003922:	60fb      	str	r3, [r7, #12]
 8003924:	e001      	b.n	800392a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e009      	b.n	800393e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800392a:	4b07      	ldr	r3, [pc, #28]	; (8003948 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800392c:	695a      	ldr	r2, [r3, #20]
 800392e:	2380      	movs	r3, #128	; 0x80
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	401a      	ands	r2, r3
 8003934:	2380      	movs	r3, #128	; 0x80
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	429a      	cmp	r2, r3
 800393a:	d0ed      	beq.n	8003918 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	0018      	movs	r0, r3
 8003940:	46bd      	mov	sp, r7
 8003942:	b004      	add	sp, #16
 8003944:	bd80      	pop	{r7, pc}
 8003946:	46c0      	nop			; (mov r8, r8)
 8003948:	40007000 	.word	0x40007000
 800394c:	fffff9ff 	.word	0xfffff9ff
 8003950:	2000000c 	.word	0x2000000c
 8003954:	000f4240 	.word	0x000f4240

08003958 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800395c:	4b03      	ldr	r3, [pc, #12]	; (800396c <LL_RCC_GetAPB1Prescaler+0x14>)
 800395e:	689a      	ldr	r2, [r3, #8]
 8003960:	23e0      	movs	r3, #224	; 0xe0
 8003962:	01db      	lsls	r3, r3, #7
 8003964:	4013      	ands	r3, r2
}
 8003966:	0018      	movs	r0, r3
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	40021000 	.word	0x40021000

08003970 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d101      	bne.n	8003982 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e2fe      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2201      	movs	r2, #1
 8003988:	4013      	ands	r3, r2
 800398a:	d100      	bne.n	800398e <HAL_RCC_OscConfig+0x1e>
 800398c:	e07c      	b.n	8003a88 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800398e:	4bc3      	ldr	r3, [pc, #780]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2238      	movs	r2, #56	; 0x38
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003998:	4bc0      	ldr	r3, [pc, #768]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2203      	movs	r2, #3
 800399e:	4013      	ands	r3, r2
 80039a0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b10      	cmp	r3, #16
 80039a6:	d102      	bne.n	80039ae <HAL_RCC_OscConfig+0x3e>
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d002      	beq.n	80039b4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d10b      	bne.n	80039cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039b4:	4bb9      	ldr	r3, [pc, #740]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	2380      	movs	r3, #128	; 0x80
 80039ba:	029b      	lsls	r3, r3, #10
 80039bc:	4013      	ands	r3, r2
 80039be:	d062      	beq.n	8003a86 <HAL_RCC_OscConfig+0x116>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d15e      	bne.n	8003a86 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e2d9      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	025b      	lsls	r3, r3, #9
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d107      	bne.n	80039e8 <HAL_RCC_OscConfig+0x78>
 80039d8:	4bb0      	ldr	r3, [pc, #704]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	4baf      	ldr	r3, [pc, #700]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039de:	2180      	movs	r1, #128	; 0x80
 80039e0:	0249      	lsls	r1, r1, #9
 80039e2:	430a      	orrs	r2, r1
 80039e4:	601a      	str	r2, [r3, #0]
 80039e6:	e020      	b.n	8003a2a <HAL_RCC_OscConfig+0xba>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	23a0      	movs	r3, #160	; 0xa0
 80039ee:	02db      	lsls	r3, r3, #11
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d10e      	bne.n	8003a12 <HAL_RCC_OscConfig+0xa2>
 80039f4:	4ba9      	ldr	r3, [pc, #676]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	4ba8      	ldr	r3, [pc, #672]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 80039fa:	2180      	movs	r1, #128	; 0x80
 80039fc:	02c9      	lsls	r1, r1, #11
 80039fe:	430a      	orrs	r2, r1
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	4ba6      	ldr	r3, [pc, #664]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	4ba5      	ldr	r3, [pc, #660]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a08:	2180      	movs	r1, #128	; 0x80
 8003a0a:	0249      	lsls	r1, r1, #9
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	e00b      	b.n	8003a2a <HAL_RCC_OscConfig+0xba>
 8003a12:	4ba2      	ldr	r3, [pc, #648]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	4ba1      	ldr	r3, [pc, #644]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a18:	49a1      	ldr	r1, [pc, #644]	; (8003ca0 <HAL_RCC_OscConfig+0x330>)
 8003a1a:	400a      	ands	r2, r1
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	4b9f      	ldr	r3, [pc, #636]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	4b9e      	ldr	r3, [pc, #632]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a24:	499f      	ldr	r1, [pc, #636]	; (8003ca4 <HAL_RCC_OscConfig+0x334>)
 8003a26:	400a      	ands	r2, r1
 8003a28:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a32:	f7ff f9af 	bl	8002d94 <HAL_GetTick>
 8003a36:	0003      	movs	r3, r0
 8003a38:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3a:	e008      	b.n	8003a4e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a3c:	f7ff f9aa 	bl	8002d94 <HAL_GetTick>
 8003a40:	0002      	movs	r2, r0
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1ad3      	subs	r3, r2, r3
 8003a46:	2b64      	cmp	r3, #100	; 0x64
 8003a48:	d901      	bls.n	8003a4e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a4a:	2303      	movs	r3, #3
 8003a4c:	e298      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a4e:	4b93      	ldr	r3, [pc, #588]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	2380      	movs	r3, #128	; 0x80
 8003a54:	029b      	lsls	r3, r3, #10
 8003a56:	4013      	ands	r3, r2
 8003a58:	d0f0      	beq.n	8003a3c <HAL_RCC_OscConfig+0xcc>
 8003a5a:	e015      	b.n	8003a88 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a5c:	f7ff f99a 	bl	8002d94 <HAL_GetTick>
 8003a60:	0003      	movs	r3, r0
 8003a62:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a64:	e008      	b.n	8003a78 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a66:	f7ff f995 	bl	8002d94 <HAL_GetTick>
 8003a6a:	0002      	movs	r2, r0
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	2b64      	cmp	r3, #100	; 0x64
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e283      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a78:	4b88      	ldr	r3, [pc, #544]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	2380      	movs	r3, #128	; 0x80
 8003a7e:	029b      	lsls	r3, r3, #10
 8003a80:	4013      	ands	r3, r2
 8003a82:	d1f0      	bne.n	8003a66 <HAL_RCC_OscConfig+0xf6>
 8003a84:	e000      	b.n	8003a88 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a86:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d100      	bne.n	8003a94 <HAL_RCC_OscConfig+0x124>
 8003a92:	e099      	b.n	8003bc8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a94:	4b81      	ldr	r3, [pc, #516]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	2238      	movs	r2, #56	; 0x38
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a9e:	4b7f      	ldr	r3, [pc, #508]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	2203      	movs	r2, #3
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d102      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x144>
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d002      	beq.n	8003aba <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d135      	bne.n	8003b26 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003aba:	4b78      	ldr	r3, [pc, #480]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	2380      	movs	r3, #128	; 0x80
 8003ac0:	00db      	lsls	r3, r3, #3
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d005      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x162>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e256      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad2:	4b72      	ldr	r3, [pc, #456]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a74      	ldr	r2, [pc, #464]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	695b      	ldr	r3, [r3, #20]
 8003ae0:	021a      	lsls	r2, r3, #8
 8003ae2:	4b6e      	ldr	r3, [pc, #440]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d112      	bne.n	8003b14 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003aee:	4b6b      	ldr	r3, [pc, #428]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003af4:	4013      	ands	r3, r2
 8003af6:	0019      	movs	r1, r3
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	691a      	ldr	r2, [r3, #16]
 8003afc:	4b67      	ldr	r3, [pc, #412]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003afe:	430a      	orrs	r2, r1
 8003b00:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b02:	4b66      	ldr	r3, [pc, #408]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	0adb      	lsrs	r3, r3, #11
 8003b08:	2207      	movs	r2, #7
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	4a68      	ldr	r2, [pc, #416]	; (8003cb0 <HAL_RCC_OscConfig+0x340>)
 8003b0e:	40da      	lsrs	r2, r3
 8003b10:	4b68      	ldr	r3, [pc, #416]	; (8003cb4 <HAL_RCC_OscConfig+0x344>)
 8003b12:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b14:	4b68      	ldr	r3, [pc, #416]	; (8003cb8 <HAL_RCC_OscConfig+0x348>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	0018      	movs	r0, r3
 8003b1a:	f7ff f8df 	bl	8002cdc <HAL_InitTick>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d051      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e22c      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d030      	beq.n	8003b90 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b2e:	4b5b      	ldr	r3, [pc, #364]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a5e      	ldr	r2, [pc, #376]	; (8003cac <HAL_RCC_OscConfig+0x33c>)
 8003b34:	4013      	ands	r3, r2
 8003b36:	0019      	movs	r1, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	691a      	ldr	r2, [r3, #16]
 8003b3c:	4b57      	ldr	r3, [pc, #348]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b42:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	4b55      	ldr	r3, [pc, #340]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b48:	2180      	movs	r1, #128	; 0x80
 8003b4a:	0049      	lsls	r1, r1, #1
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7ff f920 	bl	8002d94 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7ff f91b 	bl	8002d94 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e209      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b6c:	4b4b      	ldr	r3, [pc, #300]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	d0f0      	beq.n	8003b5a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b78:	4b48      	ldr	r3, [pc, #288]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	4a4a      	ldr	r2, [pc, #296]	; (8003ca8 <HAL_RCC_OscConfig+0x338>)
 8003b7e:	4013      	ands	r3, r2
 8003b80:	0019      	movs	r1, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	021a      	lsls	r2, r3, #8
 8003b88:	4b44      	ldr	r3, [pc, #272]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	605a      	str	r2, [r3, #4]
 8003b8e:	e01b      	b.n	8003bc8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b90:	4b42      	ldr	r3, [pc, #264]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	4b41      	ldr	r3, [pc, #260]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003b96:	4949      	ldr	r1, [pc, #292]	; (8003cbc <HAL_RCC_OscConfig+0x34c>)
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b9c:	f7ff f8fa 	bl	8002d94 <HAL_GetTick>
 8003ba0:	0003      	movs	r3, r0
 8003ba2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ba6:	f7ff f8f5 	bl	8002d94 <HAL_GetTick>
 8003baa:	0002      	movs	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1e3      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bb8:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	2380      	movs	r3, #128	; 0x80
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	d1f0      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x236>
 8003bc4:	e000      	b.n	8003bc8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003bc6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	4013      	ands	r3, r2
 8003bd0:	d047      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bd2:	4b32      	ldr	r3, [pc, #200]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2238      	movs	r2, #56	; 0x38
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b18      	cmp	r3, #24
 8003bdc:	d10a      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003bde:	4b2f      	ldr	r3, [pc, #188]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be2:	2202      	movs	r2, #2
 8003be4:	4013      	ands	r3, r2
 8003be6:	d03c      	beq.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	699b      	ldr	r3, [r3, #24]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d138      	bne.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e1c5      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	699b      	ldr	r3, [r3, #24]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d019      	beq.n	8003c30 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bfc:	4b27      	ldr	r3, [pc, #156]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c00:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c02:	2101      	movs	r1, #1
 8003c04:	430a      	orrs	r2, r1
 8003c06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c08:	f7ff f8c4 	bl	8002d94 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c10:	e008      	b.n	8003c24 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c12:	f7ff f8bf 	bl	8002d94 <HAL_GetTick>
 8003c16:	0002      	movs	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e1ad      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c24:	4b1d      	ldr	r3, [pc, #116]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c28:	2202      	movs	r2, #2
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	d0f1      	beq.n	8003c12 <HAL_RCC_OscConfig+0x2a2>
 8003c2e:	e018      	b.n	8003c62 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c36:	2101      	movs	r1, #1
 8003c38:	438a      	bics	r2, r1
 8003c3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7ff f8aa 	bl	8002d94 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c46:	f7ff f8a5 	bl	8002d94 <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e193      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5c:	2202      	movs	r2, #2
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d1f1      	bne.n	8003c46 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2204      	movs	r2, #4
 8003c68:	4013      	ands	r3, r2
 8003c6a:	d100      	bne.n	8003c6e <HAL_RCC_OscConfig+0x2fe>
 8003c6c:	e0c6      	b.n	8003dfc <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c6e:	231f      	movs	r3, #31
 8003c70:	18fb      	adds	r3, r7, r3
 8003c72:	2200      	movs	r2, #0
 8003c74:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	2238      	movs	r2, #56	; 0x38
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b20      	cmp	r3, #32
 8003c80:	d11e      	bne.n	8003cc0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c82:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <HAL_RCC_OscConfig+0x32c>)
 8003c84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c86:	2202      	movs	r2, #2
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <HAL_RCC_OscConfig+0x31e>
 8003c8c:	e0b6      	b.n	8003dfc <HAL_RCC_OscConfig+0x48c>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d000      	beq.n	8003c98 <HAL_RCC_OscConfig+0x328>
 8003c96:	e0b1      	b.n	8003dfc <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e171      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
 8003c9c:	40021000 	.word	0x40021000
 8003ca0:	fffeffff 	.word	0xfffeffff
 8003ca4:	fffbffff 	.word	0xfffbffff
 8003ca8:	ffff80ff 	.word	0xffff80ff
 8003cac:	ffffc7ff 	.word	0xffffc7ff
 8003cb0:	00f42400 	.word	0x00f42400
 8003cb4:	2000000c 	.word	0x2000000c
 8003cb8:	20000010 	.word	0x20000010
 8003cbc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003cc0:	4bb1      	ldr	r3, [pc, #708]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003cc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc4:	2380      	movs	r3, #128	; 0x80
 8003cc6:	055b      	lsls	r3, r3, #21
 8003cc8:	4013      	ands	r3, r2
 8003cca:	d101      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x360>
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x362>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d011      	beq.n	8003cfa <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003cd6:	4bac      	ldr	r3, [pc, #688]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003cd8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cda:	4bab      	ldr	r3, [pc, #684]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0549      	lsls	r1, r1, #21
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	63da      	str	r2, [r3, #60]	; 0x3c
 8003ce4:	4ba8      	ldr	r3, [pc, #672]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003ce6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	055b      	lsls	r3, r3, #21
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003cf2:	231f      	movs	r3, #31
 8003cf4:	18fb      	adds	r3, r7, r3
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cfa:	4ba4      	ldr	r3, [pc, #656]	; (8003f8c <HAL_RCC_OscConfig+0x61c>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	2380      	movs	r3, #128	; 0x80
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	4013      	ands	r3, r2
 8003d04:	d11a      	bne.n	8003d3c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d06:	4ba1      	ldr	r3, [pc, #644]	; (8003f8c <HAL_RCC_OscConfig+0x61c>)
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	4ba0      	ldr	r3, [pc, #640]	; (8003f8c <HAL_RCC_OscConfig+0x61c>)
 8003d0c:	2180      	movs	r1, #128	; 0x80
 8003d0e:	0049      	lsls	r1, r1, #1
 8003d10:	430a      	orrs	r2, r1
 8003d12:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d14:	f7ff f83e 	bl	8002d94 <HAL_GetTick>
 8003d18:	0003      	movs	r3, r0
 8003d1a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d1e:	f7ff f839 	bl	8002d94 <HAL_GetTick>
 8003d22:	0002      	movs	r2, r0
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e127      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d30:	4b96      	ldr	r3, [pc, #600]	; (8003f8c <HAL_RCC_OscConfig+0x61c>)
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	2380      	movs	r3, #128	; 0x80
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	4013      	ands	r3, r2
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d106      	bne.n	8003d52 <HAL_RCC_OscConfig+0x3e2>
 8003d44:	4b90      	ldr	r3, [pc, #576]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d46:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d48:	4b8f      	ldr	r3, [pc, #572]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d4a:	2101      	movs	r1, #1
 8003d4c:	430a      	orrs	r2, r1
 8003d4e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d50:	e01c      	b.n	8003d8c <HAL_RCC_OscConfig+0x41c>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	2b05      	cmp	r3, #5
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x404>
 8003d5a:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d5e:	4b8a      	ldr	r3, [pc, #552]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d60:	2104      	movs	r1, #4
 8003d62:	430a      	orrs	r2, r1
 8003d64:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d68:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d6a:	4b87      	ldr	r3, [pc, #540]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0x41c>
 8003d74:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d76:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d78:	4b83      	ldr	r3, [pc, #524]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	438a      	bics	r2, r1
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d80:	4b81      	ldr	r3, [pc, #516]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d82:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d84:	4b80      	ldr	r3, [pc, #512]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003d86:	2104      	movs	r1, #4
 8003d88:	438a      	bics	r2, r1
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d014      	beq.n	8003dbe <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fe fffe 	bl	8002d94 <HAL_GetTick>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d9c:	e009      	b.n	8003db2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe fff9 	bl	8002d94 <HAL_GetTick>
 8003da2:	0002      	movs	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	4a79      	ldr	r2, [pc, #484]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0e6      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003db2:	4b75      	ldr	r3, [pc, #468]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003db4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db6:	2202      	movs	r2, #2
 8003db8:	4013      	ands	r3, r2
 8003dba:	d0f0      	beq.n	8003d9e <HAL_RCC_OscConfig+0x42e>
 8003dbc:	e013      	b.n	8003de6 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbe:	f7fe ffe9 	bl	8002d94 <HAL_GetTick>
 8003dc2:	0003      	movs	r3, r0
 8003dc4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dc6:	e009      	b.n	8003ddc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dc8:	f7fe ffe4 	bl	8002d94 <HAL_GetTick>
 8003dcc:	0002      	movs	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	4a6f      	ldr	r2, [pc, #444]	; (8003f90 <HAL_RCC_OscConfig+0x620>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e0d1      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ddc:	4b6a      	ldr	r3, [pc, #424]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003de0:	2202      	movs	r2, #2
 8003de2:	4013      	ands	r3, r2
 8003de4:	d1f0      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003de6:	231f      	movs	r3, #31
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d105      	bne.n	8003dfc <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003df0:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003df2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003df4:	4b64      	ldr	r3, [pc, #400]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003df6:	4967      	ldr	r1, [pc, #412]	; (8003f94 <HAL_RCC_OscConfig+0x624>)
 8003df8:	400a      	ands	r2, r1
 8003dfa:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	69db      	ldr	r3, [r3, #28]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d100      	bne.n	8003e06 <HAL_RCC_OscConfig+0x496>
 8003e04:	e0bb      	b.n	8003f7e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e06:	4b60      	ldr	r3, [pc, #384]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	2238      	movs	r2, #56	; 0x38
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	2b10      	cmp	r3, #16
 8003e10:	d100      	bne.n	8003e14 <HAL_RCC_OscConfig+0x4a4>
 8003e12:	e07b      	b.n	8003f0c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	69db      	ldr	r3, [r3, #28]
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d156      	bne.n	8003eca <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e1c:	4b5a      	ldr	r3, [pc, #360]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	4b59      	ldr	r3, [pc, #356]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e22:	495d      	ldr	r1, [pc, #372]	; (8003f98 <HAL_RCC_OscConfig+0x628>)
 8003e24:	400a      	ands	r2, r1
 8003e26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fe ffb4 	bl	8002d94 <HAL_GetTick>
 8003e2c:	0003      	movs	r3, r0
 8003e2e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e30:	e008      	b.n	8003e44 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e32:	f7fe ffaf 	bl	8002d94 <HAL_GetTick>
 8003e36:	0002      	movs	r2, r0
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d901      	bls.n	8003e44 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e40:	2303      	movs	r3, #3
 8003e42:	e09d      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e44:	4b50      	ldr	r3, [pc, #320]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	2380      	movs	r3, #128	; 0x80
 8003e4a:	049b      	lsls	r3, r3, #18
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	d1f0      	bne.n	8003e32 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e50:	4b4d      	ldr	r3, [pc, #308]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	4a51      	ldr	r2, [pc, #324]	; (8003f9c <HAL_RCC_OscConfig+0x62c>)
 8003e56:	4013      	ands	r3, r2
 8003e58:	0019      	movs	r1, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1a      	ldr	r2, [r3, #32]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	021b      	lsls	r3, r3, #8
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e70:	431a      	orrs	r2, r3
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7c:	431a      	orrs	r2, r3
 8003e7e:	4b42      	ldr	r3, [pc, #264]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e80:	430a      	orrs	r2, r1
 8003e82:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e84:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	4b3f      	ldr	r3, [pc, #252]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	0449      	lsls	r1, r1, #17
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e92:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e94:	68da      	ldr	r2, [r3, #12]
 8003e96:	4b3c      	ldr	r3, [pc, #240]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	0549      	lsls	r1, r1, #21
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fe ff78 	bl	8002d94 <HAL_GetTick>
 8003ea4:	0003      	movs	r3, r0
 8003ea6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea8:	e008      	b.n	8003ebc <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eaa:	f7fe ff73 	bl	8002d94 <HAL_GetTick>
 8003eae:	0002      	movs	r2, r0
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d901      	bls.n	8003ebc <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e061      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ebc:	4b32      	ldr	r3, [pc, #200]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	2380      	movs	r3, #128	; 0x80
 8003ec2:	049b      	lsls	r3, r3, #18
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	d0f0      	beq.n	8003eaa <HAL_RCC_OscConfig+0x53a>
 8003ec8:	e059      	b.n	8003f7e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eca:	4b2f      	ldr	r3, [pc, #188]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003ed0:	4931      	ldr	r1, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x628>)
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed6:	f7fe ff5d 	bl	8002d94 <HAL_GetTick>
 8003eda:	0003      	movs	r3, r0
 8003edc:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe ff58 	bl	8002d94 <HAL_GetTick>
 8003ee4:	0002      	movs	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e046      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	2380      	movs	r3, #128	; 0x80
 8003ef8:	049b      	lsls	r3, r3, #18
 8003efa:	4013      	ands	r3, r2
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	4b21      	ldr	r3, [pc, #132]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003f04:	4926      	ldr	r1, [pc, #152]	; (8003fa0 <HAL_RCC_OscConfig+0x630>)
 8003f06:	400a      	ands	r2, r1
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	e038      	b.n	8003f7e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
 8003f10:	2b01      	cmp	r3, #1
 8003f12:	d101      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	e033      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <HAL_RCC_OscConfig+0x618>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2203      	movs	r2, #3
 8003f22:	401a      	ands	r2, r3
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d126      	bne.n	8003f7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2270      	movs	r2, #112	; 0x70
 8003f30:	401a      	ands	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d11f      	bne.n	8003f7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	23fe      	movs	r3, #254	; 0xfe
 8003f3e:	01db      	lsls	r3, r3, #7
 8003f40:	401a      	ands	r2, r3
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d116      	bne.n	8003f7a <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f4c:	697a      	ldr	r2, [r7, #20]
 8003f4e:	23f8      	movs	r3, #248	; 0xf8
 8003f50:	039b      	lsls	r3, r3, #14
 8003f52:	401a      	ands	r2, r3
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d10e      	bne.n	8003f7a <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f5c:	697a      	ldr	r2, [r7, #20]
 8003f5e:	23e0      	movs	r3, #224	; 0xe0
 8003f60:	051b      	lsls	r3, r3, #20
 8003f62:	401a      	ands	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d106      	bne.n	8003f7a <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	0f5b      	lsrs	r3, r3, #29
 8003f70:	075a      	lsls	r2, r3, #29
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e000      	b.n	8003f80 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	0018      	movs	r0, r3
 8003f82:	46bd      	mov	sp, r7
 8003f84:	b008      	add	sp, #32
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	00001388 	.word	0x00001388
 8003f94:	efffffff 	.word	0xefffffff
 8003f98:	feffffff 	.word	0xfeffffff
 8003f9c:	11c1808c 	.word	0x11c1808c
 8003fa0:	eefefffc 	.word	0xeefefffc

08003fa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003faa:	4b3c      	ldr	r3, [pc, #240]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	2238      	movs	r2, #56	; 0x38
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	d10f      	bne.n	8003fd4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003fb4:	4b39      	ldr	r3, [pc, #228]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	0adb      	lsrs	r3, r3, #11
 8003fba:	2207      	movs	r2, #7
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	409a      	lsls	r2, r3
 8003fc2:	0013      	movs	r3, r2
 8003fc4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003fc6:	6839      	ldr	r1, [r7, #0]
 8003fc8:	4835      	ldr	r0, [pc, #212]	; (80040a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003fca:	f7fc f8a3 	bl	8000114 <__udivsi3>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	613b      	str	r3, [r7, #16]
 8003fd2:	e05d      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003fd4:	4b31      	ldr	r3, [pc, #196]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	2238      	movs	r2, #56	; 0x38
 8003fda:	4013      	ands	r3, r2
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d102      	bne.n	8003fe6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8003fe2:	613b      	str	r3, [r7, #16]
 8003fe4:	e054      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe6:	4b2d      	ldr	r3, [pc, #180]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	2238      	movs	r2, #56	; 0x38
 8003fec:	4013      	ands	r3, r2
 8003fee:	2b10      	cmp	r3, #16
 8003ff0:	d138      	bne.n	8004064 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003ff2:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	2203      	movs	r2, #3
 8003ff8:	4013      	ands	r3, r2
 8003ffa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003ffc:	4b27      	ldr	r3, [pc, #156]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	091b      	lsrs	r3, r3, #4
 8004002:	2207      	movs	r2, #7
 8004004:	4013      	ands	r3, r2
 8004006:	3301      	adds	r3, #1
 8004008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2b03      	cmp	r3, #3
 800400e:	d10d      	bne.n	800402c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004010:	68b9      	ldr	r1, [r7, #8]
 8004012:	4824      	ldr	r0, [pc, #144]	; (80040a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8004014:	f7fc f87e 	bl	8000114 <__udivsi3>
 8004018:	0003      	movs	r3, r0
 800401a:	0019      	movs	r1, r3
 800401c:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	227f      	movs	r2, #127	; 0x7f
 8004024:	4013      	ands	r3, r2
 8004026:	434b      	muls	r3, r1
 8004028:	617b      	str	r3, [r7, #20]
        break;
 800402a:	e00d      	b.n	8004048 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800402c:	68b9      	ldr	r1, [r7, #8]
 800402e:	481c      	ldr	r0, [pc, #112]	; (80040a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004030:	f7fc f870 	bl	8000114 <__udivsi3>
 8004034:	0003      	movs	r3, r0
 8004036:	0019      	movs	r1, r3
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	227f      	movs	r2, #127	; 0x7f
 8004040:	4013      	ands	r3, r2
 8004042:	434b      	muls	r3, r1
 8004044:	617b      	str	r3, [r7, #20]
        break;
 8004046:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004048:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	0f5b      	lsrs	r3, r3, #29
 800404e:	2207      	movs	r2, #7
 8004050:	4013      	ands	r3, r2
 8004052:	3301      	adds	r3, #1
 8004054:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	6978      	ldr	r0, [r7, #20]
 800405a:	f7fc f85b 	bl	8000114 <__udivsi3>
 800405e:	0003      	movs	r3, r0
 8004060:	613b      	str	r3, [r7, #16]
 8004062:	e015      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004064:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	2238      	movs	r2, #56	; 0x38
 800406a:	4013      	ands	r3, r2
 800406c:	2b20      	cmp	r3, #32
 800406e:	d103      	bne.n	8004078 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004070:	2380      	movs	r3, #128	; 0x80
 8004072:	021b      	lsls	r3, r3, #8
 8004074:	613b      	str	r3, [r7, #16]
 8004076:	e00b      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004078:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_RCC_GetSysClockFreq+0xf8>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2238      	movs	r2, #56	; 0x38
 800407e:	4013      	ands	r3, r2
 8004080:	2b18      	cmp	r3, #24
 8004082:	d103      	bne.n	800408c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004084:	23fa      	movs	r3, #250	; 0xfa
 8004086:	01db      	lsls	r3, r3, #7
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	e001      	b.n	8004090 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004090:	693b      	ldr	r3, [r7, #16]
}
 8004092:	0018      	movs	r0, r3
 8004094:	46bd      	mov	sp, r7
 8004096:	b006      	add	sp, #24
 8004098:	bd80      	pop	{r7, pc}
 800409a:	46c0      	nop			; (mov r8, r8)
 800409c:	40021000 	.word	0x40021000
 80040a0:	00f42400 	.word	0x00f42400
 80040a4:	007a1200 	.word	0x007a1200

080040a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040ac:	4b02      	ldr	r3, [pc, #8]	; (80040b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80040ae:	681b      	ldr	r3, [r3, #0]
}
 80040b0:	0018      	movs	r0, r3
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	2000000c 	.word	0x2000000c

080040bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040bc:	b5b0      	push	{r4, r5, r7, lr}
 80040be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80040c0:	f7ff fff2 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80040c4:	0004      	movs	r4, r0
 80040c6:	f7ff fc47 	bl	8003958 <LL_RCC_GetAPB1Prescaler>
 80040ca:	0003      	movs	r3, r0
 80040cc:	0b1a      	lsrs	r2, r3, #12
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80040d0:	0092      	lsls	r2, r2, #2
 80040d2:	58d3      	ldr	r3, [r2, r3]
 80040d4:	221f      	movs	r2, #31
 80040d6:	4013      	ands	r3, r2
 80040d8:	40dc      	lsrs	r4, r3
 80040da:	0023      	movs	r3, r4
}
 80040dc:	0018      	movs	r0, r3
 80040de:	46bd      	mov	sp, r7
 80040e0:	bdb0      	pop	{r4, r5, r7, pc}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	08005fe8 	.word	0x08005fe8

080040e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e055      	b.n	80041a6 <HAL_UART_Init+0xbe>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2288      	movs	r2, #136	; 0x88
 80040fe:	589b      	ldr	r3, [r3, r2]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d116      	bne.n	8004132 <HAL_UART_Init+0x4a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2284      	movs	r2, #132	; 0x84
 8004108:	2100      	movs	r1, #0
 800410a:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	0018      	movs	r0, r3
 8004110:	f000 fcb2 	bl	8004a78 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	22c4      	movs	r2, #196	; 0xc4
 8004118:	589b      	ldr	r3, [r3, r2]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d103      	bne.n	8004126 <HAL_UART_Init+0x3e>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	21c4      	movs	r1, #196	; 0xc4
 8004122:	4a23      	ldr	r2, [pc, #140]	; (80041b0 <HAL_UART_Init+0xc8>)
 8004124:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	22c4      	movs	r2, #196	; 0xc4
 800412a:	589b      	ldr	r3, [r3, r2]
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	0010      	movs	r0, r2
 8004130:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2288      	movs	r2, #136	; 0x88
 8004136:	2124      	movs	r1, #36	; 0x24
 8004138:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2101      	movs	r1, #1
 8004146:	438a      	bics	r2, r1
 8004148:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	0018      	movs	r0, r3
 800414e:	f000 fce3 	bl	8004b18 <UART_SetConfig>
 8004152:	0003      	movs	r3, r0
 8004154:	2b01      	cmp	r3, #1
 8004156:	d101      	bne.n	800415c <HAL_UART_Init+0x74>
  {
    return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e024      	b.n	80041a6 <HAL_UART_Init+0xbe>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_UART_Init+0x84>
  {
    UART_AdvFeatureConfig(huart);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	0018      	movs	r0, r3
 8004168:	f000 ff4e 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685a      	ldr	r2, [r3, #4]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	490f      	ldr	r1, [pc, #60]	; (80041b4 <HAL_UART_Init+0xcc>)
 8004178:	400a      	ands	r2, r1
 800417a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	689a      	ldr	r2, [r3, #8]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	212a      	movs	r1, #42	; 0x2a
 8004188:	438a      	bics	r2, r1
 800418a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2101      	movs	r1, #1
 8004198:	430a      	orrs	r2, r1
 800419a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	0018      	movs	r0, r3
 80041a0:	f000 ffe6 	bl	8005170 <UART_CheckIdleState>
 80041a4:	0003      	movs	r3, r0
}
 80041a6:	0018      	movs	r0, r3
 80041a8:	46bd      	mov	sp, r7
 80041aa:	b002      	add	sp, #8
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	080029fd 	.word	0x080029fd
 80041b4:	ffffb7ff 	.word	0xffffb7ff

080041b8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b088      	sub	sp, #32
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	1dbb      	adds	r3, r7, #6
 80041c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2288      	movs	r2, #136	; 0x88
 80041ca:	589b      	ldr	r3, [r3, r2]
 80041cc:	2b20      	cmp	r3, #32
 80041ce:	d000      	beq.n	80041d2 <HAL_UART_Transmit_DMA+0x1a>
 80041d0:	e079      	b.n	80042c6 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_UART_Transmit_DMA+0x28>
 80041d8:	1dbb      	adds	r3, r7, #6
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e071      	b.n	80042c8 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	2380      	movs	r3, #128	; 0x80
 80041ea:	015b      	lsls	r3, r3, #5
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d109      	bne.n	8004204 <HAL_UART_Transmit_DMA+0x4c>
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d105      	bne.n	8004204 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	2201      	movs	r2, #1
 80041fc:	4013      	ands	r3, r2
 80041fe:	d001      	beq.n	8004204 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e061      	b.n	80042c8 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	1dba      	adds	r2, r7, #6
 800420e:	2154      	movs	r1, #84	; 0x54
 8004210:	8812      	ldrh	r2, [r2, #0]
 8004212:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1dba      	adds	r2, r7, #6
 8004218:	2156      	movs	r1, #86	; 0x56
 800421a:	8812      	ldrh	r2, [r2, #0]
 800421c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2290      	movs	r2, #144	; 0x90
 8004222:	2100      	movs	r1, #0
 8004224:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2288      	movs	r2, #136	; 0x88
 800422a:	2121      	movs	r1, #33	; 0x21
 800422c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004232:	2b00      	cmp	r3, #0
 8004234:	d028      	beq.n	8004288 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800423a:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <HAL_UART_Transmit_DMA+0x118>)
 800423c:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004242:	4a24      	ldr	r2, [pc, #144]	; (80042d4 <HAL_UART_Transmit_DMA+0x11c>)
 8004244:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800424a:	4a23      	ldr	r2, [pc, #140]	; (80042d8 <HAL_UART_Transmit_DMA+0x120>)
 800424c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004252:	2200      	movs	r2, #0
 8004254:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	0019      	movs	r1, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3328      	adds	r3, #40	; 0x28
 8004266:	001a      	movs	r2, r3
 8004268:	1dbb      	adds	r3, r7, #6
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	f7fe ff04 	bl	8003078 <HAL_DMA_Start_IT>
 8004270:	1e03      	subs	r3, r0, #0
 8004272:	d009      	beq.n	8004288 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2290      	movs	r2, #144	; 0x90
 8004278:	2110      	movs	r1, #16
 800427a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2288      	movs	r2, #136	; 0x88
 8004280:	2120      	movs	r1, #32
 8004282:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e01f      	b.n	80042c8 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2240      	movs	r2, #64	; 0x40
 800428e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004290:	f3ef 8310 	mrs	r3, PRIMASK
 8004294:	613b      	str	r3, [r7, #16]
  return(result);
 8004296:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004298:	61fb      	str	r3, [r7, #28]
 800429a:	2301      	movs	r3, #1
 800429c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	430a      	orrs	r2, r1
 80042b4:	609a      	str	r2, [r3, #8]
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b008      	add	sp, #32
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	08005635 	.word	0x08005635
 80042d4:	080056d1 	.word	0x080056d1
 80042d8:	08005871 	.word	0x08005871

080042dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	60f8      	str	r0, [r7, #12]
 80042e4:	60b9      	str	r1, [r7, #8]
 80042e6:	1dbb      	adds	r3, r7, #6
 80042e8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	228c      	movs	r2, #140	; 0x8c
 80042ee:	589b      	ldr	r3, [r3, r2]
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d14a      	bne.n	800438a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_UART_Receive_DMA+0x26>
 80042fa:	1dbb      	adds	r3, r7, #6
 80042fc:	881b      	ldrh	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d101      	bne.n	8004306 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e042      	b.n	800438c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689a      	ldr	r2, [r3, #8]
 800430a:	2380      	movs	r3, #128	; 0x80
 800430c:	015b      	lsls	r3, r3, #5
 800430e:	429a      	cmp	r2, r3
 8004310:	d109      	bne.n	8004326 <HAL_UART_Receive_DMA+0x4a>
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	691b      	ldr	r3, [r3, #16]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	2201      	movs	r2, #1
 800431e:	4013      	ands	r3, r2
 8004320:	d001      	beq.n	8004326 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8004322:	2301      	movs	r3, #1
 8004324:	e032      	b.n	800438c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a18      	ldr	r2, [pc, #96]	; (8004394 <HAL_UART_Receive_DMA+0xb8>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d020      	beq.n	8004378 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	685a      	ldr	r2, [r3, #4]
 800433c:	2380      	movs	r3, #128	; 0x80
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	4013      	ands	r3, r2
 8004342:	d019      	beq.n	8004378 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004344:	f3ef 8310 	mrs	r3, PRIMASK
 8004348:	613b      	str	r3, [r7, #16]
  return(result);
 800434a:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800434c:	61fb      	str	r3, [r7, #28]
 800434e:	2301      	movs	r3, #1
 8004350:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f383 8810 	msr	PRIMASK, r3
}
 8004358:	46c0      	nop			; (mov r8, r8)
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	2180      	movs	r1, #128	; 0x80
 8004366:	04c9      	lsls	r1, r1, #19
 8004368:	430a      	orrs	r2, r1
 800436a:	601a      	str	r2, [r3, #0]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004378:	1dbb      	adds	r3, r7, #6
 800437a:	881a      	ldrh	r2, [r3, #0]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	0018      	movs	r0, r3
 8004382:	f001 f80b 	bl	800539c <UART_Start_Receive_DMA>
 8004386:	0003      	movs	r3, r0
 8004388:	e000      	b.n	800438c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
  }
}
 800438c:	0018      	movs	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	b008      	add	sp, #32
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40008000 	.word	0x40008000

08004398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004398:	b5b0      	push	{r4, r5, r7, lr}
 800439a:	b0aa      	sub	sp, #168	; 0xa8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	69db      	ldr	r3, [r3, #28]
 80043a6:	22a4      	movs	r2, #164	; 0xa4
 80043a8:	18b9      	adds	r1, r7, r2
 80043aa:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	20a0      	movs	r0, #160	; 0xa0
 80043b4:	1839      	adds	r1, r7, r0
 80043b6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	249c      	movs	r4, #156	; 0x9c
 80043c0:	1939      	adds	r1, r7, r4
 80043c2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80043c4:	0011      	movs	r1, r2
 80043c6:	18bb      	adds	r3, r7, r2
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4aa5      	ldr	r2, [pc, #660]	; (8004660 <HAL_UART_IRQHandler+0x2c8>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	2298      	movs	r2, #152	; 0x98
 80043d0:	18bd      	adds	r5, r7, r2
 80043d2:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80043d4:	18bb      	adds	r3, r7, r2
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d11a      	bne.n	8004412 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80043dc:	187b      	adds	r3, r7, r1
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2220      	movs	r2, #32
 80043e2:	4013      	ands	r3, r2
 80043e4:	d015      	beq.n	8004412 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80043e6:	183b      	adds	r3, r7, r0
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2220      	movs	r2, #32
 80043ec:	4013      	ands	r3, r2
 80043ee:	d105      	bne.n	80043fc <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80043f0:	193b      	adds	r3, r7, r4
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	2380      	movs	r3, #128	; 0x80
 80043f6:	055b      	lsls	r3, r3, #21
 80043f8:	4013      	ands	r3, r2
 80043fa:	d00a      	beq.n	8004412 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004400:	2b00      	cmp	r3, #0
 8004402:	d100      	bne.n	8004406 <HAL_UART_IRQHandler+0x6e>
 8004404:	e2ea      	b.n	80049dc <HAL_UART_IRQHandler+0x644>
      {
        huart->RxISR(huart);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	0010      	movs	r0, r2
 800440e:	4798      	blx	r3
      }
      return;
 8004410:	e2e4      	b.n	80049dc <HAL_UART_IRQHandler+0x644>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004412:	2398      	movs	r3, #152	; 0x98
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d100      	bne.n	800441e <HAL_UART_IRQHandler+0x86>
 800441c:	e128      	b.n	8004670 <HAL_UART_IRQHandler+0x2d8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800441e:	239c      	movs	r3, #156	; 0x9c
 8004420:	18fb      	adds	r3, r7, r3
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a8f      	ldr	r2, [pc, #572]	; (8004664 <HAL_UART_IRQHandler+0x2cc>)
 8004426:	4013      	ands	r3, r2
 8004428:	d106      	bne.n	8004438 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800442a:	23a0      	movs	r3, #160	; 0xa0
 800442c:	18fb      	adds	r3, r7, r3
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a8d      	ldr	r2, [pc, #564]	; (8004668 <HAL_UART_IRQHandler+0x2d0>)
 8004432:	4013      	ands	r3, r2
 8004434:	d100      	bne.n	8004438 <HAL_UART_IRQHandler+0xa0>
 8004436:	e11b      	b.n	8004670 <HAL_UART_IRQHandler+0x2d8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004438:	23a4      	movs	r3, #164	; 0xa4
 800443a:	18fb      	adds	r3, r7, r3
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2201      	movs	r2, #1
 8004440:	4013      	ands	r3, r2
 8004442:	d012      	beq.n	800446a <HAL_UART_IRQHandler+0xd2>
 8004444:	23a0      	movs	r3, #160	; 0xa0
 8004446:	18fb      	adds	r3, r7, r3
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	2380      	movs	r3, #128	; 0x80
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	4013      	ands	r3, r2
 8004450:	d00b      	beq.n	800446a <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	2201      	movs	r2, #1
 8004458:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2290      	movs	r2, #144	; 0x90
 800445e:	589b      	ldr	r3, [r3, r2]
 8004460:	2201      	movs	r2, #1
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2190      	movs	r1, #144	; 0x90
 8004468:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800446a:	23a4      	movs	r3, #164	; 0xa4
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	2202      	movs	r2, #2
 8004472:	4013      	ands	r3, r2
 8004474:	d011      	beq.n	800449a <HAL_UART_IRQHandler+0x102>
 8004476:	239c      	movs	r3, #156	; 0x9c
 8004478:	18fb      	adds	r3, r7, r3
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2201      	movs	r2, #1
 800447e:	4013      	ands	r3, r2
 8004480:	d00b      	beq.n	800449a <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2202      	movs	r2, #2
 8004488:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2290      	movs	r2, #144	; 0x90
 800448e:	589b      	ldr	r3, [r3, r2]
 8004490:	2204      	movs	r2, #4
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2190      	movs	r1, #144	; 0x90
 8004498:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800449a:	23a4      	movs	r3, #164	; 0xa4
 800449c:	18fb      	adds	r3, r7, r3
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	2204      	movs	r2, #4
 80044a2:	4013      	ands	r3, r2
 80044a4:	d011      	beq.n	80044ca <HAL_UART_IRQHandler+0x132>
 80044a6:	239c      	movs	r3, #156	; 0x9c
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2201      	movs	r2, #1
 80044ae:	4013      	ands	r3, r2
 80044b0:	d00b      	beq.n	80044ca <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2204      	movs	r2, #4
 80044b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2290      	movs	r2, #144	; 0x90
 80044be:	589b      	ldr	r3, [r3, r2]
 80044c0:	2202      	movs	r2, #2
 80044c2:	431a      	orrs	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2190      	movs	r1, #144	; 0x90
 80044c8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80044ca:	23a4      	movs	r3, #164	; 0xa4
 80044cc:	18fb      	adds	r3, r7, r3
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2208      	movs	r2, #8
 80044d2:	4013      	ands	r3, r2
 80044d4:	d017      	beq.n	8004506 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044d6:	23a0      	movs	r3, #160	; 0xa0
 80044d8:	18fb      	adds	r3, r7, r3
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	2220      	movs	r2, #32
 80044de:	4013      	ands	r3, r2
 80044e0:	d105      	bne.n	80044ee <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80044e2:	239c      	movs	r3, #156	; 0x9c
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a5e      	ldr	r2, [pc, #376]	; (8004664 <HAL_UART_IRQHandler+0x2cc>)
 80044ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80044ec:	d00b      	beq.n	8004506 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	2208      	movs	r2, #8
 80044f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2290      	movs	r2, #144	; 0x90
 80044fa:	589b      	ldr	r3, [r3, r2]
 80044fc:	2208      	movs	r2, #8
 80044fe:	431a      	orrs	r2, r3
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2190      	movs	r1, #144	; 0x90
 8004504:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004506:	23a4      	movs	r3, #164	; 0xa4
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	4013      	ands	r3, r2
 8004512:	d013      	beq.n	800453c <HAL_UART_IRQHandler+0x1a4>
 8004514:	23a0      	movs	r3, #160	; 0xa0
 8004516:	18fb      	adds	r3, r7, r3
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	2380      	movs	r3, #128	; 0x80
 800451c:	04db      	lsls	r3, r3, #19
 800451e:	4013      	ands	r3, r2
 8004520:	d00c      	beq.n	800453c <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2290      	movs	r2, #144	; 0x90
 8004530:	589b      	ldr	r3, [r3, r2]
 8004532:	2220      	movs	r2, #32
 8004534:	431a      	orrs	r2, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2190      	movs	r1, #144	; 0x90
 800453a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2290      	movs	r2, #144	; 0x90
 8004540:	589b      	ldr	r3, [r3, r2]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d100      	bne.n	8004548 <HAL_UART_IRQHandler+0x1b0>
 8004546:	e24b      	b.n	80049e0 <HAL_UART_IRQHandler+0x648>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004548:	23a4      	movs	r3, #164	; 0xa4
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2220      	movs	r2, #32
 8004550:	4013      	ands	r3, r2
 8004552:	d015      	beq.n	8004580 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004554:	23a0      	movs	r3, #160	; 0xa0
 8004556:	18fb      	adds	r3, r7, r3
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2220      	movs	r2, #32
 800455c:	4013      	ands	r3, r2
 800455e:	d106      	bne.n	800456e <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004560:	239c      	movs	r3, #156	; 0x9c
 8004562:	18fb      	adds	r3, r7, r3
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	055b      	lsls	r3, r3, #21
 800456a:	4013      	ands	r3, r2
 800456c:	d008      	beq.n	8004580 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004572:	2b00      	cmp	r3, #0
 8004574:	d004      	beq.n	8004580 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	0010      	movs	r0, r2
 800457e:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2290      	movs	r2, #144	; 0x90
 8004584:	589b      	ldr	r3, [r3, r2]
 8004586:	2194      	movs	r1, #148	; 0x94
 8004588:	187a      	adds	r2, r7, r1
 800458a:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2240      	movs	r2, #64	; 0x40
 8004594:	4013      	ands	r3, r2
 8004596:	2b40      	cmp	r3, #64	; 0x40
 8004598:	d004      	beq.n	80045a4 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800459a:	187b      	adds	r3, r7, r1
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2228      	movs	r2, #40	; 0x28
 80045a0:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045a2:	d050      	beq.n	8004646 <HAL_UART_IRQHandler+0x2ae>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f000 ffde 	bl	8005568 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	4013      	ands	r3, r2
 80045b6:	2b40      	cmp	r3, #64	; 0x40
 80045b8:	d13e      	bne.n	8004638 <HAL_UART_IRQHandler+0x2a0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045ba:	f3ef 8310 	mrs	r3, PRIMASK
 80045be:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80045c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045c2:	2090      	movs	r0, #144	; 0x90
 80045c4:	183a      	adds	r2, r7, r0
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	2301      	movs	r3, #1
 80045ca:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045ce:	f383 8810 	msr	PRIMASK, r3
}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	689a      	ldr	r2, [r3, #8]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2140      	movs	r1, #64	; 0x40
 80045e0:	438a      	bics	r2, r1
 80045e2:	609a      	str	r2, [r3, #8]
 80045e4:	183b      	adds	r3, r7, r0
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80045ec:	f383 8810 	msr	PRIMASK, r3
}
 80045f0:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2280      	movs	r2, #128	; 0x80
 80045f6:	589b      	ldr	r3, [r3, r2]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d016      	beq.n	800462a <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2280      	movs	r2, #128	; 0x80
 8004600:	589b      	ldr	r3, [r3, r2]
 8004602:	4a1a      	ldr	r2, [pc, #104]	; (800466c <HAL_UART_IRQHandler+0x2d4>)
 8004604:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2280      	movs	r2, #128	; 0x80
 800460a:	589b      	ldr	r3, [r3, r2]
 800460c:	0018      	movs	r0, r3
 800460e:	f7fe fe1b 	bl	8003248 <HAL_DMA_Abort_IT>
 8004612:	1e03      	subs	r3, r0, #0
 8004614:	d022      	beq.n	800465c <HAL_UART_IRQHandler+0x2c4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2280      	movs	r2, #128	; 0x80
 800461a:	589b      	ldr	r3, [r3, r2]
 800461c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	2180      	movs	r1, #128	; 0x80
 8004622:	5852      	ldr	r2, [r2, r1]
 8004624:	0010      	movs	r0, r2
 8004626:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004628:	e018      	b.n	800465c <HAL_UART_IRQHandler+0x2c4>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	22a4      	movs	r2, #164	; 0xa4
 800462e:	589b      	ldr	r3, [r3, r2]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	0010      	movs	r0, r2
 8004634:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004636:	e011      	b.n	800465c <HAL_UART_IRQHandler+0x2c4>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	22a4      	movs	r2, #164	; 0xa4
 800463c:	589b      	ldr	r3, [r3, r2]
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	0010      	movs	r0, r2
 8004642:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004644:	e00a      	b.n	800465c <HAL_UART_IRQHandler+0x2c4>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	22a4      	movs	r2, #164	; 0xa4
 800464a:	589b      	ldr	r3, [r3, r2]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	0010      	movs	r0, r2
 8004650:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2290      	movs	r2, #144	; 0x90
 8004656:	2100      	movs	r1, #0
 8004658:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800465a:	e1c1      	b.n	80049e0 <HAL_UART_IRQHandler+0x648>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800465c:	46c0      	nop			; (mov r8, r8)
    return;
 800465e:	e1bf      	b.n	80049e0 <HAL_UART_IRQHandler+0x648>
 8004660:	0000080f 	.word	0x0000080f
 8004664:	10000001 	.word	0x10000001
 8004668:	04000120 	.word	0x04000120
 800466c:	080058fb 	.word	0x080058fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d000      	beq.n	800467a <HAL_UART_IRQHandler+0x2e2>
 8004678:	e140      	b.n	80048fc <HAL_UART_IRQHandler+0x564>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800467a:	23a4      	movs	r3, #164	; 0xa4
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2210      	movs	r2, #16
 8004682:	4013      	ands	r3, r2
 8004684:	d100      	bne.n	8004688 <HAL_UART_IRQHandler+0x2f0>
 8004686:	e139      	b.n	80048fc <HAL_UART_IRQHandler+0x564>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004688:	23a0      	movs	r3, #160	; 0xa0
 800468a:	18fb      	adds	r3, r7, r3
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2210      	movs	r2, #16
 8004690:	4013      	ands	r3, r2
 8004692:	d100      	bne.n	8004696 <HAL_UART_IRQHandler+0x2fe>
 8004694:	e132      	b.n	80048fc <HAL_UART_IRQHandler+0x564>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	2240      	movs	r2, #64	; 0x40
 80046a6:	4013      	ands	r3, r2
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d000      	beq.n	80046ae <HAL_UART_IRQHandler+0x316>
 80046ac:	e0a5      	b.n	80047fa <HAL_UART_IRQHandler+0x462>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2280      	movs	r2, #128	; 0x80
 80046b2:	589b      	ldr	r3, [r3, r2]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	217e      	movs	r1, #126	; 0x7e
 80046ba:	187b      	adds	r3, r7, r1
 80046bc:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80046be:	187b      	adds	r3, r7, r1
 80046c0:	881b      	ldrh	r3, [r3, #0]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d100      	bne.n	80046c8 <HAL_UART_IRQHandler+0x330>
 80046c6:	e18d      	b.n	80049e4 <HAL_UART_IRQHandler+0x64c>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	225c      	movs	r2, #92	; 0x5c
 80046cc:	5a9b      	ldrh	r3, [r3, r2]
 80046ce:	187a      	adds	r2, r7, r1
 80046d0:	8812      	ldrh	r2, [r2, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d300      	bcc.n	80046d8 <HAL_UART_IRQHandler+0x340>
 80046d6:	e185      	b.n	80049e4 <HAL_UART_IRQHandler+0x64c>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	187a      	adds	r2, r7, r1
 80046dc:	215e      	movs	r1, #94	; 0x5e
 80046de:	8812      	ldrh	r2, [r2, #0]
 80046e0:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2280      	movs	r2, #128	; 0x80
 80046e6:	589b      	ldr	r3, [r3, r2]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2220      	movs	r2, #32
 80046ee:	4013      	ands	r3, r2
 80046f0:	d170      	bne.n	80047d4 <HAL_UART_IRQHandler+0x43c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80046f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046fa:	67bb      	str	r3, [r7, #120]	; 0x78
 80046fc:	2301      	movs	r3, #1
 80046fe:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	49b8      	ldr	r1, [pc, #736]	; (80049f4 <HAL_UART_IRQHandler+0x65c>)
 8004714:	400a      	ands	r2, r1
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800471e:	f383 8810 	msr	PRIMASK, r3
}
 8004722:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004724:	f3ef 8310 	mrs	r3, PRIMASK
 8004728:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800472a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800472c:	677b      	str	r3, [r7, #116]	; 0x74
 800472e:	2301      	movs	r3, #1
 8004730:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004734:	f383 8810 	msr	PRIMASK, r3
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2101      	movs	r1, #1
 8004746:	438a      	bics	r2, r1
 8004748:	609a      	str	r2, [r3, #8]
 800474a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800474c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800474e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004750:	f383 8810 	msr	PRIMASK, r3
}
 8004754:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800475c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800475e:	673b      	str	r3, [r7, #112]	; 0x70
 8004760:	2301      	movs	r3, #1
 8004762:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004766:	f383 8810 	msr	PRIMASK, r3
}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	689a      	ldr	r2, [r3, #8]
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2140      	movs	r1, #64	; 0x40
 8004778:	438a      	bics	r2, r1
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800477e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004780:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004782:	f383 8810 	msr	PRIMASK, r3
}
 8004786:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	228c      	movs	r2, #140	; 0x8c
 800478c:	2120      	movs	r1, #32
 800478e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004796:	f3ef 8310 	mrs	r3, PRIMASK
 800479a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800479c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800479e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80047a0:	2301      	movs	r3, #1
 80047a2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047a6:	f383 8810 	msr	PRIMASK, r3
}
 80047aa:	46c0      	nop			; (mov r8, r8)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2110      	movs	r1, #16
 80047b8:	438a      	bics	r2, r1
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047be:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047c2:	f383 8810 	msr	PRIMASK, r3
}
 80047c6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	589b      	ldr	r3, [r3, r2]
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7fe fcd8 	bl	8003184 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	22c0      	movs	r2, #192	; 0xc0
 80047de:	589b      	ldr	r3, [r3, r2]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	215c      	movs	r1, #92	; 0x5c
 80047e4:	5a51      	ldrh	r1, [r2, r1]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	205e      	movs	r0, #94	; 0x5e
 80047ea:	5a12      	ldrh	r2, [r2, r0]
 80047ec:	b292      	uxth	r2, r2
 80047ee:	1a8a      	subs	r2, r1, r2
 80047f0:	b291      	uxth	r1, r2
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	0010      	movs	r0, r2
 80047f6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80047f8:	e0f4      	b.n	80049e4 <HAL_UART_IRQHandler+0x64c>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	225c      	movs	r2, #92	; 0x5c
 80047fe:	5a99      	ldrh	r1, [r3, r2]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	225e      	movs	r2, #94	; 0x5e
 8004804:	5a9b      	ldrh	r3, [r3, r2]
 8004806:	b29a      	uxth	r2, r3
 8004808:	208e      	movs	r0, #142	; 0x8e
 800480a:	183b      	adds	r3, r7, r0
 800480c:	1a8a      	subs	r2, r1, r2
 800480e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	225e      	movs	r2, #94	; 0x5e
 8004814:	5a9b      	ldrh	r3, [r3, r2]
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d100      	bne.n	800481e <HAL_UART_IRQHandler+0x486>
 800481c:	e0e4      	b.n	80049e8 <HAL_UART_IRQHandler+0x650>
          && (nb_rx_data > 0U))
 800481e:	183b      	adds	r3, r7, r0
 8004820:	881b      	ldrh	r3, [r3, #0]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d100      	bne.n	8004828 <HAL_UART_IRQHandler+0x490>
 8004826:	e0df      	b.n	80049e8 <HAL_UART_IRQHandler+0x650>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004828:	f3ef 8310 	mrs	r3, PRIMASK
 800482c:	60fb      	str	r3, [r7, #12]
  return(result);
 800482e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004830:	2488      	movs	r4, #136	; 0x88
 8004832:	193a      	adds	r2, r7, r4
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	2301      	movs	r3, #1
 8004838:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f383 8810 	msr	PRIMASK, r3
}
 8004840:	46c0      	nop			; (mov r8, r8)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	496a      	ldr	r1, [pc, #424]	; (80049f8 <HAL_UART_IRQHandler+0x660>)
 800484e:	400a      	ands	r2, r1
 8004850:	601a      	str	r2, [r3, #0]
 8004852:	193b      	adds	r3, r7, r4
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	f383 8810 	msr	PRIMASK, r3
}
 800485e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004860:	f3ef 8310 	mrs	r3, PRIMASK
 8004864:	61bb      	str	r3, [r7, #24]
  return(result);
 8004866:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004868:	2484      	movs	r4, #132	; 0x84
 800486a:	193a      	adds	r2, r7, r4
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	2301      	movs	r3, #1
 8004870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f383 8810 	msr	PRIMASK, r3
}
 8004878:	46c0      	nop			; (mov r8, r8)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	495d      	ldr	r1, [pc, #372]	; (80049fc <HAL_UART_IRQHandler+0x664>)
 8004886:	400a      	ands	r2, r1
 8004888:	609a      	str	r2, [r3, #8]
 800488a:	193b      	adds	r3, r7, r4
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004890:	6a3b      	ldr	r3, [r7, #32]
 8004892:	f383 8810 	msr	PRIMASK, r3
}
 8004896:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	228c      	movs	r2, #140	; 0x8c
 800489c:	2120      	movs	r1, #32
 800489e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048ac:	f3ef 8310 	mrs	r3, PRIMASK
 80048b0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048b4:	2480      	movs	r4, #128	; 0x80
 80048b6:	193a      	adds	r2, r7, r4
 80048b8:	6013      	str	r3, [r2, #0]
 80048ba:	2301      	movs	r3, #1
 80048bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c0:	f383 8810 	msr	PRIMASK, r3
}
 80048c4:	46c0      	nop			; (mov r8, r8)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2110      	movs	r1, #16
 80048d2:	438a      	bics	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
 80048d6:	193b      	adds	r3, r7, r4
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048de:	f383 8810 	msr	PRIMASK, r3
}
 80048e2:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2202      	movs	r2, #2
 80048e8:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	22c0      	movs	r2, #192	; 0xc0
 80048ee:	589b      	ldr	r3, [r3, r2]
 80048f0:	183a      	adds	r2, r7, r0
 80048f2:	8811      	ldrh	r1, [r2, #0]
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	0010      	movs	r0, r2
 80048f8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80048fa:	e075      	b.n	80049e8 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80048fc:	23a4      	movs	r3, #164	; 0xa4
 80048fe:	18fb      	adds	r3, r7, r3
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	2380      	movs	r3, #128	; 0x80
 8004904:	035b      	lsls	r3, r3, #13
 8004906:	4013      	ands	r3, r2
 8004908:	d012      	beq.n	8004930 <HAL_UART_IRQHandler+0x598>
 800490a:	239c      	movs	r3, #156	; 0x9c
 800490c:	18fb      	adds	r3, r7, r3
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	03db      	lsls	r3, r3, #15
 8004914:	4013      	ands	r3, r2
 8004916:	d00b      	beq.n	8004930 <HAL_UART_IRQHandler+0x598>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2280      	movs	r2, #128	; 0x80
 800491e:	0352      	lsls	r2, r2, #13
 8004920:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	22b4      	movs	r2, #180	; 0xb4
 8004926:	589b      	ldr	r3, [r3, r2]
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	0010      	movs	r0, r2
 800492c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800492e:	e05e      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004930:	23a4      	movs	r3, #164	; 0xa4
 8004932:	18fb      	adds	r3, r7, r3
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	4013      	ands	r3, r2
 800493a:	d016      	beq.n	800496a <HAL_UART_IRQHandler+0x5d2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800493c:	23a0      	movs	r3, #160	; 0xa0
 800493e:	18fb      	adds	r3, r7, r3
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	4013      	ands	r3, r2
 8004946:	d106      	bne.n	8004956 <HAL_UART_IRQHandler+0x5be>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004948:	239c      	movs	r3, #156	; 0x9c
 800494a:	18fb      	adds	r3, r7, r3
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	2380      	movs	r3, #128	; 0x80
 8004950:	041b      	lsls	r3, r3, #16
 8004952:	4013      	ands	r3, r2
 8004954:	d009      	beq.n	800496a <HAL_UART_IRQHandler+0x5d2>
  {
    if (huart->TxISR != NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800495a:	2b00      	cmp	r3, #0
 800495c:	d046      	beq.n	80049ec <HAL_UART_IRQHandler+0x654>
    {
      huart->TxISR(huart);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	0010      	movs	r0, r2
 8004966:	4798      	blx	r3
    }
    return;
 8004968:	e040      	b.n	80049ec <HAL_UART_IRQHandler+0x654>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800496a:	23a4      	movs	r3, #164	; 0xa4
 800496c:	18fb      	adds	r3, r7, r3
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2240      	movs	r2, #64	; 0x40
 8004972:	4013      	ands	r3, r2
 8004974:	d00a      	beq.n	800498c <HAL_UART_IRQHandler+0x5f4>
 8004976:	23a0      	movs	r3, #160	; 0xa0
 8004978:	18fb      	adds	r3, r7, r3
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2240      	movs	r2, #64	; 0x40
 800497e:	4013      	ands	r3, r2
 8004980:	d004      	beq.n	800498c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	0018      	movs	r0, r3
 8004986:	f000 ffd1 	bl	800592c <UART_EndTransmit_IT>
    return;
 800498a:	e030      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800498c:	23a4      	movs	r3, #164	; 0xa4
 800498e:	18fb      	adds	r3, r7, r3
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	2380      	movs	r3, #128	; 0x80
 8004994:	041b      	lsls	r3, r3, #16
 8004996:	4013      	ands	r3, r2
 8004998:	d00d      	beq.n	80049b6 <HAL_UART_IRQHandler+0x61e>
 800499a:	23a0      	movs	r3, #160	; 0xa0
 800499c:	18fb      	adds	r3, r7, r3
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	05db      	lsls	r3, r3, #23
 80049a4:	4013      	ands	r3, r2
 80049a6:	d006      	beq.n	80049b6 <HAL_UART_IRQHandler+0x61e>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	22bc      	movs	r2, #188	; 0xbc
 80049ac:	589b      	ldr	r3, [r3, r2]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	0010      	movs	r0, r2
 80049b2:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049b4:	e01b      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80049b6:	23a4      	movs	r3, #164	; 0xa4
 80049b8:	18fb      	adds	r3, r7, r3
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2380      	movs	r3, #128	; 0x80
 80049be:	045b      	lsls	r3, r3, #17
 80049c0:	4013      	ands	r3, r2
 80049c2:	d014      	beq.n	80049ee <HAL_UART_IRQHandler+0x656>
 80049c4:	23a0      	movs	r3, #160	; 0xa0
 80049c6:	18fb      	adds	r3, r7, r3
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	da0f      	bge.n	80049ee <HAL_UART_IRQHandler+0x656>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	22b8      	movs	r2, #184	; 0xb8
 80049d2:	589b      	ldr	r3, [r3, r2]
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	0010      	movs	r0, r2
 80049d8:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80049da:	e008      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
      return;
 80049dc:	46c0      	nop			; (mov r8, r8)
 80049de:	e006      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
    return;
 80049e0:	46c0      	nop			; (mov r8, r8)
 80049e2:	e004      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
      return;
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	e002      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
      return;
 80049e8:	46c0      	nop			; (mov r8, r8)
 80049ea:	e000      	b.n	80049ee <HAL_UART_IRQHandler+0x656>
    return;
 80049ec:	46c0      	nop			; (mov r8, r8)
  }
}
 80049ee:	46bd      	mov	sp, r7
 80049f0:	b02a      	add	sp, #168	; 0xa8
 80049f2:	bdb0      	pop	{r4, r5, r7, pc}
 80049f4:	fffffeff 	.word	0xfffffeff
 80049f8:	fffffedf 	.word	0xfffffedf
 80049fc:	effffffe 	.word	0xeffffffe

08004a00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a08:	46c0      	nop			; (mov r8, r8)
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	b002      	add	sp, #8
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004a18:	46c0      	nop			; (mov r8, r8)
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b082      	sub	sp, #8
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a28:	46c0      	nop			; (mov r8, r8)
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	b002      	add	sp, #8
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8004a38:	46c0      	nop			; (mov r8, r8)
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	b002      	add	sp, #8
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b082      	sub	sp, #8
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8004a48:	46c0      	nop			; (mov r8, r8)
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	b002      	add	sp, #8
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8004a58:	46c0      	nop			; (mov r8, r8)
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	b002      	add	sp, #8
 8004a5e:	bd80      	pop	{r7, pc}

08004a60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b082      	sub	sp, #8
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	000a      	movs	r2, r1
 8004a6a:	1cbb      	adds	r3, r7, #2
 8004a6c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b002      	add	sp, #8
 8004a74:	bd80      	pop	{r7, pc}
	...

08004a78 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2194      	movs	r1, #148	; 0x94
 8004a84:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <UART_InitCallbacksToDefault+0x70>)
 8004a86:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2198      	movs	r1, #152	; 0x98
 8004a8c:	4a17      	ldr	r2, [pc, #92]	; (8004aec <UART_InitCallbacksToDefault+0x74>)
 8004a8e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	219c      	movs	r1, #156	; 0x9c
 8004a94:	4a16      	ldr	r2, [pc, #88]	; (8004af0 <UART_InitCallbacksToDefault+0x78>)
 8004a96:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	21a0      	movs	r1, #160	; 0xa0
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <UART_InitCallbacksToDefault+0x7c>)
 8004a9e:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	21a4      	movs	r1, #164	; 0xa4
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <UART_InitCallbacksToDefault+0x80>)
 8004aa6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	21a8      	movs	r1, #168	; 0xa8
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <UART_InitCallbacksToDefault+0x84>)
 8004aae:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	21ac      	movs	r1, #172	; 0xac
 8004ab4:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <UART_InitCallbacksToDefault+0x88>)
 8004ab6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	21b0      	movs	r1, #176	; 0xb0
 8004abc:	4a11      	ldr	r2, [pc, #68]	; (8004b04 <UART_InitCallbacksToDefault+0x8c>)
 8004abe:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	21b4      	movs	r1, #180	; 0xb4
 8004ac4:	4a10      	ldr	r2, [pc, #64]	; (8004b08 <UART_InitCallbacksToDefault+0x90>)
 8004ac6:	505a      	str	r2, [r3, r1]
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	21b8      	movs	r1, #184	; 0xb8
 8004acc:	4a0f      	ldr	r2, [pc, #60]	; (8004b0c <UART_InitCallbacksToDefault+0x94>)
 8004ace:	505a      	str	r2, [r3, r1]
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	21bc      	movs	r1, #188	; 0xbc
 8004ad4:	4a0e      	ldr	r2, [pc, #56]	; (8004b10 <UART_InitCallbacksToDefault+0x98>)
 8004ad6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	21c0      	movs	r1, #192	; 0xc0
 8004adc:	4a0d      	ldr	r2, [pc, #52]	; (8004b14 <UART_InitCallbacksToDefault+0x9c>)
 8004ade:	505a      	str	r2, [r3, r1]

}
 8004ae0:	46c0      	nop			; (mov r8, r8)
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	b002      	add	sp, #8
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	08004a01 	.word	0x08004a01
 8004aec:	08001c2d 	.word	0x08001c2d
 8004af0:	08004a11 	.word	0x08004a11
 8004af4:	08001c71 	.word	0x08001c71
 8004af8:	08004a21 	.word	0x08004a21
 8004afc:	08004a31 	.word	0x08004a31
 8004b00:	08004a41 	.word	0x08004a41
 8004b04:	08004a51 	.word	0x08004a51
 8004b08:	08005989 	.word	0x08005989
 8004b0c:	08005999 	.word	0x08005999
 8004b10:	080059a9 	.word	0x080059a9
 8004b14:	08004a61 	.word	0x08004a61

08004b18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b18:	b5b0      	push	{r4, r5, r7, lr}
 8004b1a:	b090      	sub	sp, #64	; 0x40
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b20:	231a      	movs	r3, #26
 8004b22:	2220      	movs	r2, #32
 8004b24:	189b      	adds	r3, r3, r2
 8004b26:	19db      	adds	r3, r3, r7
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2e:	689a      	ldr	r2, [r3, #8]
 8004b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	431a      	orrs	r2, r3
 8004b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4ac4      	ldr	r2, [pc, #784]	; (8004e5c <UART_SetConfig+0x344>)
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	4abf      	ldr	r2, [pc, #764]	; (8004e60 <UART_SetConfig+0x348>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	0018      	movs	r0, r3
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	68d9      	ldr	r1, [r3, #12]
 8004b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	0003      	movs	r3, r0
 8004b70:	430b      	orrs	r3, r1
 8004b72:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4ab9      	ldr	r2, [pc, #740]	; (8004e64 <UART_SetConfig+0x34c>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4ab4      	ldr	r2, [pc, #720]	; (8004e68 <UART_SetConfig+0x350>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	0019      	movs	r1, r3
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004baa:	220f      	movs	r2, #15
 8004bac:	4393      	bics	r3, r2
 8004bae:	0018      	movs	r0, r3
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	681a      	ldr	r2, [r3, #0]
 8004bb8:	0003      	movs	r3, r0
 8004bba:	430b      	orrs	r3, r1
 8004bbc:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4aaa      	ldr	r2, [pc, #680]	; (8004e6c <UART_SetConfig+0x354>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d131      	bne.n	8004c2c <UART_SetConfig+0x114>
 8004bc8:	4ba9      	ldr	r3, [pc, #676]	; (8004e70 <UART_SetConfig+0x358>)
 8004bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bcc:	2203      	movs	r2, #3
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b03      	cmp	r3, #3
 8004bd2:	d01d      	beq.n	8004c10 <UART_SetConfig+0xf8>
 8004bd4:	d823      	bhi.n	8004c1e <UART_SetConfig+0x106>
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d00c      	beq.n	8004bf4 <UART_SetConfig+0xdc>
 8004bda:	d820      	bhi.n	8004c1e <UART_SetConfig+0x106>
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d002      	beq.n	8004be6 <UART_SetConfig+0xce>
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d00e      	beq.n	8004c02 <UART_SetConfig+0xea>
 8004be4:	e01b      	b.n	8004c1e <UART_SetConfig+0x106>
 8004be6:	231b      	movs	r3, #27
 8004be8:	2220      	movs	r2, #32
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	2200      	movs	r2, #0
 8004bf0:	701a      	strb	r2, [r3, #0]
 8004bf2:	e071      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004bf4:	231b      	movs	r3, #27
 8004bf6:	2220      	movs	r2, #32
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	19db      	adds	r3, r3, r7
 8004bfc:	2202      	movs	r2, #2
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e06a      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c02:	231b      	movs	r3, #27
 8004c04:	2220      	movs	r2, #32
 8004c06:	189b      	adds	r3, r3, r2
 8004c08:	19db      	adds	r3, r3, r7
 8004c0a:	2204      	movs	r2, #4
 8004c0c:	701a      	strb	r2, [r3, #0]
 8004c0e:	e063      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c10:	231b      	movs	r3, #27
 8004c12:	2220      	movs	r2, #32
 8004c14:	189b      	adds	r3, r3, r2
 8004c16:	19db      	adds	r3, r3, r7
 8004c18:	2208      	movs	r2, #8
 8004c1a:	701a      	strb	r2, [r3, #0]
 8004c1c:	e05c      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c1e:	231b      	movs	r3, #27
 8004c20:	2220      	movs	r2, #32
 8004c22:	189b      	adds	r3, r3, r2
 8004c24:	19db      	adds	r3, r3, r7
 8004c26:	2210      	movs	r2, #16
 8004c28:	701a      	strb	r2, [r3, #0]
 8004c2a:	e055      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a90      	ldr	r2, [pc, #576]	; (8004e74 <UART_SetConfig+0x35c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d106      	bne.n	8004c44 <UART_SetConfig+0x12c>
 8004c36:	231b      	movs	r3, #27
 8004c38:	2220      	movs	r2, #32
 8004c3a:	189b      	adds	r3, r3, r2
 8004c3c:	19db      	adds	r3, r3, r7
 8004c3e:	2200      	movs	r2, #0
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e049      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a86      	ldr	r2, [pc, #536]	; (8004e64 <UART_SetConfig+0x34c>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d13e      	bne.n	8004ccc <UART_SetConfig+0x1b4>
 8004c4e:	4b88      	ldr	r3, [pc, #544]	; (8004e70 <UART_SetConfig+0x358>)
 8004c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c52:	23c0      	movs	r3, #192	; 0xc0
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	4013      	ands	r3, r2
 8004c58:	22c0      	movs	r2, #192	; 0xc0
 8004c5a:	0112      	lsls	r2, r2, #4
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d027      	beq.n	8004cb0 <UART_SetConfig+0x198>
 8004c60:	22c0      	movs	r2, #192	; 0xc0
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d82a      	bhi.n	8004cbe <UART_SetConfig+0x1a6>
 8004c68:	2280      	movs	r2, #128	; 0x80
 8004c6a:	0112      	lsls	r2, r2, #4
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d011      	beq.n	8004c94 <UART_SetConfig+0x17c>
 8004c70:	2280      	movs	r2, #128	; 0x80
 8004c72:	0112      	lsls	r2, r2, #4
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d822      	bhi.n	8004cbe <UART_SetConfig+0x1a6>
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d004      	beq.n	8004c86 <UART_SetConfig+0x16e>
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	00d2      	lsls	r2, r2, #3
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00e      	beq.n	8004ca2 <UART_SetConfig+0x18a>
 8004c84:	e01b      	b.n	8004cbe <UART_SetConfig+0x1a6>
 8004c86:	231b      	movs	r3, #27
 8004c88:	2220      	movs	r2, #32
 8004c8a:	189b      	adds	r3, r3, r2
 8004c8c:	19db      	adds	r3, r3, r7
 8004c8e:	2200      	movs	r2, #0
 8004c90:	701a      	strb	r2, [r3, #0]
 8004c92:	e021      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004c94:	231b      	movs	r3, #27
 8004c96:	2220      	movs	r2, #32
 8004c98:	189b      	adds	r3, r3, r2
 8004c9a:	19db      	adds	r3, r3, r7
 8004c9c:	2202      	movs	r2, #2
 8004c9e:	701a      	strb	r2, [r3, #0]
 8004ca0:	e01a      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004ca2:	231b      	movs	r3, #27
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	189b      	adds	r3, r3, r2
 8004ca8:	19db      	adds	r3, r3, r7
 8004caa:	2204      	movs	r2, #4
 8004cac:	701a      	strb	r2, [r3, #0]
 8004cae:	e013      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004cb0:	231b      	movs	r3, #27
 8004cb2:	2220      	movs	r2, #32
 8004cb4:	189b      	adds	r3, r3, r2
 8004cb6:	19db      	adds	r3, r3, r7
 8004cb8:	2208      	movs	r2, #8
 8004cba:	701a      	strb	r2, [r3, #0]
 8004cbc:	e00c      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004cbe:	231b      	movs	r3, #27
 8004cc0:	2220      	movs	r2, #32
 8004cc2:	189b      	adds	r3, r3, r2
 8004cc4:	19db      	adds	r3, r3, r7
 8004cc6:	2210      	movs	r2, #16
 8004cc8:	701a      	strb	r2, [r3, #0]
 8004cca:	e005      	b.n	8004cd8 <UART_SetConfig+0x1c0>
 8004ccc:	231b      	movs	r3, #27
 8004cce:	2220      	movs	r2, #32
 8004cd0:	189b      	adds	r3, r3, r2
 8004cd2:	19db      	adds	r3, r3, r7
 8004cd4:	2210      	movs	r2, #16
 8004cd6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a61      	ldr	r2, [pc, #388]	; (8004e64 <UART_SetConfig+0x34c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d000      	beq.n	8004ce4 <UART_SetConfig+0x1cc>
 8004ce2:	e092      	b.n	8004e0a <UART_SetConfig+0x2f2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004ce4:	231b      	movs	r3, #27
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	189b      	adds	r3, r3, r2
 8004cea:	19db      	adds	r3, r3, r7
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d015      	beq.n	8004d1e <UART_SetConfig+0x206>
 8004cf2:	dc18      	bgt.n	8004d26 <UART_SetConfig+0x20e>
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d00d      	beq.n	8004d14 <UART_SetConfig+0x1fc>
 8004cf8:	dc15      	bgt.n	8004d26 <UART_SetConfig+0x20e>
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x1ec>
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d005      	beq.n	8004d0e <UART_SetConfig+0x1f6>
 8004d02:	e010      	b.n	8004d26 <UART_SetConfig+0x20e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d04:	f7ff f9da 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d0c:	e014      	b.n	8004d38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004d0e:	4b5a      	ldr	r3, [pc, #360]	; (8004e78 <UART_SetConfig+0x360>)
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d12:	e011      	b.n	8004d38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d14:	f7ff f946 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8004d18:	0003      	movs	r3, r0
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d1c:	e00c      	b.n	8004d38 <UART_SetConfig+0x220>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d1e:	2380      	movs	r3, #128	; 0x80
 8004d20:	021b      	lsls	r3, r3, #8
 8004d22:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004d24:	e008      	b.n	8004d38 <UART_SetConfig+0x220>
      default:
        pclk = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004d2a:	231a      	movs	r3, #26
 8004d2c:	2220      	movs	r2, #32
 8004d2e:	189b      	adds	r3, r3, r2
 8004d30:	19db      	adds	r3, r3, r7
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]
        break;
 8004d36:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d100      	bne.n	8004d40 <UART_SetConfig+0x228>
 8004d3e:	e147      	b.n	8004fd0 <UART_SetConfig+0x4b8>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d44:	4b4d      	ldr	r3, [pc, #308]	; (8004e7c <UART_SetConfig+0x364>)
 8004d46:	0052      	lsls	r2, r2, #1
 8004d48:	5ad3      	ldrh	r3, [r2, r3]
 8004d4a:	0019      	movs	r1, r3
 8004d4c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d4e:	f7fb f9e1 	bl	8000114 <__udivsi3>
 8004d52:	0003      	movs	r3, r0
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	0013      	movs	r3, r2
 8004d5c:	005b      	lsls	r3, r3, #1
 8004d5e:	189b      	adds	r3, r3, r2
 8004d60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d305      	bcc.n	8004d72 <UART_SetConfig+0x25a>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d6c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d906      	bls.n	8004d80 <UART_SetConfig+0x268>
      {
        ret = HAL_ERROR;
 8004d72:	231a      	movs	r3, #26
 8004d74:	2220      	movs	r2, #32
 8004d76:	189b      	adds	r3, r3, r2
 8004d78:	19db      	adds	r3, r3, r7
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	701a      	strb	r2, [r3, #0]
 8004d7e:	e127      	b.n	8004fd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d82:	61bb      	str	r3, [r7, #24]
 8004d84:	2300      	movs	r3, #0
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004d8c:	4b3b      	ldr	r3, [pc, #236]	; (8004e7c <UART_SetConfig+0x364>)
 8004d8e:	0052      	lsls	r2, r2, #1
 8004d90:	5ad3      	ldrh	r3, [r2, r3]
 8004d92:	613b      	str	r3, [r7, #16]
 8004d94:	2300      	movs	r3, #0
 8004d96:	617b      	str	r3, [r7, #20]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	69b8      	ldr	r0, [r7, #24]
 8004d9e:	69f9      	ldr	r1, [r7, #28]
 8004da0:	f7fb fa44 	bl	800022c <__aeabi_uldivmod>
 8004da4:	0002      	movs	r2, r0
 8004da6:	000b      	movs	r3, r1
 8004da8:	0e11      	lsrs	r1, r2, #24
 8004daa:	021d      	lsls	r5, r3, #8
 8004dac:	430d      	orrs	r5, r1
 8004dae:	0214      	lsls	r4, r2, #8
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	085b      	lsrs	r3, r3, #1
 8004db6:	60bb      	str	r3, [r7, #8]
 8004db8:	2300      	movs	r3, #0
 8004dba:	60fb      	str	r3, [r7, #12]
 8004dbc:	68b8      	ldr	r0, [r7, #8]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	1900      	adds	r0, r0, r4
 8004dc2:	4169      	adcs	r1, r5
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	603b      	str	r3, [r7, #0]
 8004dca:	2300      	movs	r3, #0
 8004dcc:	607b      	str	r3, [r7, #4]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f7fb fa2b 	bl	800022c <__aeabi_uldivmod>
 8004dd6:	0002      	movs	r2, r0
 8004dd8:	000b      	movs	r3, r1
 8004dda:	0013      	movs	r3, r2
 8004ddc:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004dde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004de0:	23c0      	movs	r3, #192	; 0xc0
 8004de2:	009b      	lsls	r3, r3, #2
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d309      	bcc.n	8004dfc <UART_SetConfig+0x2e4>
 8004de8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004dea:	2380      	movs	r3, #128	; 0x80
 8004dec:	035b      	lsls	r3, r3, #13
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d204      	bcs.n	8004dfc <UART_SetConfig+0x2e4>
        {
          huart->Instance->BRR = usartdiv;
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004df8:	60da      	str	r2, [r3, #12]
 8004dfa:	e0e9      	b.n	8004fd0 <UART_SetConfig+0x4b8>
        }
        else
        {
          ret = HAL_ERROR;
 8004dfc:	231a      	movs	r3, #26
 8004dfe:	2220      	movs	r2, #32
 8004e00:	189b      	adds	r3, r3, r2
 8004e02:	19db      	adds	r3, r3, r7
 8004e04:	2201      	movs	r2, #1
 8004e06:	701a      	strb	r2, [r3, #0]
 8004e08:	e0e2      	b.n	8004fd0 <UART_SetConfig+0x4b8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e0c:	69da      	ldr	r2, [r3, #28]
 8004e0e:	2380      	movs	r3, #128	; 0x80
 8004e10:	021b      	lsls	r3, r3, #8
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d000      	beq.n	8004e18 <UART_SetConfig+0x300>
 8004e16:	e083      	b.n	8004f20 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004e18:	231b      	movs	r3, #27
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	19db      	adds	r3, r3, r7
 8004e20:	781b      	ldrb	r3, [r3, #0]
 8004e22:	2b08      	cmp	r3, #8
 8004e24:	d015      	beq.n	8004e52 <UART_SetConfig+0x33a>
 8004e26:	dc2b      	bgt.n	8004e80 <UART_SetConfig+0x368>
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d00d      	beq.n	8004e48 <UART_SetConfig+0x330>
 8004e2c:	dc28      	bgt.n	8004e80 <UART_SetConfig+0x368>
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <UART_SetConfig+0x320>
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d005      	beq.n	8004e42 <UART_SetConfig+0x32a>
 8004e36:	e023      	b.n	8004e80 <UART_SetConfig+0x368>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e38:	f7ff f940 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8004e3c:	0003      	movs	r3, r0
 8004e3e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e40:	e027      	b.n	8004e92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e42:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <UART_SetConfig+0x360>)
 8004e44:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e46:	e024      	b.n	8004e92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e48:	f7ff f8ac 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e50:	e01f      	b.n	8004e92 <UART_SetConfig+0x37a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e52:	2380      	movs	r3, #128	; 0x80
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004e58:	e01b      	b.n	8004e92 <UART_SetConfig+0x37a>
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	cfff69f3 	.word	0xcfff69f3
 8004e60:	ffffcfff 	.word	0xffffcfff
 8004e64:	40008000 	.word	0x40008000
 8004e68:	11fff4ff 	.word	0x11fff4ff
 8004e6c:	40013800 	.word	0x40013800
 8004e70:	40021000 	.word	0x40021000
 8004e74:	40004400 	.word	0x40004400
 8004e78:	00f42400 	.word	0x00f42400
 8004e7c:	08006008 	.word	0x08006008
      default:
        pclk = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004e84:	231a      	movs	r3, #26
 8004e86:	2220      	movs	r2, #32
 8004e88:	189b      	adds	r3, r3, r2
 8004e8a:	19db      	adds	r3, r3, r7
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	701a      	strb	r2, [r3, #0]
        break;
 8004e90:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d100      	bne.n	8004e9a <UART_SetConfig+0x382>
 8004e98:	e09a      	b.n	8004fd0 <UART_SetConfig+0x4b8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004e9e:	4b58      	ldr	r3, [pc, #352]	; (8005000 <UART_SetConfig+0x4e8>)
 8004ea0:	0052      	lsls	r2, r2, #1
 8004ea2:	5ad3      	ldrh	r3, [r2, r3]
 8004ea4:	0019      	movs	r1, r3
 8004ea6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004ea8:	f7fb f934 	bl	8000114 <__udivsi3>
 8004eac:	0003      	movs	r3, r0
 8004eae:	005a      	lsls	r2, r3, #1
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	085b      	lsrs	r3, r3, #1
 8004eb6:	18d2      	adds	r2, r2, r3
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	0019      	movs	r1, r3
 8004ebe:	0010      	movs	r0, r2
 8004ec0:	f7fb f928 	bl	8000114 <__udivsi3>
 8004ec4:	0003      	movs	r3, r0
 8004ec6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	2b0f      	cmp	r3, #15
 8004ecc:	d921      	bls.n	8004f12 <UART_SetConfig+0x3fa>
 8004ece:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ed0:	2380      	movs	r3, #128	; 0x80
 8004ed2:	025b      	lsls	r3, r3, #9
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d21c      	bcs.n	8004f12 <UART_SetConfig+0x3fa>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	200e      	movs	r0, #14
 8004ede:	2420      	movs	r4, #32
 8004ee0:	1903      	adds	r3, r0, r4
 8004ee2:	19db      	adds	r3, r3, r7
 8004ee4:	210f      	movs	r1, #15
 8004ee6:	438a      	bics	r2, r1
 8004ee8:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	b29b      	uxth	r3, r3
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	b299      	uxth	r1, r3
 8004ef6:	1903      	adds	r3, r0, r4
 8004ef8:	19db      	adds	r3, r3, r7
 8004efa:	1902      	adds	r2, r0, r4
 8004efc:	19d2      	adds	r2, r2, r7
 8004efe:	8812      	ldrh	r2, [r2, #0]
 8004f00:	430a      	orrs	r2, r1
 8004f02:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	1902      	adds	r2, r0, r4
 8004f0a:	19d2      	adds	r2, r2, r7
 8004f0c:	8812      	ldrh	r2, [r2, #0]
 8004f0e:	60da      	str	r2, [r3, #12]
 8004f10:	e05e      	b.n	8004fd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004f12:	231a      	movs	r3, #26
 8004f14:	2220      	movs	r2, #32
 8004f16:	189b      	adds	r3, r3, r2
 8004f18:	19db      	adds	r3, r3, r7
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	701a      	strb	r2, [r3, #0]
 8004f1e:	e057      	b.n	8004fd0 <UART_SetConfig+0x4b8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f20:	231b      	movs	r3, #27
 8004f22:	2220      	movs	r2, #32
 8004f24:	189b      	adds	r3, r3, r2
 8004f26:	19db      	adds	r3, r3, r7
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d015      	beq.n	8004f5a <UART_SetConfig+0x442>
 8004f2e:	dc18      	bgt.n	8004f62 <UART_SetConfig+0x44a>
 8004f30:	2b04      	cmp	r3, #4
 8004f32:	d00d      	beq.n	8004f50 <UART_SetConfig+0x438>
 8004f34:	dc15      	bgt.n	8004f62 <UART_SetConfig+0x44a>
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d002      	beq.n	8004f40 <UART_SetConfig+0x428>
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d005      	beq.n	8004f4a <UART_SetConfig+0x432>
 8004f3e:	e010      	b.n	8004f62 <UART_SetConfig+0x44a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7ff f8bc 	bl	80040bc <HAL_RCC_GetPCLK1Freq>
 8004f44:	0003      	movs	r3, r0
 8004f46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f48:	e014      	b.n	8004f74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f4a:	4b2e      	ldr	r3, [pc, #184]	; (8005004 <UART_SetConfig+0x4ec>)
 8004f4c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f4e:	e011      	b.n	8004f74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f50:	f7ff f828 	bl	8003fa4 <HAL_RCC_GetSysClockFreq>
 8004f54:	0003      	movs	r3, r0
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f58:	e00c      	b.n	8004f74 <UART_SetConfig+0x45c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	2380      	movs	r3, #128	; 0x80
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004f60:	e008      	b.n	8004f74 <UART_SetConfig+0x45c>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004f66:	231a      	movs	r3, #26
 8004f68:	2220      	movs	r2, #32
 8004f6a:	189b      	adds	r3, r3, r2
 8004f6c:	19db      	adds	r3, r3, r7
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
        break;
 8004f72:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004f74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d02a      	beq.n	8004fd0 <UART_SetConfig+0x4b8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <UART_SetConfig+0x4e8>)
 8004f80:	0052      	lsls	r2, r2, #1
 8004f82:	5ad3      	ldrh	r3, [r2, r3]
 8004f84:	0019      	movs	r1, r3
 8004f86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004f88:	f7fb f8c4 	bl	8000114 <__udivsi3>
 8004f8c:	0003      	movs	r3, r0
 8004f8e:	001a      	movs	r2, r3
 8004f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	18d2      	adds	r2, r2, r3
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	0019      	movs	r1, r3
 8004f9e:	0010      	movs	r0, r2
 8004fa0:	f7fb f8b8 	bl	8000114 <__udivsi3>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004faa:	2b0f      	cmp	r3, #15
 8004fac:	d90a      	bls.n	8004fc4 <UART_SetConfig+0x4ac>
 8004fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb0:	2380      	movs	r3, #128	; 0x80
 8004fb2:	025b      	lsls	r3, r3, #9
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d205      	bcs.n	8004fc4 <UART_SetConfig+0x4ac>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	b29a      	uxth	r2, r3
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	60da      	str	r2, [r3, #12]
 8004fc2:	e005      	b.n	8004fd0 <UART_SetConfig+0x4b8>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc4:	231a      	movs	r3, #26
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	189b      	adds	r3, r3, r2
 8004fca:	19db      	adds	r3, r3, r7
 8004fcc:	2201      	movs	r2, #1
 8004fce:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fd2:	226a      	movs	r2, #106	; 0x6a
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	2268      	movs	r2, #104	; 0x68
 8004fdc:	2101      	movs	r1, #1
 8004fde:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2200      	movs	r2, #0
 8004fea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fec:	231a      	movs	r3, #26
 8004fee:	2220      	movs	r2, #32
 8004ff0:	189b      	adds	r3, r3, r2
 8004ff2:	19db      	adds	r3, r3, r7
 8004ff4:	781b      	ldrb	r3, [r3, #0]
}
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	b010      	add	sp, #64	; 0x40
 8004ffc:	bdb0      	pop	{r4, r5, r7, pc}
 8004ffe:	46c0      	nop			; (mov r8, r8)
 8005000:	08006008 	.word	0x08006008
 8005004:	00f42400 	.word	0x00f42400

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b082      	sub	sp, #8
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	2201      	movs	r2, #1
 8005016:	4013      	ands	r3, r2
 8005018:	d00b      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	4a4a      	ldr	r2, [pc, #296]	; (800514c <UART_AdvFeatureConfig+0x144>)
 8005022:	4013      	ands	r3, r2
 8005024:	0019      	movs	r1, r3
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	2202      	movs	r2, #2
 8005038:	4013      	ands	r3, r2
 800503a:	d00b      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4a43      	ldr	r2, [pc, #268]	; (8005150 <UART_AdvFeatureConfig+0x148>)
 8005044:	4013      	ands	r3, r2
 8005046:	0019      	movs	r1, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	2204      	movs	r2, #4
 800505a:	4013      	ands	r3, r2
 800505c:	d00b      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4a3b      	ldr	r2, [pc, #236]	; (8005154 <UART_AdvFeatureConfig+0x14c>)
 8005066:	4013      	ands	r3, r2
 8005068:	0019      	movs	r1, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	2208      	movs	r2, #8
 800507c:	4013      	ands	r3, r2
 800507e:	d00b      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	4a34      	ldr	r2, [pc, #208]	; (8005158 <UART_AdvFeatureConfig+0x150>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	2210      	movs	r2, #16
 800509e:	4013      	ands	r3, r2
 80050a0:	d00b      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	689b      	ldr	r3, [r3, #8]
 80050a8:	4a2c      	ldr	r2, [pc, #176]	; (800515c <UART_AdvFeatureConfig+0x154>)
 80050aa:	4013      	ands	r3, r2
 80050ac:	0019      	movs	r1, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	2220      	movs	r2, #32
 80050c0:	4013      	ands	r3, r2
 80050c2:	d00b      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	4a25      	ldr	r2, [pc, #148]	; (8005160 <UART_AdvFeatureConfig+0x158>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	0019      	movs	r1, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	2240      	movs	r2, #64	; 0x40
 80050e2:	4013      	ands	r3, r2
 80050e4:	d01d      	beq.n	8005122 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <UART_AdvFeatureConfig+0x15c>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	0019      	movs	r1, r3
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005102:	2380      	movs	r3, #128	; 0x80
 8005104:	035b      	lsls	r3, r3, #13
 8005106:	429a      	cmp	r2, r3
 8005108:	d10b      	bne.n	8005122 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	4a15      	ldr	r2, [pc, #84]	; (8005168 <UART_AdvFeatureConfig+0x160>)
 8005112:	4013      	ands	r3, r2
 8005114:	0019      	movs	r1, r3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005126:	2280      	movs	r2, #128	; 0x80
 8005128:	4013      	ands	r3, r2
 800512a:	d00b      	beq.n	8005144 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4a0e      	ldr	r2, [pc, #56]	; (800516c <UART_AdvFeatureConfig+0x164>)
 8005134:	4013      	ands	r3, r2
 8005136:	0019      	movs	r1, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	430a      	orrs	r2, r1
 8005142:	605a      	str	r2, [r3, #4]
  }
}
 8005144:	46c0      	nop			; (mov r8, r8)
 8005146:	46bd      	mov	sp, r7
 8005148:	b002      	add	sp, #8
 800514a:	bd80      	pop	{r7, pc}
 800514c:	fffdffff 	.word	0xfffdffff
 8005150:	fffeffff 	.word	0xfffeffff
 8005154:	fffbffff 	.word	0xfffbffff
 8005158:	ffff7fff 	.word	0xffff7fff
 800515c:	ffffefff 	.word	0xffffefff
 8005160:	ffffdfff 	.word	0xffffdfff
 8005164:	ffefffff 	.word	0xffefffff
 8005168:	ff9fffff 	.word	0xff9fffff
 800516c:	fff7ffff 	.word	0xfff7ffff

08005170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b086      	sub	sp, #24
 8005174:	af02      	add	r7, sp, #8
 8005176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2290      	movs	r2, #144	; 0x90
 800517c:	2100      	movs	r1, #0
 800517e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005180:	f7fd fe08 	bl	8002d94 <HAL_GetTick>
 8005184:	0003      	movs	r3, r0
 8005186:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2208      	movs	r2, #8
 8005190:	4013      	ands	r3, r2
 8005192:	2b08      	cmp	r3, #8
 8005194:	d10c      	bne.n	80051b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2280      	movs	r2, #128	; 0x80
 800519a:	0391      	lsls	r1, r2, #14
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <UART_CheckIdleState+0x98>)
 80051a0:	9200      	str	r2, [sp, #0]
 80051a2:	2200      	movs	r2, #0
 80051a4:	f000 f832 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 80051a8:	1e03      	subs	r3, r0, #0
 80051aa:	d001      	beq.n	80051b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051ac:	2303      	movs	r3, #3
 80051ae:	e026      	b.n	80051fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2204      	movs	r2, #4
 80051b8:	4013      	ands	r3, r2
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d10c      	bne.n	80051d8 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2280      	movs	r2, #128	; 0x80
 80051c2:	03d1      	lsls	r1, r2, #15
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	4a10      	ldr	r2, [pc, #64]	; (8005208 <UART_CheckIdleState+0x98>)
 80051c8:	9200      	str	r2, [sp, #0]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f000 f81e 	bl	800520c <UART_WaitOnFlagUntilTimeout>
 80051d0:	1e03      	subs	r3, r0, #0
 80051d2:	d001      	beq.n	80051d8 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051d4:	2303      	movs	r3, #3
 80051d6:	e012      	b.n	80051fe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2288      	movs	r2, #136	; 0x88
 80051dc:	2120      	movs	r1, #32
 80051de:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	228c      	movs	r2, #140	; 0x8c
 80051e4:	2120      	movs	r1, #32
 80051e6:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2284      	movs	r2, #132	; 0x84
 80051f8:	2100      	movs	r1, #0
 80051fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	0018      	movs	r0, r3
 8005200:	46bd      	mov	sp, r7
 8005202:	b004      	add	sp, #16
 8005204:	bd80      	pop	{r7, pc}
 8005206:	46c0      	nop			; (mov r8, r8)
 8005208:	01ffffff 	.word	0x01ffffff

0800520c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b094      	sub	sp, #80	; 0x50
 8005210:	af00      	add	r7, sp, #0
 8005212:	60f8      	str	r0, [r7, #12]
 8005214:	60b9      	str	r1, [r7, #8]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	1dfb      	adds	r3, r7, #7
 800521a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800521c:	e0a7      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800521e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005220:	3301      	adds	r3, #1
 8005222:	d100      	bne.n	8005226 <UART_WaitOnFlagUntilTimeout+0x1a>
 8005224:	e0a3      	b.n	800536e <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005226:	f7fd fdb5 	bl	8002d94 <HAL_GetTick>
 800522a:	0002      	movs	r2, r0
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005232:	429a      	cmp	r2, r3
 8005234:	d302      	bcc.n	800523c <UART_WaitOnFlagUntilTimeout+0x30>
 8005236:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005238:	2b00      	cmp	r3, #0
 800523a:	d13f      	bne.n	80052bc <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800523c:	f3ef 8310 	mrs	r3, PRIMASK
 8005240:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8005242:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005244:	647b      	str	r3, [r7, #68]	; 0x44
 8005246:	2301      	movs	r3, #1
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800524a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800524c:	f383 8810 	msr	PRIMASK, r3
}
 8005250:	46c0      	nop			; (mov r8, r8)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	681a      	ldr	r2, [r3, #0]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	494e      	ldr	r1, [pc, #312]	; (8005398 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800525e:	400a      	ands	r2, r1
 8005260:	601a      	str	r2, [r3, #0]
 8005262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005264:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005268:	f383 8810 	msr	PRIMASK, r3
}
 800526c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800526e:	f3ef 8310 	mrs	r3, PRIMASK
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8005274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005276:	643b      	str	r3, [r7, #64]	; 0x40
 8005278:	2301      	movs	r3, #1
 800527a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800527e:	f383 8810 	msr	PRIMASK, r3
}
 8005282:	46c0      	nop			; (mov r8, r8)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689a      	ldr	r2, [r3, #8]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	2101      	movs	r1, #1
 8005290:	438a      	bics	r2, r1
 8005292:	609a      	str	r2, [r3, #8]
 8005294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005296:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2288      	movs	r2, #136	; 0x88
 80052a4:	2120      	movs	r1, #32
 80052a6:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	228c      	movs	r2, #140	; 0x8c
 80052ac:	2120      	movs	r1, #32
 80052ae:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2284      	movs	r2, #132	; 0x84
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e069      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2204      	movs	r2, #4
 80052c4:	4013      	ands	r3, r2
 80052c6:	d052      	beq.n	800536e <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	69da      	ldr	r2, [r3, #28]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	401a      	ands	r2, r3
 80052d4:	2380      	movs	r3, #128	; 0x80
 80052d6:	011b      	lsls	r3, r3, #4
 80052d8:	429a      	cmp	r2, r3
 80052da:	d148      	bne.n	800536e <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2280      	movs	r2, #128	; 0x80
 80052e2:	0112      	lsls	r2, r2, #4
 80052e4:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80052e6:	f3ef 8310 	mrs	r3, PRIMASK
 80052ea:	613b      	str	r3, [r7, #16]
  return(result);
 80052ec:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80052ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f0:	2301      	movs	r3, #1
 80052f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f383 8810 	msr	PRIMASK, r3
}
 80052fa:	46c0      	nop			; (mov r8, r8)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4924      	ldr	r1, [pc, #144]	; (8005398 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8005308:	400a      	ands	r2, r1
 800530a:	601a      	str	r2, [r3, #0]
 800530c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800530e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	f383 8810 	msr	PRIMASK, r3
}
 8005316:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005318:	f3ef 8310 	mrs	r3, PRIMASK
 800531c:	61fb      	str	r3, [r7, #28]
  return(result);
 800531e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005320:	64bb      	str	r3, [r7, #72]	; 0x48
 8005322:	2301      	movs	r3, #1
 8005324:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005326:	6a3b      	ldr	r3, [r7, #32]
 8005328:	f383 8810 	msr	PRIMASK, r3
}
 800532c:	46c0      	nop			; (mov r8, r8)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2101      	movs	r1, #1
 800533a:	438a      	bics	r2, r1
 800533c:	609a      	str	r2, [r3, #8]
 800533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	f383 8810 	msr	PRIMASK, r3
}
 8005348:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2288      	movs	r2, #136	; 0x88
 800534e:	2120      	movs	r1, #32
 8005350:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	228c      	movs	r2, #140	; 0x8c
 8005356:	2120      	movs	r1, #32
 8005358:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2290      	movs	r2, #144	; 0x90
 800535e:	2120      	movs	r1, #32
 8005360:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2284      	movs	r2, #132	; 0x84
 8005366:	2100      	movs	r1, #0
 8005368:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800536a:	2303      	movs	r3, #3
 800536c:	e010      	b.n	8005390 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	4013      	ands	r3, r2
 8005378:	68ba      	ldr	r2, [r7, #8]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	425a      	negs	r2, r3
 800537e:	4153      	adcs	r3, r2
 8005380:	b2db      	uxtb	r3, r3
 8005382:	001a      	movs	r2, r3
 8005384:	1dfb      	adds	r3, r7, #7
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	429a      	cmp	r2, r3
 800538a:	d100      	bne.n	800538e <UART_WaitOnFlagUntilTimeout+0x182>
 800538c:	e747      	b.n	800521e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800538e:	2300      	movs	r3, #0
}
 8005390:	0018      	movs	r0, r3
 8005392:	46bd      	mov	sp, r7
 8005394:	b014      	add	sp, #80	; 0x50
 8005396:	bd80      	pop	{r7, pc}
 8005398:	fffffe5f 	.word	0xfffffe5f

0800539c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b090      	sub	sp, #64	; 0x40
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	1dbb      	adds	r3, r7, #6
 80053a8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1dba      	adds	r2, r7, #6
 80053b4:	215c      	movs	r1, #92	; 0x5c
 80053b6:	8812      	ldrh	r2, [r2, #0]
 80053b8:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2290      	movs	r2, #144	; 0x90
 80053be:	2100      	movs	r1, #0
 80053c0:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	228c      	movs	r2, #140	; 0x8c
 80053c6:	2122      	movs	r1, #34	; 0x22
 80053c8:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2280      	movs	r2, #128	; 0x80
 80053ce:	589b      	ldr	r3, [r3, r2]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d02d      	beq.n	8005430 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2280      	movs	r2, #128	; 0x80
 80053d8:	589b      	ldr	r3, [r3, r2]
 80053da:	4a40      	ldr	r2, [pc, #256]	; (80054dc <UART_Start_Receive_DMA+0x140>)
 80053dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2280      	movs	r2, #128	; 0x80
 80053e2:	589b      	ldr	r3, [r3, r2]
 80053e4:	4a3e      	ldr	r2, [pc, #248]	; (80054e0 <UART_Start_Receive_DMA+0x144>)
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	589b      	ldr	r3, [r3, r2]
 80053ee:	4a3d      	ldr	r2, [pc, #244]	; (80054e4 <UART_Start_Receive_DMA+0x148>)
 80053f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	2280      	movs	r2, #128	; 0x80
 80053f6:	589b      	ldr	r3, [r3, r2]
 80053f8:	2200      	movs	r2, #0
 80053fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2280      	movs	r2, #128	; 0x80
 8005400:	5898      	ldr	r0, [r3, r2]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	3324      	adds	r3, #36	; 0x24
 8005408:	0019      	movs	r1, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800540e:	001a      	movs	r2, r3
 8005410:	1dbb      	adds	r3, r7, #6
 8005412:	881b      	ldrh	r3, [r3, #0]
 8005414:	f7fd fe30 	bl	8003078 <HAL_DMA_Start_IT>
 8005418:	1e03      	subs	r3, r0, #0
 800541a:	d009      	beq.n	8005430 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2290      	movs	r2, #144	; 0x90
 8005420:	2110      	movs	r1, #16
 8005422:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	228c      	movs	r2, #140	; 0x8c
 8005428:	2120      	movs	r1, #32
 800542a:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e050      	b.n	80054d2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	691b      	ldr	r3, [r3, #16]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d019      	beq.n	800546c <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005438:	f3ef 8310 	mrs	r3, PRIMASK
 800543c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800543e:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005440:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005442:	2301      	movs	r3, #1
 8005444:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005448:	f383 8810 	msr	PRIMASK, r3
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	2180      	movs	r1, #128	; 0x80
 800545a:	0049      	lsls	r1, r1, #1
 800545c:	430a      	orrs	r2, r1
 800545e:	601a      	str	r2, [r3, #0]
 8005460:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005462:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005466:	f383 8810 	msr	PRIMASK, r3
}
 800546a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800546c:	f3ef 8310 	mrs	r3, PRIMASK
 8005470:	613b      	str	r3, [r7, #16]
  return(result);
 8005472:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	63bb      	str	r3, [r7, #56]	; 0x38
 8005476:	2301      	movs	r3, #1
 8005478:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f383 8810 	msr	PRIMASK, r3
}
 8005480:	46c0      	nop			; (mov r8, r8)
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	689a      	ldr	r2, [r3, #8]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2101      	movs	r1, #1
 800548e:	430a      	orrs	r2, r1
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	f383 8810 	msr	PRIMASK, r3
}
 800549c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800549e:	f3ef 8310 	mrs	r3, PRIMASK
 80054a2:	61fb      	str	r3, [r7, #28]
  return(result);
 80054a4:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054a6:	637b      	str	r3, [r7, #52]	; 0x34
 80054a8:	2301      	movs	r3, #1
 80054aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	f383 8810 	msr	PRIMASK, r3
}
 80054b2:	46c0      	nop			; (mov r8, r8)
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	2140      	movs	r1, #64	; 0x40
 80054c0:	430a      	orrs	r2, r1
 80054c2:	609a      	str	r2, [r3, #8]
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ca:	f383 8810 	msr	PRIMASK, r3
}
 80054ce:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	0018      	movs	r0, r3
 80054d4:	46bd      	mov	sp, r7
 80054d6:	b010      	add	sp, #64	; 0x40
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	46c0      	nop			; (mov r8, r8)
 80054dc:	080056f5 	.word	0x080056f5
 80054e0:	08005829 	.word	0x08005829
 80054e4:	08005871 	.word	0x08005871

080054e8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b08a      	sub	sp, #40	; 0x28
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054f0:	f3ef 8310 	mrs	r3, PRIMASK
 80054f4:	60bb      	str	r3, [r7, #8]
  return(result);
 80054f6:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80054f8:	627b      	str	r3, [r7, #36]	; 0x24
 80054fa:	2301      	movs	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f383 8810 	msr	PRIMASK, r3
}
 8005504:	46c0      	nop			; (mov r8, r8)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	21c0      	movs	r1, #192	; 0xc0
 8005512:	438a      	bics	r2, r1
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f383 8810 	msr	PRIMASK, r3
}
 8005520:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005522:	f3ef 8310 	mrs	r3, PRIMASK
 8005526:	617b      	str	r3, [r7, #20]
  return(result);
 8005528:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800552a:	623b      	str	r3, [r7, #32]
 800552c:	2301      	movs	r3, #1
 800552e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			; (mov r8, r8)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	4908      	ldr	r1, [pc, #32]	; (8005564 <UART_EndTxTransfer+0x7c>)
 8005544:	400a      	ands	r2, r1
 8005546:	609a      	str	r2, [r3, #8]
 8005548:	6a3b      	ldr	r3, [r7, #32]
 800554a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	f383 8810 	msr	PRIMASK, r3
}
 8005552:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2288      	movs	r2, #136	; 0x88
 8005558:	2120      	movs	r1, #32
 800555a:	5099      	str	r1, [r3, r2]
}
 800555c:	46c0      	nop			; (mov r8, r8)
 800555e:	46bd      	mov	sp, r7
 8005560:	b00a      	add	sp, #40	; 0x28
 8005562:	bd80      	pop	{r7, pc}
 8005564:	ff7fffff 	.word	0xff7fffff

08005568 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005570:	f3ef 8310 	mrs	r3, PRIMASK
 8005574:	617b      	str	r3, [r7, #20]
  return(result);
 8005576:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005578:	637b      	str	r3, [r7, #52]	; 0x34
 800557a:	2301      	movs	r3, #1
 800557c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f383 8810 	msr	PRIMASK, r3
}
 8005584:	46c0      	nop			; (mov r8, r8)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4926      	ldr	r1, [pc, #152]	; (800562c <UART_EndRxTransfer+0xc4>)
 8005592:	400a      	ands	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005598:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800559a:	69fb      	ldr	r3, [r7, #28]
 800559c:	f383 8810 	msr	PRIMASK, r3
}
 80055a0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055a2:	f3ef 8310 	mrs	r3, PRIMASK
 80055a6:	623b      	str	r3, [r7, #32]
  return(result);
 80055a8:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80055aa:	633b      	str	r3, [r7, #48]	; 0x30
 80055ac:	2301      	movs	r3, #1
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	f383 8810 	msr	PRIMASK, r3
}
 80055b6:	46c0      	nop			; (mov r8, r8)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	491b      	ldr	r1, [pc, #108]	; (8005630 <UART_EndRxTransfer+0xc8>)
 80055c4:	400a      	ands	r2, r1
 80055c6:	609a      	str	r2, [r3, #8]
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	f383 8810 	msr	PRIMASK, r3
}
 80055d2:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d118      	bne.n	800560e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055dc:	f3ef 8310 	mrs	r3, PRIMASK
 80055e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80055e2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055e6:	2301      	movs	r3, #1
 80055e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f383 8810 	msr	PRIMASK, r3
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2110      	movs	r1, #16
 80055fe:	438a      	bics	r2, r1
 8005600:	601a      	str	r2, [r3, #0]
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f383 8810 	msr	PRIMASK, r3
}
 800560c:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	228c      	movs	r2, #140	; 0x8c
 8005612:	2120      	movs	r1, #32
 8005614:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	2200      	movs	r2, #0
 800561a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	46bd      	mov	sp, r7
 8005626:	b00e      	add	sp, #56	; 0x38
 8005628:	bd80      	pop	{r7, pc}
 800562a:	46c0      	nop			; (mov r8, r8)
 800562c:	fffffedf 	.word	0xfffffedf
 8005630:	effffffe 	.word	0xeffffffe

08005634 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b08c      	sub	sp, #48	; 0x30
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2220      	movs	r2, #32
 800564a:	4013      	ands	r3, r2
 800564c:	d135      	bne.n	80056ba <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800564e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005650:	2256      	movs	r2, #86	; 0x56
 8005652:	2100      	movs	r1, #0
 8005654:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005656:	f3ef 8310 	mrs	r3, PRIMASK
 800565a:	60fb      	str	r3, [r7, #12]
  return(result);
 800565c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800565e:	62bb      	str	r3, [r7, #40]	; 0x28
 8005660:	2301      	movs	r3, #1
 8005662:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f383 8810 	msr	PRIMASK, r3
}
 800566a:	46c0      	nop			; (mov r8, r8)
 800566c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2180      	movs	r1, #128	; 0x80
 8005678:	438a      	bics	r2, r1
 800567a:	609a      	str	r2, [r3, #8]
 800567c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f383 8810 	msr	PRIMASK, r3
}
 8005686:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005688:	f3ef 8310 	mrs	r3, PRIMASK
 800568c:	61bb      	str	r3, [r7, #24]
  return(result);
 800568e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005690:	627b      	str	r3, [r7, #36]	; 0x24
 8005692:	2301      	movs	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005696:	69fb      	ldr	r3, [r7, #28]
 8005698:	f383 8810 	msr	PRIMASK, r3
}
 800569c:	46c0      	nop			; (mov r8, r8)
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2140      	movs	r1, #64	; 0x40
 80056aa:	430a      	orrs	r2, r1
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f383 8810 	msr	PRIMASK, r3
}
 80056b8:	e006      	b.n	80056c8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	2298      	movs	r2, #152	; 0x98
 80056be:	589b      	ldr	r3, [r3, r2]
 80056c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056c2:	0010      	movs	r0, r2
 80056c4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80056c6:	46c0      	nop			; (mov r8, r8)
 80056c8:	46c0      	nop			; (mov r8, r8)
 80056ca:	46bd      	mov	sp, r7
 80056cc:	b00c      	add	sp, #48	; 0x30
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056dc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2294      	movs	r2, #148	; 0x94
 80056e2:	589b      	ldr	r3, [r3, r2]
 80056e4:	68fa      	ldr	r2, [r7, #12]
 80056e6:	0010      	movs	r0, r2
 80056e8:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056ea:	46c0      	nop			; (mov r8, r8)
 80056ec:	46bd      	mov	sp, r7
 80056ee:	b004      	add	sp, #16
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b094      	sub	sp, #80	; 0x50
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005700:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2220      	movs	r2, #32
 800570a:	4013      	ands	r3, r2
 800570c:	d16f      	bne.n	80057ee <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	225e      	movs	r2, #94	; 0x5e
 8005712:	2100      	movs	r1, #0
 8005714:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005716:	f3ef 8310 	mrs	r3, PRIMASK
 800571a:	61bb      	str	r3, [r7, #24]
  return(result);
 800571c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800571e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005720:	2301      	movs	r3, #1
 8005722:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	f383 8810 	msr	PRIMASK, r3
}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	493b      	ldr	r1, [pc, #236]	; (8005824 <UART_DMAReceiveCplt+0x130>)
 8005738:	400a      	ands	r2, r1
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800573e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	f383 8810 	msr	PRIMASK, r3
}
 8005746:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005748:	f3ef 8310 	mrs	r3, PRIMASK
 800574c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005750:	647b      	str	r3, [r7, #68]	; 0x44
 8005752:	2301      	movs	r3, #1
 8005754:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	f383 8810 	msr	PRIMASK, r3
}
 800575c:	46c0      	nop			; (mov r8, r8)
 800575e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2101      	movs	r1, #1
 800576a:	438a      	bics	r2, r1
 800576c:	609a      	str	r2, [r3, #8]
 800576e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005770:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005774:	f383 8810 	msr	PRIMASK, r3
}
 8005778:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800577a:	f3ef 8310 	mrs	r3, PRIMASK
 800577e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005780:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005782:	643b      	str	r3, [r7, #64]	; 0x40
 8005784:	2301      	movs	r3, #1
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800578a:	f383 8810 	msr	PRIMASK, r3
}
 800578e:	46c0      	nop			; (mov r8, r8)
 8005790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2140      	movs	r1, #64	; 0x40
 800579c:	438a      	bics	r2, r1
 800579e:	609a      	str	r2, [r3, #8]
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a6:	f383 8810 	msr	PRIMASK, r3
}
 80057aa:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ae:	228c      	movs	r2, #140	; 0x8c
 80057b0:	2120      	movs	r1, #32
 80057b2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d118      	bne.n	80057ee <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80057bc:	f3ef 8310 	mrs	r3, PRIMASK
 80057c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80057c2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057c6:	2301      	movs	r3, #1
 80057c8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f383 8810 	msr	PRIMASK, r3
}
 80057d0:	46c0      	nop			; (mov r8, r8)
 80057d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2110      	movs	r1, #16
 80057de:	438a      	bics	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	f383 8810 	msr	PRIMASK, r3
}
 80057ec:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f0:	2200      	movs	r2, #0
 80057f2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	d109      	bne.n	8005810 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80057fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fe:	22c0      	movs	r2, #192	; 0xc0
 8005800:	589b      	ldr	r3, [r3, r2]
 8005802:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005804:	215c      	movs	r1, #92	; 0x5c
 8005806:	5a51      	ldrh	r1, [r2, r1]
 8005808:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800580a:	0010      	movs	r0, r2
 800580c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800580e:	e005      	b.n	800581c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8005810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005812:	22a0      	movs	r2, #160	; 0xa0
 8005814:	589b      	ldr	r3, [r3, r2]
 8005816:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005818:	0010      	movs	r0, r2
 800581a:	4798      	blx	r3
}
 800581c:	46c0      	nop			; (mov r8, r8)
 800581e:	46bd      	mov	sp, r7
 8005820:	b014      	add	sp, #80	; 0x50
 8005822:	bd80      	pop	{r7, pc}
 8005824:	fffffeff 	.word	0xfffffeff

08005828 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	2201      	movs	r2, #1
 800583a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005840:	2b01      	cmp	r3, #1
 8005842:	d10b      	bne.n	800585c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	22c0      	movs	r2, #192	; 0xc0
 8005848:	589b      	ldr	r3, [r3, r2]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	215c      	movs	r1, #92	; 0x5c
 800584e:	5a52      	ldrh	r2, [r2, r1]
 8005850:	0852      	lsrs	r2, r2, #1
 8005852:	b291      	uxth	r1, r2
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	0010      	movs	r0, r2
 8005858:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800585a:	e005      	b.n	8005868 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	229c      	movs	r2, #156	; 0x9c
 8005860:	589b      	ldr	r3, [r3, r2]
 8005862:	68fa      	ldr	r2, [r7, #12]
 8005864:	0010      	movs	r0, r2
 8005866:	4798      	blx	r3
}
 8005868:	46c0      	nop			; (mov r8, r8)
 800586a:	46bd      	mov	sp, r7
 800586c:	b004      	add	sp, #16
 800586e:	bd80      	pop	{r7, pc}

08005870 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b086      	sub	sp, #24
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2288      	movs	r2, #136	; 0x88
 8005882:	589b      	ldr	r3, [r3, r2]
 8005884:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	228c      	movs	r2, #140	; 0x8c
 800588a:	589b      	ldr	r3, [r3, r2]
 800588c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	2280      	movs	r2, #128	; 0x80
 8005896:	4013      	ands	r3, r2
 8005898:	2b80      	cmp	r3, #128	; 0x80
 800589a:	d10a      	bne.n	80058b2 <UART_DMAError+0x42>
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	2b21      	cmp	r3, #33	; 0x21
 80058a0:	d107      	bne.n	80058b2 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	2256      	movs	r2, #86	; 0x56
 80058a6:	2100      	movs	r1, #0
 80058a8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f7ff fe1b 	bl	80054e8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2240      	movs	r2, #64	; 0x40
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b40      	cmp	r3, #64	; 0x40
 80058be:	d10a      	bne.n	80058d6 <UART_DMAError+0x66>
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b22      	cmp	r3, #34	; 0x22
 80058c4:	d107      	bne.n	80058d6 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	225e      	movs	r2, #94	; 0x5e
 80058ca:	2100      	movs	r1, #0
 80058cc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	0018      	movs	r0, r3
 80058d2:	f7ff fe49 	bl	8005568 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	2290      	movs	r2, #144	; 0x90
 80058da:	589b      	ldr	r3, [r3, r2]
 80058dc:	2210      	movs	r2, #16
 80058de:	431a      	orrs	r2, r3
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	2190      	movs	r1, #144	; 0x90
 80058e4:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	22a4      	movs	r2, #164	; 0xa4
 80058ea:	589b      	ldr	r3, [r3, r2]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	0010      	movs	r0, r2
 80058f0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f2:	46c0      	nop			; (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	b006      	add	sp, #24
 80058f8:	bd80      	pop	{r7, pc}

080058fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058fa:	b580      	push	{r7, lr}
 80058fc:	b084      	sub	sp, #16
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005906:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	225e      	movs	r2, #94	; 0x5e
 800590c:	2100      	movs	r1, #0
 800590e:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2256      	movs	r2, #86	; 0x56
 8005914:	2100      	movs	r1, #0
 8005916:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	22a4      	movs	r2, #164	; 0xa4
 800591c:	589b      	ldr	r3, [r3, r2]
 800591e:	68fa      	ldr	r2, [r7, #12]
 8005920:	0010      	movs	r0, r2
 8005922:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005924:	46c0      	nop			; (mov r8, r8)
 8005926:	46bd      	mov	sp, r7
 8005928:	b004      	add	sp, #16
 800592a:	bd80      	pop	{r7, pc}

0800592c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005934:	f3ef 8310 	mrs	r3, PRIMASK
 8005938:	60bb      	str	r3, [r7, #8]
  return(result);
 800593a:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	2301      	movs	r3, #1
 8005940:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f383 8810 	msr	PRIMASK, r3
}
 8005948:	46c0      	nop			; (mov r8, r8)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2140      	movs	r1, #64	; 0x40
 8005956:	438a      	bics	r2, r1
 8005958:	601a      	str	r2, [r3, #0]
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f383 8810 	msr	PRIMASK, r3
}
 8005964:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2288      	movs	r2, #136	; 0x88
 800596a:	2120      	movs	r1, #32
 800596c:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2200      	movs	r2, #0
 8005972:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2298      	movs	r2, #152	; 0x98
 8005978:	589b      	ldr	r3, [r3, r2]
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	0010      	movs	r0, r2
 800597e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	46bd      	mov	sp, r7
 8005984:	b006      	add	sp, #24
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005990:	46c0      	nop			; (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059a0:	46c0      	nop			; (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b002      	add	sp, #8
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059b0:	46c0      	nop			; (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <realloc>:
 80059b8:	b510      	push	{r4, lr}
 80059ba:	4b03      	ldr	r3, [pc, #12]	; (80059c8 <realloc+0x10>)
 80059bc:	000a      	movs	r2, r1
 80059be:	0001      	movs	r1, r0
 80059c0:	6818      	ldr	r0, [r3, #0]
 80059c2:	f000 f803 	bl	80059cc <_realloc_r>
 80059c6:	bd10      	pop	{r4, pc}
 80059c8:	20000064 	.word	0x20000064

080059cc <_realloc_r>:
 80059cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059ce:	0007      	movs	r7, r0
 80059d0:	000e      	movs	r6, r1
 80059d2:	0014      	movs	r4, r2
 80059d4:	2900      	cmp	r1, #0
 80059d6:	d105      	bne.n	80059e4 <_realloc_r+0x18>
 80059d8:	0011      	movs	r1, r2
 80059da:	f000 f8d1 	bl	8005b80 <_malloc_r>
 80059de:	0005      	movs	r5, r0
 80059e0:	0028      	movs	r0, r5
 80059e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d103      	bne.n	80059f0 <_realloc_r+0x24>
 80059e8:	f000 f85e 	bl	8005aa8 <_free_r>
 80059ec:	0025      	movs	r5, r4
 80059ee:	e7f7      	b.n	80059e0 <_realloc_r+0x14>
 80059f0:	f000 f958 	bl	8005ca4 <_malloc_usable_size_r>
 80059f4:	9001      	str	r0, [sp, #4]
 80059f6:	4284      	cmp	r4, r0
 80059f8:	d803      	bhi.n	8005a02 <_realloc_r+0x36>
 80059fa:	0035      	movs	r5, r6
 80059fc:	0843      	lsrs	r3, r0, #1
 80059fe:	42a3      	cmp	r3, r4
 8005a00:	d3ee      	bcc.n	80059e0 <_realloc_r+0x14>
 8005a02:	0021      	movs	r1, r4
 8005a04:	0038      	movs	r0, r7
 8005a06:	f000 f8bb 	bl	8005b80 <_malloc_r>
 8005a0a:	1e05      	subs	r5, r0, #0
 8005a0c:	d0e8      	beq.n	80059e0 <_realloc_r+0x14>
 8005a0e:	9b01      	ldr	r3, [sp, #4]
 8005a10:	0022      	movs	r2, r4
 8005a12:	429c      	cmp	r4, r3
 8005a14:	d900      	bls.n	8005a18 <_realloc_r+0x4c>
 8005a16:	001a      	movs	r2, r3
 8005a18:	0031      	movs	r1, r6
 8005a1a:	0028      	movs	r0, r5
 8005a1c:	f000 f83a 	bl	8005a94 <memcpy>
 8005a20:	0031      	movs	r1, r6
 8005a22:	0038      	movs	r0, r7
 8005a24:	f000 f840 	bl	8005aa8 <_free_r>
 8005a28:	e7da      	b.n	80059e0 <_realloc_r+0x14>

08005a2a <memset>:
 8005a2a:	0003      	movs	r3, r0
 8005a2c:	1882      	adds	r2, r0, r2
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d100      	bne.n	8005a34 <memset+0xa>
 8005a32:	4770      	bx	lr
 8005a34:	7019      	strb	r1, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	e7f9      	b.n	8005a2e <memset+0x4>
	...

08005a3c <__errno>:
 8005a3c:	4b01      	ldr	r3, [pc, #4]	; (8005a44 <__errno+0x8>)
 8005a3e:	6818      	ldr	r0, [r3, #0]
 8005a40:	4770      	bx	lr
 8005a42:	46c0      	nop			; (mov r8, r8)
 8005a44:	20000064 	.word	0x20000064

08005a48 <__libc_init_array>:
 8005a48:	b570      	push	{r4, r5, r6, lr}
 8005a4a:	2600      	movs	r6, #0
 8005a4c:	4c0c      	ldr	r4, [pc, #48]	; (8005a80 <__libc_init_array+0x38>)
 8005a4e:	4d0d      	ldr	r5, [pc, #52]	; (8005a84 <__libc_init_array+0x3c>)
 8005a50:	1b64      	subs	r4, r4, r5
 8005a52:	10a4      	asrs	r4, r4, #2
 8005a54:	42a6      	cmp	r6, r4
 8005a56:	d109      	bne.n	8005a6c <__libc_init_array+0x24>
 8005a58:	2600      	movs	r6, #0
 8005a5a:	f000 f93d 	bl	8005cd8 <_init>
 8005a5e:	4c0a      	ldr	r4, [pc, #40]	; (8005a88 <__libc_init_array+0x40>)
 8005a60:	4d0a      	ldr	r5, [pc, #40]	; (8005a8c <__libc_init_array+0x44>)
 8005a62:	1b64      	subs	r4, r4, r5
 8005a64:	10a4      	asrs	r4, r4, #2
 8005a66:	42a6      	cmp	r6, r4
 8005a68:	d105      	bne.n	8005a76 <__libc_init_array+0x2e>
 8005a6a:	bd70      	pop	{r4, r5, r6, pc}
 8005a6c:	00b3      	lsls	r3, r6, #2
 8005a6e:	58eb      	ldr	r3, [r5, r3]
 8005a70:	4798      	blx	r3
 8005a72:	3601      	adds	r6, #1
 8005a74:	e7ee      	b.n	8005a54 <__libc_init_array+0xc>
 8005a76:	00b3      	lsls	r3, r6, #2
 8005a78:	58eb      	ldr	r3, [r5, r3]
 8005a7a:	4798      	blx	r3
 8005a7c:	3601      	adds	r6, #1
 8005a7e:	e7f2      	b.n	8005a66 <__libc_init_array+0x1e>
 8005a80:	08006028 	.word	0x08006028
 8005a84:	08006028 	.word	0x08006028
 8005a88:	08006030 	.word	0x08006030
 8005a8c:	08006028 	.word	0x08006028

08005a90 <__retarget_lock_acquire_recursive>:
 8005a90:	4770      	bx	lr

08005a92 <__retarget_lock_release_recursive>:
 8005a92:	4770      	bx	lr

08005a94 <memcpy>:
 8005a94:	2300      	movs	r3, #0
 8005a96:	b510      	push	{r4, lr}
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d100      	bne.n	8005a9e <memcpy+0xa>
 8005a9c:	bd10      	pop	{r4, pc}
 8005a9e:	5ccc      	ldrb	r4, [r1, r3]
 8005aa0:	54c4      	strb	r4, [r0, r3]
 8005aa2:	3301      	adds	r3, #1
 8005aa4:	e7f8      	b.n	8005a98 <memcpy+0x4>
	...

08005aa8 <_free_r>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	0005      	movs	r5, r0
 8005aac:	2900      	cmp	r1, #0
 8005aae:	d010      	beq.n	8005ad2 <_free_r+0x2a>
 8005ab0:	1f0c      	subs	r4, r1, #4
 8005ab2:	6823      	ldr	r3, [r4, #0]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	da00      	bge.n	8005aba <_free_r+0x12>
 8005ab8:	18e4      	adds	r4, r4, r3
 8005aba:	0028      	movs	r0, r5
 8005abc:	f000 f8e2 	bl	8005c84 <__malloc_lock>
 8005ac0:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <_free_r+0x90>)
 8005ac2:	6813      	ldr	r3, [r2, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d105      	bne.n	8005ad4 <_free_r+0x2c>
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	6014      	str	r4, [r2, #0]
 8005acc:	0028      	movs	r0, r5
 8005ace:	f000 f8e1 	bl	8005c94 <__malloc_unlock>
 8005ad2:	bd70      	pop	{r4, r5, r6, pc}
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d908      	bls.n	8005aea <_free_r+0x42>
 8005ad8:	6820      	ldr	r0, [r4, #0]
 8005ada:	1821      	adds	r1, r4, r0
 8005adc:	428b      	cmp	r3, r1
 8005ade:	d1f3      	bne.n	8005ac8 <_free_r+0x20>
 8005ae0:	6819      	ldr	r1, [r3, #0]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	1809      	adds	r1, r1, r0
 8005ae6:	6021      	str	r1, [r4, #0]
 8005ae8:	e7ee      	b.n	8005ac8 <_free_r+0x20>
 8005aea:	001a      	movs	r2, r3
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d001      	beq.n	8005af6 <_free_r+0x4e>
 8005af2:	42a3      	cmp	r3, r4
 8005af4:	d9f9      	bls.n	8005aea <_free_r+0x42>
 8005af6:	6811      	ldr	r1, [r2, #0]
 8005af8:	1850      	adds	r0, r2, r1
 8005afa:	42a0      	cmp	r0, r4
 8005afc:	d10b      	bne.n	8005b16 <_free_r+0x6e>
 8005afe:	6820      	ldr	r0, [r4, #0]
 8005b00:	1809      	adds	r1, r1, r0
 8005b02:	1850      	adds	r0, r2, r1
 8005b04:	6011      	str	r1, [r2, #0]
 8005b06:	4283      	cmp	r3, r0
 8005b08:	d1e0      	bne.n	8005acc <_free_r+0x24>
 8005b0a:	6818      	ldr	r0, [r3, #0]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	1841      	adds	r1, r0, r1
 8005b10:	6011      	str	r1, [r2, #0]
 8005b12:	6053      	str	r3, [r2, #4]
 8005b14:	e7da      	b.n	8005acc <_free_r+0x24>
 8005b16:	42a0      	cmp	r0, r4
 8005b18:	d902      	bls.n	8005b20 <_free_r+0x78>
 8005b1a:	230c      	movs	r3, #12
 8005b1c:	602b      	str	r3, [r5, #0]
 8005b1e:	e7d5      	b.n	8005acc <_free_r+0x24>
 8005b20:	6820      	ldr	r0, [r4, #0]
 8005b22:	1821      	adds	r1, r4, r0
 8005b24:	428b      	cmp	r3, r1
 8005b26:	d103      	bne.n	8005b30 <_free_r+0x88>
 8005b28:	6819      	ldr	r1, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	1809      	adds	r1, r1, r0
 8005b2e:	6021      	str	r1, [r4, #0]
 8005b30:	6063      	str	r3, [r4, #4]
 8005b32:	6054      	str	r4, [r2, #4]
 8005b34:	e7ca      	b.n	8005acc <_free_r+0x24>
 8005b36:	46c0      	nop			; (mov r8, r8)
 8005b38:	20000ce8 	.word	0x20000ce8

08005b3c <sbrk_aligned>:
 8005b3c:	b570      	push	{r4, r5, r6, lr}
 8005b3e:	4e0f      	ldr	r6, [pc, #60]	; (8005b7c <sbrk_aligned+0x40>)
 8005b40:	000d      	movs	r5, r1
 8005b42:	6831      	ldr	r1, [r6, #0]
 8005b44:	0004      	movs	r4, r0
 8005b46:	2900      	cmp	r1, #0
 8005b48:	d102      	bne.n	8005b50 <sbrk_aligned+0x14>
 8005b4a:	f000 f8b3 	bl	8005cb4 <_sbrk_r>
 8005b4e:	6030      	str	r0, [r6, #0]
 8005b50:	0029      	movs	r1, r5
 8005b52:	0020      	movs	r0, r4
 8005b54:	f000 f8ae 	bl	8005cb4 <_sbrk_r>
 8005b58:	1c43      	adds	r3, r0, #1
 8005b5a:	d00a      	beq.n	8005b72 <sbrk_aligned+0x36>
 8005b5c:	2303      	movs	r3, #3
 8005b5e:	1cc5      	adds	r5, r0, #3
 8005b60:	439d      	bics	r5, r3
 8005b62:	42a8      	cmp	r0, r5
 8005b64:	d007      	beq.n	8005b76 <sbrk_aligned+0x3a>
 8005b66:	1a29      	subs	r1, r5, r0
 8005b68:	0020      	movs	r0, r4
 8005b6a:	f000 f8a3 	bl	8005cb4 <_sbrk_r>
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d101      	bne.n	8005b76 <sbrk_aligned+0x3a>
 8005b72:	2501      	movs	r5, #1
 8005b74:	426d      	negs	r5, r5
 8005b76:	0028      	movs	r0, r5
 8005b78:	bd70      	pop	{r4, r5, r6, pc}
 8005b7a:	46c0      	nop			; (mov r8, r8)
 8005b7c:	20000cec 	.word	0x20000cec

08005b80 <_malloc_r>:
 8005b80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b82:	2203      	movs	r2, #3
 8005b84:	1ccb      	adds	r3, r1, #3
 8005b86:	4393      	bics	r3, r2
 8005b88:	3308      	adds	r3, #8
 8005b8a:	0006      	movs	r6, r0
 8005b8c:	001f      	movs	r7, r3
 8005b8e:	2b0c      	cmp	r3, #12
 8005b90:	d238      	bcs.n	8005c04 <_malloc_r+0x84>
 8005b92:	270c      	movs	r7, #12
 8005b94:	42b9      	cmp	r1, r7
 8005b96:	d837      	bhi.n	8005c08 <_malloc_r+0x88>
 8005b98:	0030      	movs	r0, r6
 8005b9a:	f000 f873 	bl	8005c84 <__malloc_lock>
 8005b9e:	4b38      	ldr	r3, [pc, #224]	; (8005c80 <_malloc_r+0x100>)
 8005ba0:	9300      	str	r3, [sp, #0]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	001c      	movs	r4, r3
 8005ba6:	2c00      	cmp	r4, #0
 8005ba8:	d133      	bne.n	8005c12 <_malloc_r+0x92>
 8005baa:	0039      	movs	r1, r7
 8005bac:	0030      	movs	r0, r6
 8005bae:	f7ff ffc5 	bl	8005b3c <sbrk_aligned>
 8005bb2:	0004      	movs	r4, r0
 8005bb4:	1c43      	adds	r3, r0, #1
 8005bb6:	d15e      	bne.n	8005c76 <_malloc_r+0xf6>
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	681c      	ldr	r4, [r3, #0]
 8005bbc:	0025      	movs	r5, r4
 8005bbe:	2d00      	cmp	r5, #0
 8005bc0:	d14e      	bne.n	8005c60 <_malloc_r+0xe0>
 8005bc2:	2c00      	cmp	r4, #0
 8005bc4:	d051      	beq.n	8005c6a <_malloc_r+0xea>
 8005bc6:	6823      	ldr	r3, [r4, #0]
 8005bc8:	0029      	movs	r1, r5
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	0030      	movs	r0, r6
 8005bce:	9301      	str	r3, [sp, #4]
 8005bd0:	f000 f870 	bl	8005cb4 <_sbrk_r>
 8005bd4:	9b01      	ldr	r3, [sp, #4]
 8005bd6:	4283      	cmp	r3, r0
 8005bd8:	d147      	bne.n	8005c6a <_malloc_r+0xea>
 8005bda:	6823      	ldr	r3, [r4, #0]
 8005bdc:	0030      	movs	r0, r6
 8005bde:	1aff      	subs	r7, r7, r3
 8005be0:	0039      	movs	r1, r7
 8005be2:	f7ff ffab 	bl	8005b3c <sbrk_aligned>
 8005be6:	3001      	adds	r0, #1
 8005be8:	d03f      	beq.n	8005c6a <_malloc_r+0xea>
 8005bea:	6823      	ldr	r3, [r4, #0]
 8005bec:	19db      	adds	r3, r3, r7
 8005bee:	6023      	str	r3, [r4, #0]
 8005bf0:	9b00      	ldr	r3, [sp, #0]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d040      	beq.n	8005c7a <_malloc_r+0xfa>
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	42a2      	cmp	r2, r4
 8005bfc:	d133      	bne.n	8005c66 <_malloc_r+0xe6>
 8005bfe:	2200      	movs	r2, #0
 8005c00:	605a      	str	r2, [r3, #4]
 8005c02:	e014      	b.n	8005c2e <_malloc_r+0xae>
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	dac5      	bge.n	8005b94 <_malloc_r+0x14>
 8005c08:	230c      	movs	r3, #12
 8005c0a:	2500      	movs	r5, #0
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	0028      	movs	r0, r5
 8005c10:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005c12:	6821      	ldr	r1, [r4, #0]
 8005c14:	1bc9      	subs	r1, r1, r7
 8005c16:	d420      	bmi.n	8005c5a <_malloc_r+0xda>
 8005c18:	290b      	cmp	r1, #11
 8005c1a:	d918      	bls.n	8005c4e <_malloc_r+0xce>
 8005c1c:	19e2      	adds	r2, r4, r7
 8005c1e:	6027      	str	r7, [r4, #0]
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d112      	bne.n	8005c4a <_malloc_r+0xca>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	601a      	str	r2, [r3, #0]
 8005c28:	6863      	ldr	r3, [r4, #4]
 8005c2a:	6011      	str	r1, [r2, #0]
 8005c2c:	6053      	str	r3, [r2, #4]
 8005c2e:	0030      	movs	r0, r6
 8005c30:	0025      	movs	r5, r4
 8005c32:	f000 f82f 	bl	8005c94 <__malloc_unlock>
 8005c36:	2207      	movs	r2, #7
 8005c38:	350b      	adds	r5, #11
 8005c3a:	1d23      	adds	r3, r4, #4
 8005c3c:	4395      	bics	r5, r2
 8005c3e:	1aea      	subs	r2, r5, r3
 8005c40:	429d      	cmp	r5, r3
 8005c42:	d0e4      	beq.n	8005c0e <_malloc_r+0x8e>
 8005c44:	1b5b      	subs	r3, r3, r5
 8005c46:	50a3      	str	r3, [r4, r2]
 8005c48:	e7e1      	b.n	8005c0e <_malloc_r+0x8e>
 8005c4a:	605a      	str	r2, [r3, #4]
 8005c4c:	e7ec      	b.n	8005c28 <_malloc_r+0xa8>
 8005c4e:	6862      	ldr	r2, [r4, #4]
 8005c50:	42a3      	cmp	r3, r4
 8005c52:	d1d5      	bne.n	8005c00 <_malloc_r+0x80>
 8005c54:	9b00      	ldr	r3, [sp, #0]
 8005c56:	601a      	str	r2, [r3, #0]
 8005c58:	e7e9      	b.n	8005c2e <_malloc_r+0xae>
 8005c5a:	0023      	movs	r3, r4
 8005c5c:	6864      	ldr	r4, [r4, #4]
 8005c5e:	e7a2      	b.n	8005ba6 <_malloc_r+0x26>
 8005c60:	002c      	movs	r4, r5
 8005c62:	686d      	ldr	r5, [r5, #4]
 8005c64:	e7ab      	b.n	8005bbe <_malloc_r+0x3e>
 8005c66:	0013      	movs	r3, r2
 8005c68:	e7c4      	b.n	8005bf4 <_malloc_r+0x74>
 8005c6a:	230c      	movs	r3, #12
 8005c6c:	0030      	movs	r0, r6
 8005c6e:	6033      	str	r3, [r6, #0]
 8005c70:	f000 f810 	bl	8005c94 <__malloc_unlock>
 8005c74:	e7cb      	b.n	8005c0e <_malloc_r+0x8e>
 8005c76:	6027      	str	r7, [r4, #0]
 8005c78:	e7d9      	b.n	8005c2e <_malloc_r+0xae>
 8005c7a:	605b      	str	r3, [r3, #4]
 8005c7c:	deff      	udf	#255	; 0xff
 8005c7e:	46c0      	nop			; (mov r8, r8)
 8005c80:	20000ce8 	.word	0x20000ce8

08005c84 <__malloc_lock>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	4802      	ldr	r0, [pc, #8]	; (8005c90 <__malloc_lock+0xc>)
 8005c88:	f7ff ff02 	bl	8005a90 <__retarget_lock_acquire_recursive>
 8005c8c:	bd10      	pop	{r4, pc}
 8005c8e:	46c0      	nop			; (mov r8, r8)
 8005c90:	20000ce4 	.word	0x20000ce4

08005c94 <__malloc_unlock>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	4802      	ldr	r0, [pc, #8]	; (8005ca0 <__malloc_unlock+0xc>)
 8005c98:	f7ff fefb 	bl	8005a92 <__retarget_lock_release_recursive>
 8005c9c:	bd10      	pop	{r4, pc}
 8005c9e:	46c0      	nop			; (mov r8, r8)
 8005ca0:	20000ce4 	.word	0x20000ce4

08005ca4 <_malloc_usable_size_r>:
 8005ca4:	1f0b      	subs	r3, r1, #4
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	1f18      	subs	r0, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	da01      	bge.n	8005cb2 <_malloc_usable_size_r+0xe>
 8005cae:	580b      	ldr	r3, [r1, r0]
 8005cb0:	18c0      	adds	r0, r0, r3
 8005cb2:	4770      	bx	lr

08005cb4 <_sbrk_r>:
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	b570      	push	{r4, r5, r6, lr}
 8005cb8:	4d06      	ldr	r5, [pc, #24]	; (8005cd4 <_sbrk_r+0x20>)
 8005cba:	0004      	movs	r4, r0
 8005cbc:	0008      	movs	r0, r1
 8005cbe:	602b      	str	r3, [r5, #0]
 8005cc0:	f7fc ff86 	bl	8002bd0 <_sbrk>
 8005cc4:	1c43      	adds	r3, r0, #1
 8005cc6:	d103      	bne.n	8005cd0 <_sbrk_r+0x1c>
 8005cc8:	682b      	ldr	r3, [r5, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d000      	beq.n	8005cd0 <_sbrk_r+0x1c>
 8005cce:	6023      	str	r3, [r4, #0]
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	46c0      	nop			; (mov r8, r8)
 8005cd4:	20000ce0 	.word	0x20000ce0

08005cd8 <_init>:
 8005cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cda:	46c0      	nop			; (mov r8, r8)
 8005cdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cde:	bc08      	pop	{r3}
 8005ce0:	469e      	mov	lr, r3
 8005ce2:	4770      	bx	lr

08005ce4 <_fini>:
 8005ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ce6:	46c0      	nop			; (mov r8, r8)
 8005ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cea:	bc08      	pop	{r3}
 8005cec:	469e      	mov	lr, r3
 8005cee:	4770      	bx	lr
